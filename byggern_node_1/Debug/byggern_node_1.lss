
byggern_node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000276  00800100  000021fc  00002290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800376  00800376  00002506  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d45  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015eb  00000000  00000000  00006665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aea  00000000  00000000  00007c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000083c  00000000  00000000  0000973c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf7  00000000  00000000  00009f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ed5  00000000  00000000  0000ac6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000cb44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__ctors_end>
       4:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_1>
       8:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
       c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      10:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      14:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      18:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      1c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__vector_7>
      20:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      24:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      28:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      2c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      30:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      34:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      38:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      3c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      40:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      44:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_17>
      48:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      4c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      50:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      54:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      58:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      5c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      60:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      64:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      68:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      6c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__bad_interrupt>
      70:	6d 05       	cpc	r22, r13
      72:	7f 05       	cpc	r23, r15
      74:	c0 05       	cpc	r28, r0
      76:	29 06       	cpc	r2, r25
      78:	1b 06       	cpc	r1, r27
      7a:	69 06       	cpc	r6, r25
      7c:	76 06       	cpc	r7, r22
      7e:	20 06       	cpc	r2, r16
      80:	f7 0a       	sbc	r15, r23
      82:	fa 0a       	sbc	r15, r26
      84:	fd 0a       	sbc	r15, r29
      86:	09 0b       	sbc	r16, r25
      88:	06 0b       	sbc	r16, r22
      8a:	8f 0b       	sbc	r24, r31
      8c:	8f 0b       	sbc	r24, r31
      8e:	8f 0b       	sbc	r24, r31
      90:	83 0b       	sbc	r24, r19
      92:	91 0b       	sbc	r25, r17

00000094 <__trampolines_end>:
	...
      c8:	00 00       	nop
      ca:	00 e0       	ldi	r16, 0x00	; 0
      cc:	f0 f0       	brcs	.+60     	; 0x10a <__trampolines_end+0x76>
      ce:	f8 f8       	.word	0xf8f8	; ????
      d0:	f8 fc       	.word	0xfcf8	; ????
      d2:	fc fe       	.word	0xfefc	; ????
      d4:	ff ff       	.word	0xffff	; ????
      d6:	ff ff       	.word	0xffff	; ????
      d8:	ff ff       	.word	0xffff	; ????
      da:	ff ff       	.word	0xffff	; ????
      dc:	ff ff       	.word	0xffff	; ????
      de:	ff ff       	.word	0xffff	; ????
      e0:	ff ff       	.word	0xffff	; ????
      e2:	ff ff       	.word	0xffff	; ????
      e4:	ff ff       	.word	0xffff	; ????
      e6:	ff ff       	.word	0xffff	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fc fc       	.word	0xfcfc	; ????
      ec:	f8 f0       	brcs	.+62     	; 0x12c <__trampolines_end+0x98>
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	c0 c0       	rjmp	.+384    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
      f2:	80 80       	ld	r8, Z
	...
     148:	00 28       	or	r0, r0
     14a:	ff ff       	.word	0xffff	; ????
     14c:	ff ff       	.word	0xffff	; ????
     14e:	ff ff       	.word	0xffff	; ????
     150:	ff ff       	.word	0xffff	; ????
     152:	ff ff       	.word	0xffff	; ????
     154:	ff 7f       	andi	r31, 0xFF	; 255
     156:	7f 7f       	andi	r23, 0xFF	; 255
     158:	ff ff       	.word	0xffff	; ????
     15a:	ff ff       	.word	0xffff	; ????
     15c:	ff ff       	.word	0xffff	; ????
     15e:	ff ff       	.word	0xffff	; ????
     160:	ff ff       	.word	0xffff	; ????
     162:	ff ff       	.word	0xffff	; ????
     164:	ff ff       	.word	0xffff	; ????
     166:	ff ff       	.word	0xffff	; ????
     168:	ff ff       	.word	0xffff	; ????
     16a:	ff ff       	.word	0xffff	; ????
     16c:	ff ff       	.word	0xffff	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	ff ff       	.word	0xffff	; ????
     172:	ff ff       	.word	0xffff	; ????
     174:	ff fe       	.word	0xfeff	; ????
     176:	fc f8       	.word	0xf8fc	; ????
     178:	f0 f0       	brcs	.+60     	; 0x1b6 <__trampolines_end+0x122>
     17a:	c0 c0       	rjmp	.+384    	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     17c:	80 00       	.word	0x0080	; ????
	...
     1ca:	7f ff       	.word	0xff7f	; ????
     1cc:	ff ff       	.word	0xffff	; ????
     1ce:	ff ff       	.word	0xffff	; ????
     1d0:	ff ff       	.word	0xffff	; ????
     1d2:	ff f8       	.word	0xf8ff	; ????
     1d4:	20 00       	.word	0x0020	; ????
     1d6:	40 00       	.word	0x0040	; ????
     1d8:	82 02       	muls	r24, r18
     1da:	00 00       	nop
     1dc:	04 05       	cpc	r16, r4
     1de:	05 25       	eor	r16, r5
     1e0:	27 27       	eor	r18, r23
     1e2:	27 6f       	ori	r18, 0xF7	; 247
     1e4:	6f 6f       	ori	r22, 0xFF	; 255
     1e6:	6f ef       	ldi	r22, 0xFF	; 255
     1e8:	df df       	rcall	.-66     	; 0x1a8 <__trampolines_end+0x114>
     1ea:	ff ff       	.word	0xffff	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff ff       	.word	0xffff	; ????
     1f0:	ff ff       	.word	0xffff	; ????
     1f2:	ff ff       	.word	0xffff	; ????
     1f4:	ff ff       	.word	0xffff	; ????
     1f6:	ff ff       	.word	0xffff	; ????
     1f8:	ff ff       	.word	0xffff	; ????
     1fa:	ff ff       	.word	0xffff	; ????
     1fc:	ff ff       	.word	0xffff	; ????
     1fe:	ff fe       	.word	0xfeff	; ????
     200:	f8 f0       	brcs	.+62     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
     202:	e0 c0       	rjmp	.+448    	; 0x3c4 <__EEPROM_REGION_LENGTH__+0x1c4>
     204:	80 00       	.word	0x0080	; ????
	...
     24a:	20 7f       	andi	r18, 0xF0	; 240
     24c:	ff ff       	.word	0xffff	; ????
     24e:	ff ff       	.word	0xffff	; ????
     250:	ff ff       	.word	0xffff	; ????
     252:	ff ff       	.word	0xffff	; ????
     254:	fe f0       	brts	.+62     	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
     256:	fc 03       	fmulsu	r23, r20
	...
     260:	88 c8       	rjmp	.-3824   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     262:	fc fc       	.word	0xfcfc	; ????
     264:	fc fe       	.word	0xfefc	; ????
     266:	fe fe       	.word	0xfefe	; ????
     268:	fe ff       	.word	0xfffe	; ????
     26a:	ff ff       	.word	0xffff	; ????
     26c:	ff ff       	.word	0xffff	; ????
     26e:	ff ff       	.word	0xffff	; ????
     270:	ff ff       	.word	0xffff	; ????
     272:	ff df       	rcall	.-2      	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
     274:	df 9f       	mul	r29, r31
     276:	3f 3f       	cpi	r19, 0xFF	; 255
     278:	7f ff       	.word	0xff7f	; ????
     27a:	ff ff       	.word	0xffff	; ????
     27c:	ff ff       	.word	0xffff	; ????
     27e:	ff ff       	.word	0xffff	; ????
     280:	ff ff       	.word	0xffff	; ????
     282:	ff ff       	.word	0xffff	; ????
     284:	ff ff       	.word	0xffff	; ????
     286:	fc f0       	brlt	.+62     	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
     288:	e0 80       	ld	r14, Z
	...
     2ca:	00 00       	nop
     2cc:	00 03       	mulsu	r16, r16
     2ce:	07 1f       	adc	r16, r23
     2d0:	7f ff       	.word	0xff7f	; ????
     2d2:	ff ff       	.word	0xffff	; ????
     2d4:	ff ff       	.word	0xffff	; ????
     2d6:	f9 18       	sub	r15, r9
     2d8:	00 00       	nop
     2da:	00 00       	nop
     2dc:	18 fc       	.word	0xfc18	; ????
     2de:	fe ff       	.word	0xfffe	; ????
     2e0:	ff ff       	.word	0xffff	; ????
     2e2:	ff ff       	.word	0xffff	; ????
     2e4:	ff ff       	.word	0xffff	; ????
     2e6:	ff ff       	.word	0xffff	; ????
     2e8:	ff ff       	.word	0xffff	; ????
     2ea:	f7 c3       	rjmp	.+2030   	; 0xada <Game_Machine+0x40>
     2ec:	07 83       	std	Z+7, r16	; 0x07
     2ee:	c3 c3       	rjmp	.+1926   	; 0xa76 <Can_Recieve_Msg+0x72>
     2f0:	e3 f3       	brvs	.-8      	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
     2f2:	f3 f3       	brvs	.-4      	; 0x2f0 <__EEPROM_REGION_LENGTH__+0xf0>
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	ff 7c       	andi	r31, 0xCF	; 207
     2f8:	00 00       	nop
     2fa:	00 01       	movw	r0, r0
     2fc:	03 0f       	add	r16, r19
     2fe:	1f 7f       	andi	r17, 0xFF	; 255
     300:	ff ff       	.word	0xffff	; ????
     302:	ff ff       	.word	0xffff	; ????
     304:	ff ff       	.word	0xffff	; ????
     306:	ff ff       	.word	0xffff	; ????
     308:	ff ff       	.word	0xffff	; ????
     30a:	10 00       	.word	0x0010	; ????
	...
     350:	00 00       	nop
     352:	01 03       	mulsu	r16, r17
     354:	03 01       	movw	r0, r6
     356:	00 00       	nop
     358:	00 80       	ld	r0, Z
     35a:	00 00       	nop
     35c:	00 00       	nop
     35e:	01 c3       	rjmp	.+1538   	; 0x962 <Can_Init+0x1a>
     360:	ff ff       	.word	0xffff	; ????
     362:	ff ff       	.word	0xffff	; ????
     364:	ff ff       	.word	0xffff	; ????
     366:	ff ff       	.word	0xffff	; ????
     368:	ff ff       	.word	0xffff	; ????
     36a:	ff ff       	.word	0xffff	; ????
     36c:	e0 83       	st	Z, r30
     36e:	ff ff       	.word	0xffff	; ????
     370:	ff ff       	.word	0xffff	; ????
     372:	ff 7f       	andi	r31, 0xFF	; 255
     374:	1f 0f       	add	r17, r31
     376:	03 00       	.word	0x0003	; ????
	...
     380:	01 ff       	sbrs	r16, 1
     382:	ff ff       	.word	0xffff	; ????
     384:	ff ff       	.word	0xffff	; ????
     386:	ff 3f       	cpi	r31, 0xFF	; 255
     388:	0f 01       	movw	r0, r30
	...
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	02 07       	cpc	r16, r18
     3e0:	07 0f       	add	r16, r23
     3e2:	0f 0f       	add	r16, r31
     3e4:	1f 1f       	adc	r17, r31
     3e6:	3f 7f       	andi	r19, 0xFF	; 255
     3e8:	7f ff       	.word	0xff7f	; ????
     3ea:	ff ff       	.word	0xffff	; ????
     3ec:	ff ff       	.word	0xffff	; ????
     3ee:	ff ff       	.word	0xffff	; ????
     3f0:	1f 07       	cpc	r17, r31
     3f2:	01 00       	.word	0x0001	; ????
	...
     3fc:	00 00       	nop
     3fe:	c0 60       	ori	r28, 0x00	; 0
     400:	3c 1f       	adc	r19, r28
     402:	1f 0f       	add	r17, r31
     404:	07 03       	mulsu	r16, r23
     406:	01 00       	.word	0x0001	; ????
	...
     468:	00 00       	nop
     46a:	00 01       	movw	r0, r0
     46c:	01 01       	movw	r0, r2
     46e:	03 03       	mulsu	r16, r19
	...
     47c:	00 01       	movw	r0, r0
	...

00000494 <font8>:
	...
     49c:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     4ac:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     4bc:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     4cc:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     4dc:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     4ec:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     4fc:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     50c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     51c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     52c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     53c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     54c:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     55c:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     56c:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     57c:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     58c:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     59c:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     5ac:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     5bc:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     5cc:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     5dc:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     5ec:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     5fc:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     60c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     61c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     62c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     63c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     64c:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     65c:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     66c:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     67c:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     68c:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     69c:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     6ac:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     6bc:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     6cc:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     6dc:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     6ec:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     6fc:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     70c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     71c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     72c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     73c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     74c:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     75c:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     76c:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     77c:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

0000078c <__ctors_end>:
     78c:	11 24       	eor	r1, r1
     78e:	1f be       	out	0x3f, r1	; 63
     790:	cf ef       	ldi	r28, 0xFF	; 255
     792:	d4 e0       	ldi	r29, 0x04	; 4
     794:	de bf       	out	0x3e, r29	; 62
     796:	cd bf       	out	0x3d, r28	; 61

00000798 <__do_copy_data>:
     798:	13 e0       	ldi	r17, 0x03	; 3
     79a:	a0 e0       	ldi	r26, 0x00	; 0
     79c:	b1 e0       	ldi	r27, 0x01	; 1
     79e:	ec ef       	ldi	r30, 0xFC	; 252
     7a0:	f1 e2       	ldi	r31, 0x21	; 33
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <__do_copy_data+0x10>
     7a4:	05 90       	lpm	r0, Z+
     7a6:	0d 92       	st	X+, r0
     7a8:	a6 37       	cpi	r26, 0x76	; 118
     7aa:	b1 07       	cpc	r27, r17
     7ac:	d9 f7       	brne	.-10     	; 0x7a4 <__do_copy_data+0xc>

000007ae <__do_clear_bss>:
     7ae:	23 e0       	ldi	r18, 0x03	; 3
     7b0:	a6 e7       	ldi	r26, 0x76	; 118
     7b2:	b3 e0       	ldi	r27, 0x03	; 3
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <.do_clear_bss_start>

000007b6 <.do_clear_bss_loop>:
     7b6:	1d 92       	st	X+, r1

000007b8 <.do_clear_bss_start>:
     7b8:	af 3a       	cpi	r26, 0xAF	; 175
     7ba:	b2 07       	cpc	r27, r18
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <.do_clear_bss_loop>
     7be:	0e 94 12 04 	call	0x824	; 0x824 <main>
     7c2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_exit>

000007c6 <__bad_interrupt>:
     7c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007ca <can_check_message>:
#include "sources/include/usart.h"
#include "sources/include/timer.h"
#include "sources/include/can.h"
#include "sources/include/game.h"

void can_check_message(void){
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	2a 97       	sbiw	r28, 0x0a	; 10
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
	can_data_t recived_data;
	recived_data.id = 0;
     7de:	19 82       	std	Y+1, r1	; 0x01
	Can_Recieve_Msg(&recived_data);
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 02 05 	call	0xa04	; 0xa04 <Can_Recieve_Msg>
	
	switch(recived_data.id){
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	80 31       	cpi	r24, 0x10	; 16
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <can_check_message+0x2a>
     7ee:	81 31       	cpi	r24, 0x11	; 17
     7f0:	49 f0       	breq	.+18     	; 0x804 <can_check_message+0x3a>
     7f2:	0f c0       	rjmp	.+30     	; 0x812 <can_check_message+0x48>
		case (14):
			break;
		case (15):
			break;
		case (16):// game over
			if (Get_Game_State() == IN_GAME)
     7f4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Get_Game_State>
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	59 f4       	brne	.+22     	; 0x812 <can_check_message+0x48>
			{
				Set_Gamestate(SAVE_SCORE);
     7fc:	87 e0       	ldi	r24, 0x07	; 7
     7fe:	0e 94 8a 06 	call	0xd14	; 0xd14 <Set_Gamestate>
     802:	07 c0       	rjmp	.+14     	; 0x812 <can_check_message+0x48>
			}
			break;
		case (17): // wait for calibrate to finish
			if (Get_Game_State() == CALIBRATE_WAIT)
     804:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Get_Game_State>
     808:	86 30       	cpi	r24, 0x06	; 6
     80a:	19 f4       	brne	.+6      	; 0x812 <can_check_message+0x48>
			{					
				Set_Gamestate(IN_MENU);				
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	0e 94 8a 06 	call	0xd14	; 0xd14 <Set_Gamestate>
			break;
		default:
			break;
		
	}
}
     812:	2a 96       	adiw	r28, 0x0a	; 10
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <main>:

int main(void)
{
	cli();
     824:	f8 94       	cli
	USART_Init(MYUBRR);
     826:	8f e1       	ldi	r24, 0x1F	; 31
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 57 08 	call	0x10ae	; 0x10ae <USART_Init>
	printf("\n\n\rstart of program\n\r");
     82e:	8a ea       	ldi	r24, 0xAA	; 170
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
	DDRD |=(1<<PIND5);
     83a:	8d 9a       	sbi	0x11, 5	; 17
	
    Timer_Init();
     83c:	0e 94 18 08 	call	0x1030	; 0x1030 <Timer_Init>
	Timer_3_off();
     840:	0e 94 46 08 	call	0x108c	; 0x108c <Timer_3_off>
	
	User_Control_Init();
     844:	0e 94 14 09 	call	0x1228	; 0x1228 <User_Control_Init>
    Can_Init();
     848:	0e 94 a4 04 	call	0x948	; 0x948 <Can_Init>
	
	printf("\n\rwaiting on node 1\n\r");
     84c:	80 ec       	ldi	r24, 0xC0	; 192
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
	
	Node_One_Init();
     858:	0e 94 a5 0b 	call	0x174a	; 0x174a <Node_One_Init>

	Oled_Menu_Setup();
     85c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Oled_Menu_Setup>
	
	sei();
     860:	78 94       	sei
	Timer_3_on();
     862:	0e 94 3d 08 	call	0x107a	; 0x107a <Timer_3_on>
	printf("\n\rinit done\n\r");
     866:	86 ed       	ldi	r24, 0xD6	; 214
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0

    while (1)
    {
		can_check_message();
     87e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <can_check_message>
		Oled_Update();
     882:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Oled_Update>
		Game_Machine();
     886:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Game_Machine>
		Menu_Functionality();
     88a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Menu_Functionality>
     88e:	f7 cf       	rjmp	.-18     	; 0x87e <main+0x5a>

00000890 <__vector_17>:
    }
}



ISR(TIMER0_OVF_vect){
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	2f 93       	push	r18
     89c:	3f 93       	push	r19
     89e:	4f 93       	push	r20
     8a0:	5f 93       	push	r21
     8a2:	6f 93       	push	r22
     8a4:	7f 93       	push	r23
     8a6:	8f 93       	push	r24
     8a8:	9f 93       	push	r25
     8aa:	af 93       	push	r26
     8ac:	bf 93       	push	r27
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
	printf("timer 0 test ");
     8b2:	84 ee       	ldi	r24, 0xE4	; 228
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	9f 93       	push	r25
     8b8:	8f 93       	push	r24
     8ba:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
}
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	bf 91       	pop	r27
     8c8:	af 91       	pop	r26
     8ca:	9f 91       	pop	r25
     8cc:	8f 91       	pop	r24
     8ce:	7f 91       	pop	r23
     8d0:	6f 91       	pop	r22
     8d2:	5f 91       	pop	r21
     8d4:	4f 91       	pop	r20
     8d6:	3f 91       	pop	r19
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <__vector_7>:

uint8_t program_counter = 0;

ISR(TIMER3_COMPA_vect){
     8e4:	1f 92       	push	r1
     8e6:	0f 92       	push	r0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	0f 92       	push	r0
     8ec:	11 24       	eor	r1, r1
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <Adc_Init>:
#include <avr/io.h>



void Adc_Init(){
	DDRE &= ~(1<<PINE0);
     8f8:	30 98       	cbi	0x06, 0	; 6
     8fa:	08 95       	ret

000008fc <Adc_Read>:
}

uint8_t Adc_Read(uint8_t channel){
	volatile char *ext_adc = (char *) ADC_MEM_START;

	if (channel > 3){return -1;}
     8fc:	84 30       	cpi	r24, 0x04	; 4
     8fe:	40 f4       	brcc	.+16     	; 0x910 <Adc_Read+0x14>

	//check if it works right!
	*ext_adc = 0x04|channel;
     900:	84 60       	ori	r24, 0x04	; 4
     902:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1051>

	while (TEST_BIT(PINE, PINE0));
     906:	28 99       	sbic	0x05, 0	; 5
     908:	fe cf       	rjmp	.-4      	; 0x906 <Adc_Read+0xa>

	return *ext_adc;
     90a:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1051>
     90e:	08 95       	ret
}

uint8_t Adc_Read(uint8_t channel){
	volatile char *ext_adc = (char *) ADC_MEM_START;

	if (channel > 3){return -1;}
     910:	8f ef       	ldi	r24, 0xFF	; 255
	*ext_adc = 0x04|channel;

	while (TEST_BIT(PINE, PINE0));

	return *ext_adc;
     912:	08 95       	ret

00000914 <Lunde_Byte>:

	for (i=0; i<5; i++)
	{
		OledCharacter[i] = pgm_read_byte(&(font5[t][i]));
	}
}
     914:	8c 56       	subi	r24, 0x6C	; 108
     916:	9f 4f       	sbci	r25, 0xFF	; 255
     918:	fc 01       	movw	r30, r24
     91a:	84 91       	lpm	r24, Z
     91c:	08 95       	ret

0000091e <Ascii_to_Bitmap_Font8>:

void Ascii_to_Bitmap_Font8(char* OledCharacter, char AsciiCharacter){
     91e:	e6 2f       	mov	r30, r22
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	ec 56       	subi	r30, 0x6C	; 108
     930:	fc 4f       	sbci	r31, 0xFC	; 252
     932:	dc 01       	movw	r26, r24
     934:	9c 01       	movw	r18, r24
     936:	28 5f       	subi	r18, 0xF8	; 248
     938:	3f 4f       	sbci	r19, 0xFF	; 255
	int t;
	t = (int)AsciiCharacter-32;

	for (i=0; i<8; i++)
	{
		OledCharacter[i] = pgm_read_byte(&(font8[t][i]));
     93a:	94 91       	lpm	r25, Z
     93c:	9d 93       	st	X+, r25
     93e:	31 96       	adiw	r30, 0x01	; 1

	int i;
	int t;
	t = (int)AsciiCharacter-32;

	for (i=0; i<8; i++)
     940:	a2 17       	cp	r26, r18
     942:	b3 07       	cpc	r27, r19
     944:	d1 f7       	brne	.-12     	; 0x93a <Ascii_to_Bitmap_Font8+0x1c>
	{
		OledCharacter[i] = pgm_read_byte(&(font8[t][i]));
	}
}
     946:	08 95       	ret

00000948 <Can_Init>:
#include "include/MCP2515.h"
#include <avr/io.h>
#include <stdio.h>

void Can_Init(void){
	Spi_Init();
     948:	0e 94 02 08 	call	0x1004	; 0x1004 <Spi_Init>
	Mcp_Reset();
     94c:	0e 94 c0 06 	call	0xd80	; 0xd80 <Mcp_Reset>
	Mcp_Modify_Bit(MCP_CANCTRL,0xff,MODE_CONFIG);
     950:	40 e8       	ldi	r20, 0x80	; 128
     952:	6f ef       	ldi	r22, 0xFF	; 255
     954:	8f e0       	ldi	r24, 0x0F	; 15
     956:	0e 94 c8 06 	call	0xd90	; 0xd90 <Mcp_Modify_Bit>

	Mcp_Modify_Bit(MCP_RXB0CTRL,0x60,0xff);
     95a:	4f ef       	ldi	r20, 0xFF	; 255
     95c:	60 e6       	ldi	r22, 0x60	; 96
     95e:	80 e6       	ldi	r24, 0x60	; 96
     960:	0e 94 c8 06 	call	0xd90	; 0xd90 <Mcp_Modify_Bit>

	Mcp_Modify_Bit(MCP_CANINTE,0x01,0x01);
     964:	41 e0       	ldi	r20, 0x01	; 1
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	8b e2       	ldi	r24, 0x2B	; 43
     96a:	0e 94 c8 06 	call	0xd90	; 0xd90 <Mcp_Modify_Bit>
	Mcp_Modify_Bit(MCP_CANCTRL, MODE_MASK,MODE_NORMAL);
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	60 ee       	ldi	r22, 0xE0	; 224
     972:	8f e0       	ldi	r24, 0x0F	; 15
     974:	0e 94 c8 06 	call	0xd90	; 0xd90 <Mcp_Modify_Bit>

	DDRD &= ~(1<<PD2);
     978:	8a 98       	cbi	0x11, 2	; 17

	GICR |= (1 << INT0);
     97a:	8b b7       	in	r24, 0x3b	; 59
     97c:	80 64       	ori	r24, 0x40	; 64
     97e:	8b bf       	out	0x3b, r24	; 59
     980:	08 95       	ret

00000982 <Can_Send_Msg>:
}

void Can_Send_Msg(can_data_t* data){
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	8c 01       	movw	r16, r24
	Mcp_Write(MCP_TXB0SIDH,data->id / 0b1000);
     98a:	fc 01       	movw	r30, r24
     98c:	60 81       	ld	r22, Z
     98e:	66 95       	lsr	r22
     990:	66 95       	lsr	r22
     992:	66 95       	lsr	r22
     994:	81 e3       	ldi	r24, 0x31	; 49
     996:	0e 94 ac 06 	call	0xd58	; 0xd58 <Mcp_Write>
	Mcp_Write(MCP_TXB0SIDL,(data->id % 0b1000) << 5);
     99a:	f8 01       	movw	r30, r16
     99c:	60 81       	ld	r22, Z
     99e:	f0 e2       	ldi	r31, 0x20	; 32
     9a0:	6f 9f       	mul	r22, r31
     9a2:	b0 01       	movw	r22, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	82 e3       	ldi	r24, 0x32	; 50
     9a8:	0e 94 ac 06 	call	0xd58	; 0xd58 <Mcp_Write>
	Mcp_Write(MCP_TXB0DLC,data->length);
     9ac:	f8 01       	movw	r30, r16
     9ae:	61 81       	ldd	r22, Z+1	; 0x01
     9b0:	85 e3       	ldi	r24, 0x35	; 53
     9b2:	0e 94 ac 06 	call	0xd58	; 0xd58 <Mcp_Write>
	printf("SENDT VALID MESSAGE id: %u\n\r", data->id);
     9b6:	f8 01       	movw	r30, r16
     9b8:	80 81       	ld	r24, Z
     9ba:	1f 92       	push	r1
     9bc:	8f 93       	push	r24
     9be:	82 ef       	ldi	r24, 0xF2	; 242
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
	for (uint8_t i = 0; i < data->length; i++)
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	f8 01       	movw	r30, r16
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
     9d6:	88 23       	and	r24, r24
     9d8:	71 f0       	breq	.+28     	; 0x9f6 <Can_Send_Msg+0x74>
     9da:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Mcp_Write(MCP_TXB0D0+i,data->data[i]);
     9dc:	f8 01       	movw	r30, r16
     9de:	ec 0f       	add	r30, r28
     9e0:	f1 1d       	adc	r31, r1
     9e2:	62 81       	ldd	r22, Z+2	; 0x02
     9e4:	86 e3       	ldi	r24, 0x36	; 54
     9e6:	8c 0f       	add	r24, r28
     9e8:	0e 94 ac 06 	call	0xd58	; 0xd58 <Mcp_Write>
void Can_Send_Msg(can_data_t* data){
	Mcp_Write(MCP_TXB0SIDH,data->id / 0b1000);
	Mcp_Write(MCP_TXB0SIDL,(data->id % 0b1000) << 5);
	Mcp_Write(MCP_TXB0DLC,data->length);
	printf("SENDT VALID MESSAGE id: %u\n\r", data->id);
	for (uint8_t i = 0; i < data->length; i++)
     9ec:	cf 5f       	subi	r28, 0xFF	; 255
     9ee:	f8 01       	movw	r30, r16
     9f0:	81 81       	ldd	r24, Z+1	; 0x01
     9f2:	c8 17       	cp	r28, r24
     9f4:	98 f3       	brcs	.-26     	; 0x9dc <Can_Send_Msg+0x5a>
	{
		Mcp_Write(MCP_TXB0D0+i,data->data[i]);
	}
	
	Mcp_Request_to_Send(0); //1
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Mcp_Request_to_Send>
}
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <Can_Recieve_Msg>:

void Can_Recieve_Msg(can_data_t* data){
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	8c 01       	movw	r16, r24

	if (Mcp_Read(MCP_CANINTF) & 0x01){
     a0c:	8c e2       	ldi	r24, 0x2C	; 44
     a0e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Mcp_Read>
     a12:	80 ff       	sbrs	r24, 0
     a14:	37 c0       	rjmp	.+110    	; 0xa84 <Can_Recieve_Msg+0x80>
		
		uint8_t idhigh = Mcp_Read(MCP_RXB0SIDH);
     a16:	81 e6       	ldi	r24, 0x61	; 97
     a18:	0e 94 9a 06 	call	0xd34	; 0xd34 <Mcp_Read>
     a1c:	c8 2f       	mov	r28, r24
		uint8_t idlow = Mcp_Read(MCP_RXB0SIDL);
     a1e:	82 e6       	ldi	r24, 0x62	; 98
     a20:	0e 94 9a 06 	call	0xd34	; 0xd34 <Mcp_Read>
		data->id = (idhigh << 3)|(idlow >> 5);
     a24:	cc 0f       	add	r28, r28
     a26:	cc 0f       	add	r28, r28
     a28:	cc 0f       	add	r28, r28
     a2a:	82 95       	swap	r24
     a2c:	86 95       	lsr	r24
     a2e:	87 70       	andi	r24, 0x07	; 7
     a30:	8c 2b       	or	r24, r28
     a32:	f8 01       	movw	r30, r16
     a34:	80 83       	st	Z, r24
		printf("VALID MESSAGE recieved with id: %u\n\r", data->id);
     a36:	1f 92       	push	r1
     a38:	8f 93       	push	r24
     a3a:	8f e0       	ldi	r24, 0x0F	; 15
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
		data->length = Mcp_Read(MCP_RXB0DLC) & 0x0f;
     a46:	85 e6       	ldi	r24, 0x65	; 101
     a48:	0e 94 9a 06 	call	0xd34	; 0xd34 <Mcp_Read>
     a4c:	8f 70       	andi	r24, 0x0F	; 15
     a4e:	f8 01       	movw	r30, r16
     a50:	81 83       	std	Z+1, r24	; 0x01

		for (uint8_t i = 0; i < data->length; i++)
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	88 23       	and	r24, r24
     a5c:	71 f0       	breq	.+28     	; 0xa7a <Can_Recieve_Msg+0x76>
     a5e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			data->data[i] = Mcp_Read(MCP_RXB0D0+i);
     a60:	86 e6       	ldi	r24, 0x66	; 102
     a62:	8c 0f       	add	r24, r28
     a64:	0e 94 9a 06 	call	0xd34	; 0xd34 <Mcp_Read>
     a68:	f8 01       	movw	r30, r16
     a6a:	ec 0f       	add	r30, r28
     a6c:	f1 1d       	adc	r31, r1
     a6e:	82 83       	std	Z+2, r24	; 0x02
		uint8_t idlow = Mcp_Read(MCP_RXB0SIDL);
		data->id = (idhigh << 3)|(idlow >> 5);
		printf("VALID MESSAGE recieved with id: %u\n\r", data->id);
		data->length = Mcp_Read(MCP_RXB0DLC) & 0x0f;

		for (uint8_t i = 0; i < data->length; i++)
     a70:	cf 5f       	subi	r28, 0xFF	; 255
     a72:	f8 01       	movw	r30, r16
     a74:	81 81       	ldd	r24, Z+1	; 0x01
     a76:	c8 17       	cp	r28, r24
     a78:	98 f3       	brcs	.-26     	; 0xa60 <Can_Recieve_Msg+0x5c>
		{
			data->data[i] = Mcp_Read(MCP_RXB0D0+i);
		}
		Mcp_Modify_Bit(MCP_CANINTF, 0b01, 0);
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	8c e2       	ldi	r24, 0x2C	; 44
     a80:	0e 94 c8 06 	call	0xd90	; 0xd90 <Mcp_Modify_Bit>
	}
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <Ext_Mem_Init>:
#include <avr/io.h>
#include "include/settings.h"
#include "include/ext_mem.h"

void Ext_Mem_Init(){
	MCUCR |= (1<< SRE);
     a8c:	85 b7       	in	r24, 0x35	; 53
     a8e:	80 68       	ori	r24, 0x80	; 128
     a90:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
     a92:	80 b7       	in	r24, 0x30	; 48
     a94:	80 62       	ori	r24, 0x20	; 32
     a96:	80 bf       	out	0x30, r24	; 48
     a98:	08 95       	ret

00000a9a <Game_Machine>:
//////////////////////////////////////////////////////////////////////////


// main state machine for the game

void Game_Machine(void){
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	a8 97       	sbiw	r28, 0x28	; 40
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	uint16_t temp = 0;
	char *c_temp1 ;
	char *c_temp2 ; 
	uint16_t temp2 = 0;
	uint8_t check = 0;
	start_game.id = 2;
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <start_game>
	switch(game_state){
     ac0:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <game_state>
     ac4:	8e 2f       	mov	r24, r30
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	88 30       	cpi	r24, 0x08	; 8
     aca:	91 05       	cpc	r25, r1
     acc:	08 f0       	brcs	.+2      	; 0xad0 <Game_Machine+0x36>
     ace:	13 c1       	rjmp	.+550    	; 0xcf6 <Game_Machine+0x25c>
     ad0:	fc 01       	movw	r30, r24
     ad2:	e8 5c       	subi	r30, 0xC8	; 200
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__tablejump2__>
     ada:	ee e7       	ldi	r30, 0x7E	; 126
     adc:	f3 e0       	ldi	r31, 0x03	; 3
     ade:	22 e9       	ldi	r18, 0x92	; 146
     ae0:	33 e0       	ldi	r19, 0x03	; 3
		case INITIAL:

			for(uint8_t i = 0; i<5; i++){
				list_highscore[i].score = 0;
				list_highscore[i].name = "   ";	
     ae2:	84 e3       	ldi	r24, 0x34	; 52
     ae4:	92 e0       	ldi	r25, 0x02	; 2
	start_game.id = 2;
	switch(game_state){
		case INITIAL:

			for(uint8_t i = 0; i<5; i++){
				list_highscore[i].score = 0;
     ae6:	13 82       	std	Z+3, r1	; 0x03
     ae8:	12 82       	std	Z+2, r1	; 0x02
				list_highscore[i].name = "   ";	
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24
     aee:	34 96       	adiw	r30, 0x04	; 4
	uint8_t check = 0;
	start_game.id = 2;
	switch(game_state){
		case INITIAL:

			for(uint8_t i = 0; i<5; i++){
     af0:	2e 17       	cp	r18, r30
     af2:	3f 07       	cpc	r19, r31
     af4:	c1 f7       	brne	.-16     	; 0xae6 <Game_Machine+0x4c>
				list_highscore[i].score = 0;
				list_highscore[i].name = "   ";	
			}

			game_state = IN_MENU;
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
			
			break;
     afc:	fc c0       	rjmp	.+504    	; 0xcf6 <Game_Machine+0x25c>
			
		case START_GAME: // init the single game
			
			score = 0;
     afe:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <score+0x1>
     b02:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <score>
			Menu_Line_Change("GAME STARTS IN:",0,0);
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	88 e3       	ldi	r24, 0x38	; 56
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
     b12:	03 e0       	ldi	r16, 0x03	; 3
     b14:	10 e0       	ldi	r17, 0x00	; 0
			char countdown[2];
			for(uint8_t i = 0; i <3; i++){
				sprintf(countdown,"%u",3-i);
     b16:	0f 2e       	mov	r0, r31
     b18:	f4 e5       	ldi	r31, 0x54	; 84
     b1a:	cf 2e       	mov	r12, r31
     b1c:	f2 e0       	ldi	r31, 0x02	; 2
     b1e:	df 2e       	mov	r13, r31
     b20:	f0 2d       	mov	r31, r0
     b22:	7e 01       	movw	r14, r28
     b24:	2b e0       	ldi	r18, 0x0B	; 11
     b26:	e2 0e       	add	r14, r18
     b28:	f1 1c       	adc	r15, r1
     b2a:	1f 93       	push	r17
     b2c:	0f 93       	push	r16
     b2e:	df 92       	push	r13
     b30:	cf 92       	push	r12
     b32:	ff 92       	push	r15
     b34:	ef 92       	push	r14
     b36:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
				Menu_Line_Change(countdown,3,0);
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	63 e0       	ldi	r22, 0x03	; 3
     b3e:	c7 01       	movw	r24, r14
     b40:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
				Oled_Update();
     b44:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Oled_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b48:	3f ef       	ldi	r19, 0xFF	; 255
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	9e e0       	ldi	r25, 0x0E	; 14
     b4e:	31 50       	subi	r19, 0x01	; 1
     b50:	80 40       	sbci	r24, 0x00	; 0
     b52:	90 40       	sbci	r25, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <Game_Machine+0xb4>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <Game_Machine+0xbe>
     b58:	00 00       	nop
     b5a:	01 50       	subi	r16, 0x01	; 1
     b5c:	11 09       	sbc	r17, r1
		case START_GAME: // init the single game
			
			score = 0;
			Menu_Line_Change("GAME STARTS IN:",0,0);
			char countdown[2];
			for(uint8_t i = 0; i <3; i++){
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	f9 f6       	brne	.-66     	; 0xb2a <Game_Machine+0x90>
				sprintf(countdown,"%u",3-i);
				Menu_Line_Change(countdown,3,0);
				Oled_Update();
				_delay_ms(1000);
			}
			Oled_Reset(); 
     b6c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
			Can_Send_Msg(&start_game);
     b70:	82 e9       	ldi	r24, 0x92	; 146
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 c1 04 	call	0x982	; 0x982 <Can_Send_Msg>
			game_state = IN_GAME;
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
			break;
     b7e:	bb c0       	rjmp	.+374    	; 0xcf6 <Game_Machine+0x25c>
			
		case IN_GAME:
			Slider_Send_Pos();
     b80:	0e 94 9c 09 	call	0x1338	; 0x1338 <Slider_Send_Pos>
			char your_score[15];
			char highest_score[15];
			sprintf(your_score,"YOUR SCORE: %u",score);
     b84:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <score+0x1>
     b88:	8f 93       	push	r24
     b8a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <score>
     b8e:	8f 93       	push	r24
     b90:	88 e4       	ldi	r24, 0x48	; 72
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	8e 01       	movw	r16, r28
     b9a:	06 5e       	subi	r16, 0xE6	; 230
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	1f 93       	push	r17
     ba0:	0f 93       	push	r16
     ba2:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
			Menu_Line_Change(your_score,1,0);
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	c8 01       	movw	r24, r16
     bac:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
			sprintf(highest_score,"%c%c%c: %u",list_highscore[0].name[0],list_highscore[0].name[1],list_highscore[0].name[2],list_highscore[0].score);
     bb0:	ae e7       	ldi	r26, 0x7E	; 126
     bb2:	b3 e0       	ldi	r27, 0x03	; 3
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	11 97       	sbiw	r26, 0x01	; 1
     bba:	13 96       	adiw	r26, 0x03	; 3
     bbc:	8c 91       	ld	r24, X
     bbe:	13 97       	sbiw	r26, 0x03	; 3
     bc0:	8f 93       	push	r24
     bc2:	12 96       	adiw	r26, 0x02	; 2
     bc4:	8c 91       	ld	r24, X
     bc6:	8f 93       	push	r24
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	1f 92       	push	r1
     bcc:	8f 93       	push	r24
     bce:	81 81       	ldd	r24, Z+1	; 0x01
     bd0:	1f 92       	push	r1
     bd2:	8f 93       	push	r24
     bd4:	80 81       	ld	r24, Z
     bd6:	1f 92       	push	r1
     bd8:	8f 93       	push	r24
     bda:	87 e5       	ldi	r24, 0x57	; 87
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	0f 50       	subi	r16, 0x0F	; 15
     be4:	11 09       	sbc	r17, r1
     be6:	1f 93       	push	r17
     be8:	0f 93       	push	r16
     bea:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
			Menu_Line_Change("HIGHEST SCORE:",4,0);
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	64 e0       	ldi	r22, 0x04	; 4
     bf2:	82 e6       	ldi	r24, 0x62	; 98
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
			Menu_Line_Change(highest_score,5,0);
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	65 e0       	ldi	r22, 0x05	; 5
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
			
			counter ++;
     c04:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <__data_end>
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <__data_end>
			if(counter > 20){
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	85 31       	cpi	r24, 0x15	; 21
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <Game_Machine+0x184>
     c1c:	6c c0       	rjmp	.+216    	; 0xcf6 <Game_Machine+0x25c>
				score ++;
     c1e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <score>
     c22:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <score+0x1>
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <score+0x1>
     c2c:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <score>
				counter = 0;
     c30:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <__data_end>
     c34:	60 c0       	rjmp	.+192    	; 0xcf6 <Game_Machine+0x25c>
			}
			break;
			
		case IN_MENU:
			Menu_Navigation();
     c36:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Menu_Navigation>
			Update_Menu();
     c3a:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
			break;
     c3e:	5b c0       	rjmp	.+182    	; 0xcf6 <Game_Machine+0x25c>
		
		case SAVE_SCORE:
			create_name(name,3);
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	8c e9       	ldi	r24, 0x9C	; 156
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 57 0a 	call	0x14ae	; 0x14ae <create_name>
			game_state = END_GAME;
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
			break;
     c50:	52 c0       	rjmp	.+164    	; 0xcf6 <Game_Machine+0x25c>
					list_highscore[i].name = c_temp1;
					temp = temp2;
					c_temp1 = c_temp2;
					
				}
				else if (score > list_highscore[i].score && check == 0)
     c52:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <score>
     c56:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <score+0x1>
     c5a:	ee e7       	ldi	r30, 0x7E	; 126
     c5c:	f3 e0       	ldi	r31, 0x03	; 3
     c5e:	42 e9       	ldi	r20, 0x92	; 146
     c60:	53 e0       	ldi	r21, 0x03	; 3
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	10 e0       	ldi	r17, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
				{	
					temp = list_highscore[i].score;
					c_temp1 = list_highscore[i].name;
					list_highscore[i].score = score;
					list_highscore[i].name = name;
     c68:	0f 2e       	mov	r0, r31
     c6a:	fc e9       	ldi	r31, 0x9C	; 156
     c6c:	cf 2e       	mov	r12, r31
     c6e:	f3 e0       	ldi	r31, 0x03	; 3
     c70:	df 2e       	mov	r13, r31
     c72:	f0 2d       	mov	r31, r0
					check = 1;
     c74:	ee 24       	eor	r14, r14
     c76:	e3 94       	inc	r14
			
		case (END_GAME): 

			for (uint8_t i = 0; i<5; i++)
			{
				if(check == 1)
     c78:	21 30       	cpi	r18, 0x01	; 1
     c7a:	69 f4       	brne	.+26     	; 0xc96 <Game_Machine+0x1fc>
				{	
					temp2 = list_highscore[i].score;
     c7c:	92 81       	ldd	r25, Z+2	; 0x02
     c7e:	83 81       	ldd	r24, Z+3	; 0x03
					c_temp2 = list_highscore[i].name;
     c80:	b0 81       	ld	r27, Z
     c82:	a1 81       	ldd	r26, Z+1	; 0x01
					list_highscore[i].score = temp;
     c84:	12 83       	std	Z+2, r17	; 0x02
     c86:	33 83       	std	Z+3, r19	; 0x03
					list_highscore[i].name = c_temp1;
     c88:	00 83       	st	Z, r16
     c8a:	f1 82       	std	Z+1, r15	; 0x01
					temp = temp2;
					c_temp1 = c_temp2;
     c8c:	0b 2f       	mov	r16, r27
     c8e:	fa 2e       	mov	r15, r26
				{	
					temp2 = list_highscore[i].score;
					c_temp2 = list_highscore[i].name;
					list_highscore[i].score = temp;
					list_highscore[i].name = c_temp1;
					temp = temp2;
     c90:	19 2f       	mov	r17, r25
     c92:	38 2f       	mov	r19, r24
     c94:	10 c0       	rjmp	.+32     	; 0xcb6 <Game_Machine+0x21c>
					c_temp1 = c_temp2;
					
				}
				else if (score > list_highscore[i].score && check == 0)
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	86 17       	cp	r24, r22
     c9c:	97 07       	cpc	r25, r23
     c9e:	58 f4       	brcc	.+22     	; 0xcb6 <Game_Machine+0x21c>
     ca0:	21 11       	cpse	r18, r1
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <Game_Machine+0x21c>
				{	
					temp = list_highscore[i].score;
					c_temp1 = list_highscore[i].name;
     ca4:	00 81       	ld	r16, Z
     ca6:	f1 80       	ldd	r15, Z+1	; 0x01
					list_highscore[i].score = score;
     ca8:	73 83       	std	Z+3, r23	; 0x03
     caa:	62 83       	std	Z+2, r22	; 0x02
					list_highscore[i].name = name;
     cac:	d1 82       	std	Z+1, r13	; 0x01
     cae:	c0 82       	st	Z, r12
					c_temp1 = c_temp2;
					
				}
				else if (score > list_highscore[i].score && check == 0)
				{	
					temp = list_highscore[i].score;
     cb0:	18 2f       	mov	r17, r24
     cb2:	39 2f       	mov	r19, r25
					c_temp1 = list_highscore[i].name;
					list_highscore[i].score = score;
					list_highscore[i].name = name;
					check = 1;
     cb4:	2e 2d       	mov	r18, r14
     cb6:	34 96       	adiw	r30, 0x04	; 4
			game_state = END_GAME;
			break;
			
		case (END_GAME): 

			for (uint8_t i = 0; i<5; i++)
     cb8:	4e 17       	cp	r20, r30
     cba:	5f 07       	cpc	r21, r31
     cbc:	e9 f6       	brne	.-70     	; 0xc78 <Game_Machine+0x1de>
					list_highscore[i].score = score;
					list_highscore[i].name = name;
					check = 1;
				}
			}
			score = 0;
     cbe:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <score+0x1>
     cc2:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <score>
			Move_To_Parent();
     cc6:	0e 94 34 0c 	call	0x1868	; 0x1868 <Move_To_Parent>
			game_state = IN_MENU;
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
			break;
     cd0:	12 c0       	rjmp	.+36     	; 0xcf6 <Game_Machine+0x25c>
			
		case CALIBRATE:
			
			calibrate_msg.id = 8;
     cd2:	88 e0       	ldi	r24, 0x08	; 8
     cd4:	89 83       	std	Y+1, r24	; 0x01
			calibrate_msg.data[0] = 8;
     cd6:	8b 83       	std	Y+3, r24	; 0x03
			calibrate_msg.length = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	8a 83       	std	Y+2, r24	; 0x02
			Can_Send_Msg(&calibrate_msg);
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 c1 04 	call	0x982	; 0x982 <Can_Send_Msg>
			break; 
	}
}

void Set_Gamestate(game_state_t state){
	game_state = state;
     ce4:	86 e0       	ldi	r24, 0x06	; 6
     ce6:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <Game_Machine+0x25c>
			Can_Send_Msg(&calibrate_msg);
			Set_Gamestate(CALIBRATE_WAIT);
			break;
			
		case CALIBRATE_WAIT:
			Move_To_Parent();
     cec:	0e 94 34 0c 	call	0x1868	; 0x1868 <Move_To_Parent>
			break; 
	}
}

void Set_Gamestate(game_state_t state){
	game_state = state;
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
		case CALIBRATE_WAIT:
			Move_To_Parent();
			Set_Gamestate(IN_MENU);
			break; 
	}
}
     cf6:	a8 96       	adiw	r28, 0x28	; 40
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	08 95       	ret

00000d14 <Set_Gamestate>:

void Set_Gamestate(game_state_t state){
	game_state = state;
     d14:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <game_state>
     d18:	08 95       	ret

00000d1a <Get_Game_State>:
}

game_state_t Get_Game_State(void){
	return game_state;
}
     d1a:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <game_state>
     d1e:	08 95       	ret

00000d20 <Get_Highscore>:

uint16_t Get_Highscore(uint8_t number){
	return list_highscore[number].score;
     d20:	24 e0       	ldi	r18, 0x04	; 4
     d22:	82 9f       	mul	r24, r18
     d24:	c0 01       	movw	r24, r0
     d26:	11 24       	eor	r1, r1
     d28:	fc 01       	movw	r30, r24
     d2a:	e2 58       	subi	r30, 0x82	; 130
     d2c:	fc 4f       	sbci	r31, 0xFC	; 252
}
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	08 95       	ret

00000d34 <Mcp_Read>:
#include "include/MCP2515.h"
#include "include/spi.h"
#include <avr/interrupt.h>
#include <avr/io.h>

uint8_t Mcp_Read(uint8_t addr){
     d34:	cf 93       	push	r28
     d36:	c8 2f       	mov	r28, r24
	uint8_t result;

	Slave_Enable();
     d38:	0e 94 14 08 	call	0x1028	; 0x1028 <Slave_Enable>

	Spi_Write(MCP_READ);
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Spi_Write(addr);
     d42:	8c 2f       	mov	r24, r28
     d44:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	result = Spi_Read();
     d48:	0e 94 0e 08 	call	0x101c	; 0x101c <Spi_Read>
     d4c:	c8 2f       	mov	r28, r24

	Slave_Deselect();
     d4e:	0e 94 16 08 	call	0x102c	; 0x102c <Slave_Deselect>
	return result;
}
     d52:	8c 2f       	mov	r24, r28
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <Mcp_Write>:

void Mcp_Write(uint8_t addr, uint8_t data){
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	d8 2f       	mov	r29, r24
     d5e:	c6 2f       	mov	r28, r22
	Slave_Enable();
     d60:	0e 94 14 08 	call	0x1028	; 0x1028 <Slave_Enable>
	Spi_Write(MCP_WRITE);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Spi_Write(addr);
     d6a:	8d 2f       	mov	r24, r29
     d6c:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Spi_Write(data);
     d70:	8c 2f       	mov	r24, r28
     d72:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Slave_Deselect();
     d76:	0e 94 16 08 	call	0x102c	; 0x102c <Slave_Deselect>
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <Mcp_Reset>:

void Mcp_Reset(void){
	Slave_Enable();
     d80:	0e 94 14 08 	call	0x1028	; 0x1028 <Slave_Enable>
	Spi_Write(MCP_RESET);
     d84:	80 ec       	ldi	r24, 0xC0	; 192
     d86:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Slave_Deselect();
     d8a:	0e 94 16 08 	call	0x102c	; 0x102c <Slave_Deselect>
     d8e:	08 95       	ret

00000d90 <Mcp_Modify_Bit>:
}

void Mcp_Modify_Bit(uint8_t addr, uint8_t mask, uint8_t data){
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	18 2f       	mov	r17, r24
     d98:	d6 2f       	mov	r29, r22
     d9a:	c4 2f       	mov	r28, r20
	Slave_Enable();
     d9c:	0e 94 14 08 	call	0x1028	; 0x1028 <Slave_Enable>
	Spi_Write(MCP_BITMOD);
     da0:	85 e0       	ldi	r24, 0x05	; 5
     da2:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Spi_Write(addr);
     da6:	81 2f       	mov	r24, r17
     da8:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Spi_Write(mask);
     dac:	8d 2f       	mov	r24, r29
     dae:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Spi_Write(data);
     db2:	8c 2f       	mov	r24, r28
     db4:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Slave_Deselect();
     db8:	0e 94 16 08 	call	0x102c	; 0x102c <Slave_Deselect>
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	08 95       	ret

00000dc4 <Mcp_Request_to_Send>:

void Mcp_Request_to_Send(uint8_t buffer){
     dc4:	cf 93       	push	r28
     dc6:	c8 2f       	mov	r28, r24
	Slave_Enable();
     dc8:	0e 94 14 08 	call	0x1028	; 0x1028 <Slave_Enable>
	Spi_Write(0x80 | (1<< buffer));
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <Mcp_Request_to_Send+0x12>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	ca 95       	dec	r28
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <Mcp_Request_to_Send+0xe>
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	0e 94 0a 08 	call	0x1014	; 0x1014 <Spi_Write>
	Slave_Deselect();
     de0:	0e 94 16 08 	call	0x102c	; 0x102c <Slave_Deselect>
}
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <__vector_1>:



ISR(INT0_vect){
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
}
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <Oled_Data_Write>:
	Ascii_to_Bitmap_Custom(bits,character);
	for (uint8_t i = 0; i <16 ; i++)
	{
		Oled_Data_Write(bits[i]^0xff,column*0x08+i);
	}
}
     dfc:	e0 91 00 1c 	lds	r30, 0x1C00	; 0x801c00 <__bss_end+0x1851>
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	f0 96       	adiw	r30, 0x30	; 48
     e04:	f6 95       	lsr	r31
     e06:	fe 2f       	mov	r31, r30
     e08:	ee 27       	eor	r30, r30
     e0a:	f7 95       	ror	r31
     e0c:	e7 95       	ror	r30
     e0e:	e6 0f       	add	r30, r22
     e10:	f1 1d       	adc	r31, r1
     e12:	80 83       	st	Z, r24
     e14:	08 95       	ret

00000e16 <Oled_Clear_Line>:
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	d8 2f       	mov	r29, r24
     e1c:	80 93 00 1c 	sts	0x1C00, r24	; 0x801c00 <__bss_end+0x1851>
     e20:	c0 e0       	ldi	r28, 0x00	; 0
     e22:	6c 2f       	mov	r22, r28
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Oled_Data_Write>
     e2a:	cf 5f       	subi	r28, 0xFF	; 255
     e2c:	c0 38       	cpi	r28, 0x80	; 128
     e2e:	c9 f7       	brne	.-14     	; 0xe22 <Oled_Clear_Line+0xc>
     e30:	d0 93 00 1c 	sts	0x1C00, r29	; 0x801c00 <__bss_end+0x1851>
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <Oled_Reset>:
     e3a:	cf 93       	push	r28
     e3c:	c0 e0       	ldi	r28, 0x00	; 0
     e3e:	8c 2f       	mov	r24, r28
     e40:	0e 94 0b 07 	call	0xe16	; 0xe16 <Oled_Clear_Line>
     e44:	cf 5f       	subi	r28, 0xFF	; 255
     e46:	c8 30       	cpi	r28, 0x08	; 8
     e48:	d1 f7       	brne	.-12     	; 0xe3e <Oled_Reset+0x4>
     e4a:	10 92 00 1c 	sts	0x1C00, r1	; 0x801c00 <__bss_end+0x1851>
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <Oled_Print_Char>:
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	28 97       	sbiw	r28, 0x08	; 8
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	06 2f       	mov	r16, r22
     e74:	14 2f       	mov	r17, r20
     e76:	68 2f       	mov	r22, r24
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 8f 04 	call	0x91e	; 0x91e <Ascii_to_Bitmap_Font8>
     e80:	01 30       	cpi	r16, 0x01	; 1
     e82:	b1 f4       	brne	.+44     	; 0xeb0 <Oled_Print_Char+0x5e>
     e84:	11 0f       	add	r17, r17
     e86:	11 0f       	add	r17, r17
     e88:	11 0f       	add	r17, r17
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	7c 01       	movw	r14, r24
     e90:	6e 01       	movw	r12, r28
     e92:	99 e0       	ldi	r25, 0x09	; 9
     e94:	c9 0e       	add	r12, r25
     e96:	d1 1c       	adc	r13, r1
     e98:	f7 01       	movw	r30, r14
     e9a:	81 91       	ld	r24, Z+
     e9c:	7f 01       	movw	r14, r30
     e9e:	61 2f       	mov	r22, r17
     ea0:	80 95       	com	r24
     ea2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Oled_Data_Write>
     ea6:	1f 5f       	subi	r17, 0xFF	; 255
     ea8:	ce 14       	cp	r12, r14
     eaa:	df 04       	cpc	r13, r15
     eac:	a9 f7       	brne	.-22     	; 0xe98 <Oled_Print_Char+0x46>
     eae:	14 c0       	rjmp	.+40     	; 0xed8 <Oled_Print_Char+0x86>
     eb0:	11 0f       	add	r17, r17
     eb2:	11 0f       	add	r17, r17
     eb4:	11 0f       	add	r17, r17
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	7c 01       	movw	r14, r24
     ebc:	6e 01       	movw	r12, r28
     ebe:	99 e0       	ldi	r25, 0x09	; 9
     ec0:	c9 0e       	add	r12, r25
     ec2:	d1 1c       	adc	r13, r1
     ec4:	61 2f       	mov	r22, r17
     ec6:	f7 01       	movw	r30, r14
     ec8:	81 91       	ld	r24, Z+
     eca:	7f 01       	movw	r14, r30
     ecc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Oled_Data_Write>
     ed0:	1f 5f       	subi	r17, 0xFF	; 255
     ed2:	ec 14       	cp	r14, r12
     ed4:	fd 04       	cpc	r15, r13
     ed6:	b1 f7       	brne	.-20     	; 0xec4 <Oled_Print_Char+0x72>
     ed8:	28 96       	adiw	r28, 0x08	; 8
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	08 95       	ret

00000ef6 <Print_Lunde>:

void Print_Lunde(void){
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
     efe:	e0 e0       	ldi	r30, 0x00	; 0
     f00:	f0 e1       	ldi	r31, 0x10	; 16
     f02:	81 e2       	ldi	r24, 0x21	; 33
     f04:	80 83       	st	Z, r24
     f06:	10 82       	st	Z, r1
     f08:	8f e7       	ldi	r24, 0x7F	; 127
     f0a:	80 83       	st	Z, r24
     f0c:	82 e2       	ldi	r24, 0x22	; 34
     f0e:	80 83       	st	Z, r24
     f10:	10 82       	st	Z, r1
     f12:	87 e0       	ldi	r24, 0x07	; 7
     f14:	80 83       	st	Z, r24
	Oled_Command_Write(0);
	Oled_Command_Write(0x7f);
	Oled_Command_Write(OLED_SET_PAGE_ADDR);
	Oled_Command_Write(0);
	Oled_Command_Write(0x07);
	for (uint16_t i = 0; i < 0x400; i++)
     f16:	c0 e0       	ldi	r28, 0x00	; 0
     f18:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*oled_write = Lunde_Byte(i);
     f1a:	00 e0       	ldi	r16, 0x00	; 0
     f1c:	12 e1       	ldi	r17, 0x12	; 18
     f1e:	ce 01       	movw	r24, r28
     f20:	0e 94 8a 04 	call	0x914	; 0x914 <Lunde_Byte>
     f24:	f8 01       	movw	r30, r16
     f26:	80 83       	st	Z, r24
	Oled_Command_Write(0);
	Oled_Command_Write(0x7f);
	Oled_Command_Write(OLED_SET_PAGE_ADDR);
	Oled_Command_Write(0);
	Oled_Command_Write(0x07);
	for (uint16_t i = 0; i < 0x400; i++)
     f28:	21 96       	adiw	r28, 0x01	; 1
     f2a:	c1 15       	cp	r28, r1
     f2c:	f4 e0       	ldi	r31, 0x04	; 4
     f2e:	df 07       	cpc	r29, r31
     f30:	b1 f7       	brne	.-20     	; 0xf1e <Print_Lunde+0x28>
	{
		*oled_write = Lunde_Byte(i);
	}

}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <Oled_Init>:

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
     f3c:	e0 e0       	ldi	r30, 0x00	; 0
     f3e:	f0 e1       	ldi	r31, 0x10	; 16
     f40:	8e ea       	ldi	r24, 0xAE	; 174
     f42:	80 83       	st	Z, r24
     f44:	81 ea       	ldi	r24, 0xA1	; 161
     f46:	80 83       	st	Z, r24
     f48:	8a ed       	ldi	r24, 0xDA	; 218
     f4a:	80 83       	st	Z, r24
     f4c:	82 e1       	ldi	r24, 0x12	; 18
     f4e:	80 83       	st	Z, r24
     f50:	88 ec       	ldi	r24, 0xC8	; 200
     f52:	80 83       	st	Z, r24
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	80 83       	st	Z, r24
     f58:	10 82       	st	Z, r1
     f5a:	88 ea       	ldi	r24, 0xA8	; 168
     f5c:	80 83       	st	Z, r24
     f5e:	8f e3       	ldi	r24, 0x3F	; 63
     f60:	80 83       	st	Z, r24
     f62:	85 ed       	ldi	r24, 0xD5	; 213
     f64:	80 83       	st	Z, r24
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	80 83       	st	Z, r24
     f6a:	8b ed       	ldi	r24, 0xDB	; 219
     f6c:	80 83       	st	Z, r24
     f6e:	80 e3       	ldi	r24, 0x30	; 48
     f70:	80 83       	st	Z, r24
     f72:	81 e8       	ldi	r24, 0x81	; 129
     f74:	80 83       	st	Z, r24
     f76:	80 e5       	ldi	r24, 0x50	; 80
     f78:	80 83       	st	Z, r24
     f7a:	89 ed       	ldi	r24, 0xD9	; 217
     f7c:	80 83       	st	Z, r24
     f7e:	81 e2       	ldi	r24, 0x21	; 33
     f80:	80 83       	st	Z, r24
     f82:	8d ea       	ldi	r24, 0xAD	; 173
     f84:	80 83       	st	Z, r24
     f86:	10 82       	st	Z, r1
     f88:	84 ea       	ldi	r24, 0xA4	; 164
     f8a:	80 83       	st	Z, r24
     f8c:	86 ea       	ldi	r24, 0xA6	; 166
     f8e:	80 83       	st	Z, r24
     f90:	8f ea       	ldi	r24, 0xAF	; 175
     f92:	80 83       	st	Z, r24

	Oled_Command_Write(0xa6); //set normal display

	Oled_Command_Write(0xaf); // display on

	Oled_Reset();
     f94:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
     f98:	08 95       	ret

00000f9a <Oled_Print>:
}

void Oled_Print(char* characters, uint8_t inverted){
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	fc 01       	movw	r30, r24
	int char_number = 0;

	while((characters[char_number] != '\0') && (char_number < 16))
     fa4:	80 81       	ld	r24, Z
     fa6:	88 23       	and	r24, r24
     fa8:	89 f0       	breq	.+34     	; 0xfcc <Oled_Print+0x32>
     faa:	d6 2f       	mov	r29, r22
     fac:	8f 01       	movw	r16, r30
     fae:	0f 5f       	subi	r16, 0xFF	; 255
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Oled_Print_Char(characters[char_number],inverted,char_number);
     fb4:	4c 2f       	mov	r20, r28
     fb6:	6d 2f       	mov	r22, r29
     fb8:	0e 94 29 07 	call	0xe52	; 0xe52 <Oled_Print_Char>
}

void Oled_Print(char* characters, uint8_t inverted){
	int char_number = 0;

	while((characters[char_number] != '\0') && (char_number < 16))
     fbc:	f8 01       	movw	r30, r16
     fbe:	81 91       	ld	r24, Z+
     fc0:	8f 01       	movw	r16, r30
     fc2:	88 23       	and	r24, r24
     fc4:	19 f0       	breq	.+6      	; 0xfcc <Oled_Print+0x32>
     fc6:	cf 5f       	subi	r28, 0xFF	; 255
     fc8:	c0 31       	cpi	r28, 0x10	; 16
     fca:	a1 f7       	brne	.-24     	; 0xfb4 <Oled_Print+0x1a>
	{
		Oled_Print_Char(characters[char_number],inverted,char_number);
		char_number++;
	}
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	08 95       	ret

00000fd6 <Oled_Update>:

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
     fd6:	e0 e0       	ldi	r30, 0x00	; 0
     fd8:	f0 e1       	ldi	r31, 0x10	; 16
     fda:	81 e2       	ldi	r24, 0x21	; 33
     fdc:	80 83       	st	Z, r24
     fde:	10 82       	st	Z, r1
     fe0:	8f e7       	ldi	r24, 0x7F	; 127
     fe2:	80 83       	st	Z, r24
     fe4:	82 e2       	ldi	r24, 0x22	; 34
     fe6:	80 83       	st	Z, r24
     fe8:	10 82       	st	Z, r1
     fea:	87 e0       	ldi	r24, 0x07	; 7
     fec:	80 83       	st	Z, r24
     fee:	e0 e0       	ldi	r30, 0x00	; 0
     ff0:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *sram_read = (char *) (0x1800);
	volatile char *oled_write = (char *) 0x1200;

	for (uint16_t i = 0; i < 0x400; i++)
	{
		*oled_write = sram_read[i];
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b2 e1       	ldi	r27, 0x12	; 18
     ff6:	81 91       	ld	r24, Z+
     ff8:	8c 93       	st	X, r24
	Oled_Command_Write(0x07);

	volatile char *sram_read = (char *) (0x1800);
	volatile char *oled_write = (char *) 0x1200;

	for (uint16_t i = 0; i < 0x400; i++)
     ffa:	e1 15       	cp	r30, r1
     ffc:	8c e1       	ldi	r24, 0x1C	; 28
     ffe:	f8 07       	cpc	r31, r24
    1000:	d1 f7       	brne	.-12     	; 0xff6 <Oled_Update+0x20>
	{
		*oled_write = sram_read[i];
	}
    1002:	08 95       	ret

00001004 <Spi_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "include/spi.h"

void Spi_Init(void){
	DDRB |= (1 << PINB4)|(1 << PINB5)|(1 << PINB7); // setting ss, mosi and sck as output
    1004:	87 b3       	in	r24, 0x17	; 23
    1006:	80 6b       	ori	r24, 0xB0	; 176
    1008:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB6);	// setting miso as input
    100a:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1 << SPR0); // enable SPI and selectiong master mode
    100c:	8d b1       	in	r24, 0x0d	; 13
    100e:	81 65       	ori	r24, 0x51	; 81
    1010:	8d b9       	out	0x0d, r24	; 13
    1012:	08 95       	ret

00001014 <Spi_Write>:
}

void Spi_Write(uint8_t data){
	SPDR = data;
    1014:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    1016:	77 9b       	sbis	0x0e, 7	; 14
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <Spi_Write+0x2>
}
    101a:	08 95       	ret

0000101c <Spi_Read>:

uint8_t Spi_Read(void){
	SPDR = 0xaa;
    101c:	8a ea       	ldi	r24, 0xAA	; 170
    101e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    1020:	77 9b       	sbis	0x0e, 7	; 14
    1022:	fe cf       	rjmp	.-4      	; 0x1020 <Spi_Read+0x4>
	return SPDR;
    1024:	8f b1       	in	r24, 0x0f	; 15
}
    1026:	08 95       	ret

00001028 <Slave_Enable>:

void Slave_Enable(void){
	PORTB &= ~(1 << PINB4);
    1028:	c4 98       	cbi	0x18, 4	; 24
    102a:	08 95       	ret

0000102c <Slave_Deselect>:
}

void Slave_Deselect(void){
	PORTB |= (1 << PINB4);
    102c:	c4 9a       	sbi	0x18, 4	; 24
    102e:	08 95       	ret

00001030 <Timer_Init>:
		Timer_1_off();
		_delay_ms(5);
		OCR1A = top_val;
		Timer_1_on();
	}
}
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	89 bf       	out	0x39, r24	; 57
    1034:	12 be       	out	0x32, r1	; 50
    1036:	8f b5       	in	r24, 0x2f	; 47
    1038:	83 64       	ori	r24, 0x43	; 67
    103a:	8f bd       	out	0x2f, r24	; 47
    103c:	8f b5       	in	r24, 0x2f	; 47
    103e:	8f 77       	andi	r24, 0x7F	; 127
    1040:	8f bd       	out	0x2f, r24	; 47
    1042:	8e b5       	in	r24, 0x2e	; 46
    1044:	88 61       	ori	r24, 0x18	; 24
    1046:	8e bd       	out	0x2e, r24	; 46
    1048:	eb e8       	ldi	r30, 0x8B	; 139
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8c 73       	andi	r24, 0x3C	; 60
    1050:	80 83       	st	Z, r24
    1052:	ea e8       	ldi	r30, 0x8A	; 138
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8f 7e       	andi	r24, 0xEF	; 239
    105a:	80 83       	st	Z, r24
    105c:	80 81       	ld	r24, Z
    105e:	88 60       	ori	r24, 0x08	; 8
    1060:	80 83       	st	Z, r24
    1062:	84 ef       	ldi	r24, 0xF4	; 244
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
    106a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
    106e:	ed e7       	ldi	r30, 0x7D	; 125
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 61       	ori	r24, 0x10	; 16
    1076:	80 83       	st	Z, r24
    1078:	08 95       	ret

0000107a <Timer_3_on>:

void Timer_3_on(void){
	//set timer 3 prescale to 256
	TCCR3B |= (1 << CS32);
    107a:	ea e8       	ldi	r30, 0x8A	; 138
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	84 60       	ori	r24, 0x04	; 4
    1082:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << CS31) & ~(1 << CS30);
    1084:	80 81       	ld	r24, Z
    1086:	8c 7f       	andi	r24, 0xFC	; 252
    1088:	80 83       	st	Z, r24
    108a:	08 95       	ret

0000108c <Timer_3_off>:
}

void Timer_3_off(void){
	//set timer 3 prescale to no clock
	TCCR3B &= ~(1 << CS32) & ~(1 << CS31) & ~(1 << CS30);
    108c:	ea e8       	ldi	r30, 0x8A	; 138
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	88 7f       	andi	r24, 0xF8	; 248
    1094:	80 83       	st	Z, r24
    1096:	08 95       	ret

00001098 <USART_Transmit>:
// USART driver

// USART transmit
int USART_Transmit(char data, FILE *f){
	/*Wait for empty transmit buffer*/
	while(!(UCSR0A & (1<<UDRE0)));
    1098:	5d 9b       	sbis	0x0b, 5	; 11
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <USART_Transmit>
	/* Put data into buffer, sends the data*/
	UDR0 = data;
    109c:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	08 95       	ret

000010a4 <USART_Receive>:

int USART_Receive(FILE* f){
	/* Wait for data to be received*/
	while(!(UCSR0A & (1<<RXC0)));
    10a4:	5f 9b       	sbis	0x0b, 7	; 11
    10a6:	fe cf       	rjmp	.-4      	; 0x10a4 <USART_Receive>
	/* Get and return received data from buffer*/
	return UDR0;
    10a8:	8c b1       	in	r24, 0x0c	; 12
}
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	08 95       	ret

000010ae <USART_Init>:
// USART init
int USART_Init(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr >> 8);
    10ae:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
    10b0:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter and receive interrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<< RXCIE0);
    10b2:	88 e9       	ldi	r24, 0x98	; 152
    10b4:	8a b9       	out	0x0a, r24	; 10
	/*Set frame format: 8data, 2 stop bit*/
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    10b6:	8e e8       	ldi	r24, 0x8E	; 142
    10b8:	80 bd       	out	0x20, r24	; 32

	usart = fdevopen(&USART_Transmit, &USART_Receive);
    10ba:	62 e5       	ldi	r22, 0x52	; 82
    10bc:	78 e0       	ldi	r23, 0x08	; 8
    10be:	8c e4       	ldi	r24, 0x4C	; 76
    10c0:	98 e0       	ldi	r25, 0x08	; 8
    10c2:	0e 94 6d 0c 	call	0x18da	; 0x18da <fdevopen>
    10c6:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <usart+0x1>
    10ca:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <usart>

	return 0;
}
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	08 95       	ret

000010d4 <Menu_Line_Change>:
	{
		return PINB & ( 1 << PINB1);
	}else{
		return PINB & ( 1 << PINB0);
	}
}
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	86 2f       	mov	r24, r22
    10de:	14 2f       	mov	r17, r20
    10e0:	0e 94 0b 07 	call	0xe16	; 0xe16 <Oled_Clear_Line>
    10e4:	61 2f       	mov	r22, r17
    10e6:	ce 01       	movw	r24, r28
    10e8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <Oled_Print>
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	08 95       	ret

000010f4 <Update_Menu_Parent>:
    10f4:	cf 93       	push	r28
    10f6:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <current_menu>
    10fa:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <current_menu+0x1>
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    110a:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <current_menu>
    110e:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <current_menu+0x1>
    1112:	50 96       	adiw	r26, 0x10	; 16
    1114:	8c 91       	ld	r24, X
    1116:	50 97       	sbiw	r26, 0x10	; 16
    1118:	88 23       	and	r24, r24
    111a:	b9 f1       	breq	.+110    	; 0x118a <Update_Menu_Parent+0x96>
    111c:	c1 e0       	ldi	r28, 0x01	; 1
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <Update_Menu_Parent+0x2e>
    1120:	c9 2f       	mov	r28, r25
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	8c 0f       	add	r24, r28
    1126:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <current_child_num>
    112a:	98 13       	cpse	r25, r24
    112c:	12 c0       	rjmp	.+36     	; 0x1152 <Update_Menu_Parent+0x5e>
    112e:	89 2f       	mov	r24, r25
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	fd 01       	movw	r30, r26
    113a:	e8 0f       	add	r30, r24
    113c:	f9 1f       	adc	r31, r25
    113e:	01 90       	ld	r0, Z+
    1140:	f0 81       	ld	r31, Z
    1142:	e0 2d       	mov	r30, r0
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	6c 2f       	mov	r22, r28
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    1150:	10 c0       	rjmp	.+32     	; 0x1172 <Update_Menu_Parent+0x7e>
    1152:	e8 2f       	mov	r30, r24
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	31 96       	adiw	r30, 0x01	; 1
    1158:	ee 0f       	add	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	ea 0f       	add	r30, r26
    115e:	fb 1f       	adc	r31, r27
    1160:	01 90       	ld	r0, Z+
    1162:	f0 81       	ld	r31, Z
    1164:	e0 2d       	mov	r30, r0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	6c 2f       	mov	r22, r28
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    1172:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <current_menu>
    1176:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <current_menu+0x1>
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	9c 0f       	add	r25, r28
    117e:	50 96       	adiw	r26, 0x10	; 16
    1180:	8c 91       	ld	r24, X
    1182:	50 97       	sbiw	r26, 0x10	; 16
    1184:	c8 17       	cp	r28, r24
    1186:	60 f2       	brcs	.-104    	; 0x1120 <Update_Menu_Parent+0x2c>
    1188:	01 c0       	rjmp	.+2      	; 0x118c <Update_Menu_Parent+0x98>
    118a:	c0 e0       	ldi	r28, 0x00	; 0
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	6c 0f       	add	r22, r28
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	86 e3       	ldi	r24, 0x36	; 54
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <Update_Menu>:
    119e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
    11a2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <Update_Menu_Parent>
    11a6:	08 95       	ret

000011a8 <Oled_Menu_Setup>:
    11a8:	e8 e9       	ldi	r30, 0x98	; 152
    11aa:	f1 e0       	ldi	r31, 0x01	; 1
    11ac:	f0 93 a2 03 	sts	0x03A2, r31	; 0x8003a2 <current_menu+0x1>
    11b0:	e0 93 a1 03 	sts	0x03A1, r30	; 0x8003a1 <current_menu>
    11b4:	82 81       	ldd	r24, Z+2	; 0x02
    11b6:	93 81       	ldd	r25, Z+3	; 0x03
    11b8:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <current_child+0x1>
    11bc:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <current_child>
    11c0:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    11c4:	08 95       	ret

000011c6 <Change_Child>:
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	91 f4       	brne	.+36     	; 0x11ee <Change_Child+0x28>
    11ca:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <current_child_num>
    11ce:	42 2f       	mov	r20, r18
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <current_menu>
    11d6:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <current_menu+0x1>
    11da:	80 89       	ldd	r24, Z+16	; 0x10
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	48 17       	cp	r20, r24
    11e2:	59 07       	cpc	r21, r25
    11e4:	6c f4       	brge	.+26     	; 0x1200 <Change_Child+0x3a>
    11e6:	2f 5f       	subi	r18, 0xFF	; 255
    11e8:	20 93 7d 03 	sts	0x037D, r18	; 0x80037d <current_child_num>
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <Change_Child+0x3a>
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	39 f4       	brne	.+14     	; 0x1200 <Change_Child+0x3a>
    11f2:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_child_num>
    11f6:	88 23       	and	r24, r24
    11f8:	19 f0       	breq	.+6      	; 0x1200 <Change_Child+0x3a>
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <current_child_num>
    1200:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <current_menu>
    1204:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <current_menu+0x1>
    1208:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_child_num>
    120c:	e8 2f       	mov	r30, r24
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	31 96       	adiw	r30, 0x01	; 1
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <current_child+0x1>
    1222:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <current_child>
    1226:	08 95       	ret

00001228 <User_Control_Init>:
    1228:	0e 94 46 05 	call	0xa8c	; 0xa8c <Ext_Mem_Init>
    122c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Adc_Init>
    1230:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Oled_Init>
    1234:	87 b3       	in	r24, 0x17	; 23
    1236:	87 60       	ori	r24, 0x07	; 7
    1238:	87 bb       	out	0x17, r24	; 23
    123a:	c2 9a       	sbi	0x18, 2	; 24
    123c:	08 95       	ret

0000123e <Joycon_Get>:
    123e:	cf 93       	push	r28
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Adc_Read>
    1246:	c8 2f       	mov	r28, r24
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Adc_Read>
    124e:	28 2f       	mov	r18, r24
    1250:	cc 23       	and	r28, r28
    1252:	a4 f4       	brge	.+40     	; 0x127c <Joycon_Get+0x3e>
    1254:	4c 2f       	mov	r20, r28
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	4f 57       	subi	r20, 0x7F	; 127
    125a:	51 09       	sbc	r21, r1
    125c:	84 e6       	ldi	r24, 0x64	; 100
    125e:	84 9f       	mul	r24, r20
    1260:	b0 01       	movw	r22, r0
    1262:	85 9f       	mul	r24, r21
    1264:	70 0d       	add	r23, r0
    1266:	11 24       	eor	r1, r1
    1268:	77 23       	and	r23, r23
    126a:	14 f4       	brge	.+4      	; 0x1270 <Joycon_Get+0x32>
    126c:	61 58       	subi	r22, 0x81	; 129
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	66 0f       	add	r22, r22
    1272:	67 2f       	mov	r22, r23
    1274:	66 1f       	adc	r22, r22
    1276:	77 0b       	sbc	r23, r23
    1278:	46 2f       	mov	r20, r22
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <Joycon_Get+0x64>
    127c:	cf 37       	cpi	r28, 0x7F	; 127
    127e:	80 f4       	brcc	.+32     	; 0x12a0 <Joycon_Get+0x62>
    1280:	4c 2f       	mov	r20, r28
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	4f 57       	subi	r20, 0x7F	; 127
    1286:	51 09       	sbc	r21, r1
    1288:	34 e6       	ldi	r19, 0x64	; 100
    128a:	34 9f       	mul	r19, r20
    128c:	c0 01       	movw	r24, r0
    128e:	35 9f       	mul	r19, r21
    1290:	90 0d       	add	r25, r0
    1292:	11 24       	eor	r1, r1
    1294:	6f e7       	ldi	r22, 0x7F	; 127
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	0e 94 3f 0c 	call	0x187e	; 0x187e <__divmodhi4>
    129c:	46 2f       	mov	r20, r22
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <Joycon_Get+0x64>
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	22 23       	and	r18, r18
    12a4:	9c f4       	brge	.+38     	; 0x12cc <Joycon_Get+0x8e>
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	2f 57       	subi	r18, 0x7F	; 127
    12aa:	31 09       	sbc	r19, r1
    12ac:	84 e6       	ldi	r24, 0x64	; 100
    12ae:	82 9f       	mul	r24, r18
    12b0:	b0 01       	movw	r22, r0
    12b2:	83 9f       	mul	r24, r19
    12b4:	70 0d       	add	r23, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	77 23       	and	r23, r23
    12ba:	14 f4       	brge	.+4      	; 0x12c0 <Joycon_Get+0x82>
    12bc:	61 58       	subi	r22, 0x81	; 129
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	66 0f       	add	r22, r22
    12c2:	67 2f       	mov	r22, r23
    12c4:	66 1f       	adc	r22, r22
    12c6:	77 0b       	sbc	r23, r23
    12c8:	76 2f       	mov	r23, r22
    12ca:	12 c0       	rjmp	.+36     	; 0x12f0 <Joycon_Get+0xb2>
    12cc:	2f 37       	cpi	r18, 0x7F	; 127
    12ce:	78 f4       	brcc	.+30     	; 0x12ee <Joycon_Get+0xb0>
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	2f 57       	subi	r18, 0x7F	; 127
    12d4:	31 09       	sbc	r19, r1
    12d6:	54 e6       	ldi	r21, 0x64	; 100
    12d8:	52 9f       	mul	r21, r18
    12da:	c0 01       	movw	r24, r0
    12dc:	53 9f       	mul	r21, r19
    12de:	90 0d       	add	r25, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	6f e7       	ldi	r22, 0x7F	; 127
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	0e 94 3f 0c 	call	0x187e	; 0x187e <__divmodhi4>
    12ea:	76 2f       	mov	r23, r22
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <Joycon_Get+0xb2>
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	64 2f       	mov	r22, r20
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <Joycon_Get_Direction>:
    12f8:	0e 94 1f 09 	call	0x123e	; 0x123e <Joycon_Get>
    12fc:	6e 3c       	cpi	r22, 0xCE	; 206
    12fe:	14 f4       	brge	.+4      	; 0x1304 <Joycon_Get_Direction+0xc>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	08 95       	ret
    1304:	63 33       	cpi	r22, 0x33	; 51
    1306:	14 f0       	brlt	.+4      	; 0x130c <Joycon_Get_Direction+0x14>
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	08 95       	ret
    130c:	7e 3c       	cpi	r23, 0xCE	; 206
    130e:	14 f4       	brge	.+4      	; 0x1314 <Joycon_Get_Direction+0x1c>
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	08 95       	ret
    1314:	73 33       	cpi	r23, 0x33	; 51
    1316:	14 f0       	brlt	.+4      	; 0x131c <Joycon_Get_Direction+0x24>
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	08 95       	ret
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	08 95       	ret

00001320 <Slider_Get_Postion>:
    1320:	cf 93       	push	r28
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Adc_Read>
    1328:	c8 2f       	mov	r28, r24
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Adc_Read>
    1330:	98 2f       	mov	r25, r24
    1332:	8c 2f       	mov	r24, r28
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <Slider_Send_Pos>:
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	2a 97       	sbiw	r28, 0x0a	; 10
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	0e 94 90 09 	call	0x1320	; 0x1320 <Slider_Get_Postion>
    1350:	36 b3       	in	r19, 0x16	; 22
    1352:	26 b3       	in	r18, 0x16	; 22
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	49 83       	std	Y+1, r20	; 0x01
    1358:	44 e0       	ldi	r20, 0x04	; 4
    135a:	4a 83       	std	Y+2, r20	; 0x02
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	32 70       	andi	r19, 0x02	; 2
    1362:	3d 83       	std	Y+5, r19	; 0x05
    1364:	21 70       	andi	r18, 0x01	; 1
    1366:	2e 83       	std	Y+6, r18	; 0x06
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	0e 94 c1 04 	call	0x982	; 0x982 <Can_Send_Msg>
    1370:	2a 96       	adiw	r28, 0x0a	; 10
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <alphabet_navigation>:
    1382:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Joycon_Get_Direction>
    1386:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <hold_joycon_alphabet>
    138a:	91 11       	cpse	r25, r1
    138c:	42 c0       	rjmp	.+132    	; 0x1412 <alphabet_navigation+0x90>
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	91 f1       	breq	.+100    	; 0x13f6 <alphabet_navigation+0x74>
    1392:	18 f4       	brcc	.+6      	; 0x139a <alphabet_navigation+0x18>
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	09 f1       	breq	.+66     	; 0x13da <alphabet_navigation+0x58>
    1398:	08 95       	ret
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	81 f0       	breq	.+32     	; 0x13be <alphabet_navigation+0x3c>
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	e1 f5       	brne	.+120    	; 0x141a <alphabet_navigation+0x98>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <hold_joycon_alphabet>
    13a8:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <current_letter>
    13ac:	82 2f       	mov	r24, r18
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	09 96       	adiw	r24, 0x09	; 9
    13b2:	4b 97       	sbiw	r24, 0x1b	; 27
    13b4:	94 f5       	brge	.+100    	; 0x141a <alphabet_navigation+0x98>
    13b6:	27 5f       	subi	r18, 0xF7	; 247
    13b8:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <current_letter>
    13bc:	08 95       	ret
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <hold_joycon_alphabet>
    13c4:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <current_letter>
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	29 50       	subi	r18, 0x09	; 9
    13ce:	31 09       	sbc	r19, r1
    13d0:	22 f1       	brmi	.+72     	; 0x141a <alphabet_navigation+0x98>
    13d2:	89 50       	subi	r24, 0x09	; 9
    13d4:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <current_letter>
    13d8:	08 95       	ret
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <hold_joycon_alphabet>
    13e0:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <current_letter>
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	21 50       	subi	r18, 0x01	; 1
    13ea:	31 09       	sbc	r19, r1
    13ec:	b2 f0       	brmi	.+44     	; 0x141a <alphabet_navigation+0x98>
    13ee:	81 50       	subi	r24, 0x01	; 1
    13f0:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <current_letter>
    13f4:	08 95       	ret
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <hold_joycon_alphabet>
    13fc:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <current_letter>
    1400:	82 2f       	mov	r24, r18
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	4b 97       	sbiw	r24, 0x1b	; 27
    1408:	44 f4       	brge	.+16     	; 0x141a <alphabet_navigation+0x98>
    140a:	2f 5f       	subi	r18, 0xFF	; 255
    140c:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <current_letter>
    1410:	08 95       	ret
    1412:	81 11       	cpse	r24, r1
    1414:	02 c0       	rjmp	.+4      	; 0x141a <alphabet_navigation+0x98>
    1416:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <hold_joycon_alphabet>
    141a:	08 95       	ret

0000141c <print_alphabet>:
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
    1426:	10 e0       	ldi	r17, 0x00	; 0
    1428:	d0 e0       	ldi	r29, 0x00	; 0
    142a:	81 2f       	mov	r24, r17
    142c:	0e 94 0b 07 	call	0xe16	; 0xe16 <Oled_Clear_Line>
    1430:	c0 e0       	ldi	r28, 0x00	; 0
    1432:	8d 2f       	mov	r24, r29
    1434:	8c 0f       	add	r24, r28
    1436:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <current_letter>
    143a:	98 13       	cpse	r25, r24
    143c:	0c c0       	rjmp	.+24     	; 0x1456 <print_alphabet+0x3a>
    143e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <alphabet>
    1442:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <alphabet+0x1>
    1446:	e9 0f       	add	r30, r25
    1448:	f1 1d       	adc	r31, r1
    144a:	4c 2f       	mov	r20, r28
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	80 81       	ld	r24, Z
    1450:	0e 94 29 07 	call	0xe52	; 0xe52 <Oled_Print_Char>
    1454:	0b c0       	rjmp	.+22     	; 0x146c <print_alphabet+0x50>
    1456:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <alphabet>
    145a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <alphabet+0x1>
    145e:	e8 0f       	add	r30, r24
    1460:	f1 1d       	adc	r31, r1
    1462:	4c 2f       	mov	r20, r28
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	0e 94 29 07 	call	0xe52	; 0xe52 <Oled_Print_Char>
    146c:	cf 5f       	subi	r28, 0xFF	; 255
    146e:	c9 30       	cpi	r28, 0x09	; 9
    1470:	01 f7       	brne	.-64     	; 0x1432 <print_alphabet+0x16>
    1472:	d7 5f       	subi	r29, 0xF7	; 247
    1474:	1f 5f       	subi	r17, 0xFF	; 255
    1476:	db 31       	cpi	r29, 0x1B	; 27
    1478:	c1 f6       	brne	.-80     	; 0x142a <print_alphabet+0xe>
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	08 95       	ret

00001482 <select_letter_func>:
    1482:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <current_letter>
    1486:	b1 99       	sbic	0x16, 1	; 22
    1488:	08 c0       	rjmp	.+16     	; 0x149a <select_letter_func+0x18>
    148a:	0e 94 c1 09 	call	0x1382	; 0x1382 <alphabet_navigation>
    148e:	0e 94 0e 0a 	call	0x141c	; 0x141c <print_alphabet>
    1492:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Oled_Update>
    1496:	b1 9b       	sbis	0x16, 1	; 22
    1498:	f8 cf       	rjmp	.-16     	; 0x148a <select_letter_func+0x8>
    149a:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <current_letter>
    149e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <alphabet>
    14a2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <alphabet+0x1>
    14a6:	e8 0f       	add	r30, r24
    14a8:	f1 1d       	adc	r31, r1
    14aa:	80 81       	ld	r24, Z
    14ac:	08 95       	ret

000014ae <create_name>:
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	66 23       	and	r22, r22
    14b8:	89 f0       	breq	.+34     	; 0x14dc <create_name+0x2e>
    14ba:	8c 01       	movw	r16, r24
    14bc:	ec 01       	movw	r28, r24
    14be:	61 50       	subi	r22, 0x01	; 1
    14c0:	26 2f       	mov	r18, r22
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	02 0f       	add	r16, r18
    14ca:	13 1f       	adc	r17, r19
    14cc:	b1 99       	sbic	0x16, 1	; 22
    14ce:	fe cf       	rjmp	.-4      	; 0x14cc <create_name+0x1e>
    14d0:	0e 94 41 0a 	call	0x1482	; 0x1482 <select_letter_func>
    14d4:	89 93       	st	Y+, r24
    14d6:	c0 17       	cp	r28, r16
    14d8:	d1 07       	cpc	r29, r17
    14da:	c1 f7       	brne	.-16     	; 0x14cc <create_name+0x1e>
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <Menu_Navigation>:
    14e6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Joycon_Get_Direction>
    14ea:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <hold_joycon>
    14ee:	91 11       	cpse	r25, r1
    14f0:	54 c0       	rjmp	.+168    	; 0x159a <Menu_Navigation+0xb4>
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	71 f1       	breq	.+92     	; 0x1552 <Menu_Navigation+0x6c>
    14f6:	18 f4       	brcc	.+6      	; 0x14fe <Menu_Navigation+0x18>
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	99 f0       	breq	.+38     	; 0x1522 <Menu_Navigation+0x3c>
    14fc:	08 95       	ret
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	49 f0       	breq	.+18     	; 0x1514 <Menu_Navigation+0x2e>
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	09 f0       	breq	.+2      	; 0x1508 <Menu_Navigation+0x22>
    1506:	4d c0       	rjmp	.+154    	; 0x15a2 <Menu_Navigation+0xbc>
    1508:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Change_Child>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <hold_joycon>
    1512:	08 95       	ret
    1514:	83 e0       	ldi	r24, 0x03	; 3
    1516:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Change_Child>
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <hold_joycon>
    1520:	08 95       	ret
    1522:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <current_menu>
    1526:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <current_menu+0x1>
    152a:	86 85       	ldd	r24, Z+14	; 0x0e
    152c:	97 85       	ldd	r25, Z+15	; 0x0f
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	c1 f1       	breq	.+112    	; 0x15a2 <Menu_Navigation+0xbc>
    1532:	f0 93 a4 03 	sts	0x03A4, r31	; 0x8003a4 <current_child+0x1>
    1536:	e0 93 a3 03 	sts	0x03A3, r30	; 0x8003a3 <current_child>
    153a:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <current_menu+0x1>
    153e:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <current_menu>
    1542:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <current_child_num>
    1546:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <hold_joycon>
    1550:	08 95       	ret
    1552:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <current_menu>
    1556:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <current_menu+0x1>
    155a:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_child_num>
    155e:	e8 2f       	mov	r30, r24
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	31 96       	adiw	r30, 0x01	; 1
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	01 90       	ld	r0, Z+
    156e:	f0 81       	ld	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	30 97       	sbiw	r30, 0x00	; 0
    1574:	b1 f0       	breq	.+44     	; 0x15a2 <Menu_Navigation+0xbc>
    1576:	f0 93 a2 03 	sts	0x03A2, r31	; 0x8003a2 <current_menu+0x1>
    157a:	e0 93 a1 03 	sts	0x03A1, r30	; 0x8003a1 <current_menu>
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <current_child+0x1>
    1586:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <current_child>
    158a:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <current_child_num>
    158e:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <hold_joycon>
    1598:	08 95       	ret
    159a:	81 11       	cpse	r24, r1
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <Menu_Navigation+0xbc>
    159e:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <hold_joycon>
    15a2:	08 95       	ret

000015a4 <Menu_Functionality>:
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	cb 54       	subi	r28, 0x4B	; 75
    15c2:	d1 09       	sbc	r29, r1
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <current_menu>
    15d2:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <current_menu+0x1>
    15d6:	e1 89       	ldd	r30, Z+17	; 0x11
    15d8:	8e 2f       	mov	r24, r30
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	8a 30       	cpi	r24, 0x0A	; 10
    15de:	91 05       	cpc	r25, r1
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <Menu_Functionality+0x40>
    15e2:	9d c0       	rjmp	.+314    	; 0x171e <Menu_Functionality+0x17a>
    15e4:	fc 01       	movw	r30, r24
    15e6:	e0 5c       	subi	r30, 0xC0	; 192
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__tablejump2__>
    15ee:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    15f2:	97 c0       	rjmp	.+302    	; 0x1722 <Menu_Functionality+0x17e>
    15f4:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    15f8:	94 c0       	rjmp	.+296    	; 0x1722 <Menu_Functionality+0x17e>
    15fa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Get_Game_State>
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	09 f0       	breq	.+2      	; 0x1604 <Menu_Functionality+0x60>
    1602:	8f c0       	rjmp	.+286    	; 0x1722 <Menu_Functionality+0x17e>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	0e 94 8a 06 	call	0xd14	; 0xd14 <Set_Gamestate>
    160a:	8b c0       	rjmp	.+278    	; 0x1722 <Menu_Functionality+0x17e>
    160c:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    1610:	88 c0       	rjmp	.+272    	; 0x1722 <Menu_Functionality+0x17e>
    1612:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	0e 94 90 06 	call	0xd20	; 0xd20 <Get_Highscore>
    161c:	9f 93       	push	r25
    161e:	8f 93       	push	r24
    1620:	81 e7       	ldi	r24, 0x71	; 113
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	9f 93       	push	r25
    1626:	8f 93       	push	r24
    1628:	5e 01       	movw	r10, r28
    162a:	8d e3       	ldi	r24, 0x3D	; 61
    162c:	a8 0e       	add	r10, r24
    162e:	b1 1c       	adc	r11, r1
    1630:	bf 92       	push	r11
    1632:	af 92       	push	r10
    1634:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 90 06 	call	0xd20	; 0xd20 <Get_Highscore>
    163e:	9f 93       	push	r25
    1640:	8f 93       	push	r24
    1642:	89 e7       	ldi	r24, 0x79	; 121
    1644:	92 e0       	ldi	r25, 0x02	; 2
    1646:	9f 93       	push	r25
    1648:	8f 93       	push	r24
    164a:	6e 01       	movw	r12, r28
    164c:	9e e2       	ldi	r25, 0x2E	; 46
    164e:	c9 0e       	add	r12, r25
    1650:	d1 1c       	adc	r13, r1
    1652:	df 92       	push	r13
    1654:	cf 92       	push	r12
    1656:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	0e 94 90 06 	call	0xd20	; 0xd20 <Get_Highscore>
    1660:	9f 93       	push	r25
    1662:	8f 93       	push	r24
    1664:	81 e8       	ldi	r24, 0x81	; 129
    1666:	92 e0       	ldi	r25, 0x02	; 2
    1668:	9f 93       	push	r25
    166a:	8f 93       	push	r24
    166c:	7e 01       	movw	r14, r28
    166e:	8f e1       	ldi	r24, 0x1F	; 31
    1670:	e8 0e       	add	r14, r24
    1672:	f1 1c       	adc	r15, r1
    1674:	ff 92       	push	r15
    1676:	ef 92       	push	r14
    1678:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	0e 94 90 06 	call	0xd20	; 0xd20 <Get_Highscore>
    1682:	9f 93       	push	r25
    1684:	8f 93       	push	r24
    1686:	89 e8       	ldi	r24, 0x89	; 137
    1688:	92 e0       	ldi	r25, 0x02	; 2
    168a:	9f 93       	push	r25
    168c:	8f 93       	push	r24
    168e:	8e 01       	movw	r16, r28
    1690:	00 5f       	subi	r16, 0xF0	; 240
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	1f 93       	push	r17
    1696:	0f 93       	push	r16
    1698:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
    169c:	84 e0       	ldi	r24, 0x04	; 4
    169e:	0e 94 90 06 	call	0xd20	; 0xd20 <Get_Highscore>
    16a2:	9f 93       	push	r25
    16a4:	8f 93       	push	r24
    16a6:	81 e9       	ldi	r24, 0x91	; 145
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	9f 93       	push	r25
    16ac:	8f 93       	push	r24
    16ae:	ce 01       	movw	r24, r28
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	4c 01       	movw	r8, r24
    16b4:	9f 93       	push	r25
    16b6:	8f 93       	push	r24
    16b8:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	89 e9       	ldi	r24, 0x99	; 153
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	c5 01       	movw	r24, r10
    16ce:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	63 e0       	ldi	r22, 0x03	; 3
    16d6:	c6 01       	movw	r24, r12
    16d8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	64 e0       	ldi	r22, 0x04	; 4
    16e0:	c7 01       	movw	r24, r14
    16e2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	65 e0       	ldi	r22, 0x05	; 5
    16ea:	c8 01       	movw	r24, r16
    16ec:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	66 e0       	ldi	r22, 0x06	; 6
    16f4:	c4 01       	movw	r24, r8
    16f6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <Menu_Functionality+0x17e>
    1706:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Get_Game_State>
    170a:	85 30       	cpi	r24, 0x05	; 5
    170c:	51 f0       	breq	.+20     	; 0x1722 <Menu_Functionality+0x17e>
    170e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Get_Game_State>
    1712:	86 30       	cpi	r24, 0x06	; 6
    1714:	31 f0       	breq	.+12     	; 0x1722 <Menu_Functionality+0x17e>
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	0e 94 8a 06 	call	0xd14	; 0xd14 <Set_Gamestate>
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <Menu_Functionality+0x17e>
    171e:	0e 94 cf 08 	call	0x119e	; 0x119e <Update_Menu>
    1722:	c5 5b       	subi	r28, 0xB5	; 181
    1724:	df 4f       	sbci	r29, 0xFF	; 255
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	af 90       	pop	r10
    1744:	9f 90       	pop	r9
    1746:	8f 90       	pop	r8
    1748:	08 95       	ret

0000174a <Node_One_Init>:
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	64 97       	sbiw	r28, 0x14	; 20
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	85 ea       	ldi	r24, 0xA5	; 165
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	8e ea       	ldi	r24, 0xAE	; 174
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	62 e0       	ldi	r22, 0x02	; 2
    177e:	8d eb       	ldi	r24, 0xBD	; 189
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	63 e0       	ldi	r22, 0x03	; 3
    178a:	88 ec       	ldi	r24, 0xC8	; 200
    178c:	92 e0       	ldi	r25, 0x02	; 2
    178e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	64 e0       	ldi	r22, 0x04	; 4
    1796:	86 ed       	ldi	r24, 0xD6	; 214
    1798:	92 e0       	ldi	r25, 0x02	; 2
    179a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	65 e0       	ldi	r22, 0x05	; 5
    17a2:	80 ee       	ldi	r24, 0xE0	; 224
    17a4:	92 e0       	ldi	r25, 0x02	; 2
    17a6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Menu_Line_Change>
    17aa:	8c ec       	ldi	r24, 0xCC	; 204
    17ac:	94 e0       	ldi	r25, 0x04	; 4
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <Node_One_Init+0x64>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <Node_One_Init+0x6a>
    17b4:	00 00       	nop
    17b6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Oled_Update>
    17ba:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Oled_Update>
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	2f ef       	ldi	r18, 0xFF	; 255
    17c2:	8c e2       	ldi	r24, 0x2C	; 44
    17c4:	91 50       	subi	r25, 0x01	; 1
    17c6:	20 40       	sbci	r18, 0x00	; 0
    17c8:	80 40       	sbci	r24, 0x00	; 0
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <Node_One_Init+0x7a>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <Node_One_Init+0x84>
    17ce:	00 c0       	rjmp	.+0      	; 0x17d0 <Node_One_Init+0x86>
    17d0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
    17d4:	0e 94 7b 07 	call	0xef6	; 0xef6 <Print_Lunde>
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	8b 87       	std	Y+11, r24	; 0x0b
    17dc:	8d 87       	std	Y+13, r24	; 0x0d
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	8c 87       	std	Y+12, r24	; 0x0c
    17e2:	ce 01       	movw	r24, r28
    17e4:	0b 96       	adiw	r24, 0x0b	; 11
    17e6:	0e 94 c1 04 	call	0x982	; 0x982 <Can_Send_Msg>
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	2f e7       	ldi	r18, 0x7F	; 127
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	91 50       	subi	r25, 0x01	; 1
    17f2:	20 40       	sbci	r18, 0x00	; 0
    17f4:	80 40       	sbci	r24, 0x00	; 0
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <Node_One_Init+0xa6>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <Node_One_Init+0xb0>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <Node_One_Init+0xb2>
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 02 05 	call	0xa04	; 0xa04 <Can_Recieve_Msg>
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	8b 30       	cpi	r24, 0x0B	; 11
    1808:	51 f0       	breq	.+20     	; 0x181e <Node_One_Init+0xd4>
    180a:	9f ef       	ldi	r25, 0xFF	; 255
    180c:	2f e7       	ldi	r18, 0x7F	; 127
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	91 50       	subi	r25, 0x01	; 1
    1812:	20 40       	sbci	r18, 0x00	; 0
    1814:	80 40       	sbci	r24, 0x00	; 0
    1816:	e1 f7       	brne	.-8      	; 0x1810 <Node_One_Init+0xc6>
    1818:	00 c0       	rjmp	.+0      	; 0x181a <Node_One_Init+0xd0>
    181a:	00 c0       	rjmp	.+0      	; 0x181c <Node_One_Init+0xd2>
    181c:	e2 cf       	rjmp	.-60     	; 0x17e2 <Node_One_Init+0x98>
    181e:	9f ef       	ldi	r25, 0xFF	; 255
    1820:	2f e7       	ldi	r18, 0x7F	; 127
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	91 50       	subi	r25, 0x01	; 1
    1826:	20 40       	sbci	r18, 0x00	; 0
    1828:	80 40       	sbci	r24, 0x00	; 0
    182a:	e1 f7       	brne	.-8      	; 0x1824 <Node_One_Init+0xda>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <Node_One_Init+0xe4>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <Node_One_Init+0xe6>
    1830:	80 ef       	ldi	r24, 0xF0	; 240
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	9f 93       	push	r25
    1836:	8f 93       	push	r24
    1838:	0e 94 b8 0c 	call	0x1970	; 0x1970 <printf>
    183c:	9f ef       	ldi	r25, 0xFF	; 255
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	8d e1       	ldi	r24, 0x1D	; 29
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	20 40       	sbci	r18, 0x00	; 0
    1846:	80 40       	sbci	r24, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <Node_One_Init+0xf8>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <Node_One_Init+0x102>
    184c:	00 00       	nop
    184e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Oled_Reset>
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	64 96       	adiw	r28, 0x14	; 20
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <Move_To_Parent>:

void Move_To_Parent(void){
	current_menu = current_menu->parent;
    1868:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <current_menu>
    186c:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <current_menu+0x1>
    1870:	86 85       	ldd	r24, Z+14	; 0x0e
    1872:	97 85       	ldd	r25, Z+15	; 0x0f
    1874:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <current_menu+0x1>
    1878:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <current_menu>
    187c:	08 95       	ret

0000187e <__divmodhi4>:
    187e:	97 fb       	bst	r25, 7
    1880:	07 2e       	mov	r0, r23
    1882:	16 f4       	brtc	.+4      	; 0x1888 <__divmodhi4+0xa>
    1884:	00 94       	com	r0
    1886:	07 d0       	rcall	.+14     	; 0x1896 <__divmodhi4_neg1>
    1888:	77 fd       	sbrc	r23, 7
    188a:	09 d0       	rcall	.+18     	; 0x189e <__divmodhi4_neg2>
    188c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivmodhi4>
    1890:	07 fc       	sbrc	r0, 7
    1892:	05 d0       	rcall	.+10     	; 0x189e <__divmodhi4_neg2>
    1894:	3e f4       	brtc	.+14     	; 0x18a4 <__divmodhi4_exit>

00001896 <__divmodhi4_neg1>:
    1896:	90 95       	com	r25
    1898:	81 95       	neg	r24
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	08 95       	ret

0000189e <__divmodhi4_neg2>:
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255

000018a4 <__divmodhi4_exit>:
    18a4:	08 95       	ret

000018a6 <__tablejump2__>:
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	05 90       	lpm	r0, Z+
    18ac:	f4 91       	lpm	r31, Z
    18ae:	e0 2d       	mov	r30, r0
    18b0:	09 94       	ijmp

000018b2 <__udivmodhi4>:
    18b2:	aa 1b       	sub	r26, r26
    18b4:	bb 1b       	sub	r27, r27
    18b6:	51 e1       	ldi	r21, 0x11	; 17
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <__udivmodhi4_ep>

000018ba <__udivmodhi4_loop>:
    18ba:	aa 1f       	adc	r26, r26
    18bc:	bb 1f       	adc	r27, r27
    18be:	a6 17       	cp	r26, r22
    18c0:	b7 07       	cpc	r27, r23
    18c2:	10 f0       	brcs	.+4      	; 0x18c8 <__udivmodhi4_ep>
    18c4:	a6 1b       	sub	r26, r22
    18c6:	b7 0b       	sbc	r27, r23

000018c8 <__udivmodhi4_ep>:
    18c8:	88 1f       	adc	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	5a 95       	dec	r21
    18ce:	a9 f7       	brne	.-22     	; 0x18ba <__udivmodhi4_loop>
    18d0:	80 95       	com	r24
    18d2:	90 95       	com	r25
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	08 95       	ret

000018da <fdevopen>:
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	31 f4       	brne	.+12     	; 0x18f2 <fdevopen+0x18>
    18e6:	61 15       	cp	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <fdevopen+0x18>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	3a c0       	rjmp	.+116    	; 0x1966 <fdevopen+0x8c>
    18f2:	8b 01       	movw	r16, r22
    18f4:	ec 01       	movw	r28, r24
    18f6:	6e e0       	ldi	r22, 0x0E	; 14
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <calloc>
    1902:	fc 01       	movw	r30, r24
    1904:	89 2b       	or	r24, r25
    1906:	91 f3       	breq	.-28     	; 0x18ec <fdevopen+0x12>
    1908:	80 e8       	ldi	r24, 0x80	; 128
    190a:	83 83       	std	Z+3, r24	; 0x03
    190c:	01 15       	cp	r16, r1
    190e:	11 05       	cpc	r17, r1
    1910:	71 f0       	breq	.+28     	; 0x192e <fdevopen+0x54>
    1912:	13 87       	std	Z+11, r17	; 0x0b
    1914:	02 87       	std	Z+10, r16	; 0x0a
    1916:	81 e8       	ldi	r24, 0x81	; 129
    1918:	83 83       	std	Z+3, r24	; 0x03
    191a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <__iob>
    191e:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <__iob+0x1>
    1922:	89 2b       	or	r24, r25
    1924:	21 f4       	brne	.+8      	; 0x192e <fdevopen+0x54>
    1926:	f0 93 a6 03 	sts	0x03A6, r31	; 0x8003a6 <__iob+0x1>
    192a:	e0 93 a5 03 	sts	0x03A5, r30	; 0x8003a5 <__iob>
    192e:	20 97       	sbiw	r28, 0x00	; 0
    1930:	c9 f0       	breq	.+50     	; 0x1964 <fdevopen+0x8a>
    1932:	d1 87       	std	Z+9, r29	; 0x09
    1934:	c0 87       	std	Z+8, r28	; 0x08
    1936:	83 81       	ldd	r24, Z+3	; 0x03
    1938:	82 60       	ori	r24, 0x02	; 2
    193a:	83 83       	std	Z+3, r24	; 0x03
    193c:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <__iob+0x2>
    1940:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <__iob+0x3>
    1944:	89 2b       	or	r24, r25
    1946:	71 f4       	brne	.+28     	; 0x1964 <fdevopen+0x8a>
    1948:	f0 93 a8 03 	sts	0x03A8, r31	; 0x8003a8 <__iob+0x3>
    194c:	e0 93 a7 03 	sts	0x03A7, r30	; 0x8003a7 <__iob+0x2>
    1950:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <__iob+0x4>
    1954:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <__iob+0x5>
    1958:	89 2b       	or	r24, r25
    195a:	21 f4       	brne	.+8      	; 0x1964 <fdevopen+0x8a>
    195c:	f0 93 aa 03 	sts	0x03AA, r31	; 0x8003aa <__iob+0x5>
    1960:	e0 93 a9 03 	sts	0x03A9, r30	; 0x8003a9 <__iob+0x4>
    1964:	cf 01       	movw	r24, r30
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <printf>:
    1970:	a0 e0       	ldi	r26, 0x00	; 0
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ee eb       	ldi	r30, 0xBE	; 190
    1976:	fc e0       	ldi	r31, 0x0C	; 12
    1978:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__prologue_saves__+0x20>
    197c:	ae 01       	movw	r20, r28
    197e:	4b 5f       	subi	r20, 0xFB	; 251
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	fa 01       	movw	r30, r20
    1984:	61 91       	ld	r22, Z+
    1986:	71 91       	ld	r23, Z+
    1988:	af 01       	movw	r20, r30
    198a:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <__iob+0x2>
    198e:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <__iob+0x3>
    1992:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <vfprintf>
    1996:	e2 e0       	ldi	r30, 0x02	; 2
    1998:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__epilogue_restores__+0x20>

0000199c <sprintf>:
    199c:	ae e0       	ldi	r26, 0x0E	; 14
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e4 ed       	ldi	r30, 0xD4	; 212
    19a2:	fc e0       	ldi	r31, 0x0C	; 12
    19a4:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x1c>
    19a8:	0d 89       	ldd	r16, Y+21	; 0x15
    19aa:	1e 89       	ldd	r17, Y+22	; 0x16
    19ac:	86 e0       	ldi	r24, 0x06	; 6
    19ae:	8c 83       	std	Y+4, r24	; 0x04
    19b0:	1a 83       	std	Y+2, r17	; 0x02
    19b2:	09 83       	std	Y+1, r16	; 0x01
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	9f e7       	ldi	r25, 0x7F	; 127
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
    19bc:	ae 01       	movw	r20, r28
    19be:	47 5e       	subi	r20, 0xE7	; 231
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255
    19c2:	6f 89       	ldd	r22, Y+23	; 0x17
    19c4:	78 8d       	ldd	r23, Y+24	; 0x18
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <vfprintf>
    19ce:	ef 81       	ldd	r30, Y+7	; 0x07
    19d0:	f8 85       	ldd	r31, Y+8	; 0x08
    19d2:	e0 0f       	add	r30, r16
    19d4:	f1 1f       	adc	r31, r17
    19d6:	10 82       	st	Z, r1
    19d8:	2e 96       	adiw	r28, 0x0e	; 14
    19da:	e4 e0       	ldi	r30, 0x04	; 4
    19dc:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x1c>

000019e0 <vfprintf>:
    19e0:	ab e0       	ldi	r26, 0x0B	; 11
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__prologue_saves__>
    19ec:	6c 01       	movw	r12, r24
    19ee:	7b 01       	movw	r14, r22
    19f0:	8a 01       	movw	r16, r20
    19f2:	fc 01       	movw	r30, r24
    19f4:	17 82       	std	Z+7, r1	; 0x07
    19f6:	16 82       	std	Z+6, r1	; 0x06
    19f8:	83 81       	ldd	r24, Z+3	; 0x03
    19fa:	81 ff       	sbrs	r24, 1
    19fc:	cc c1       	rjmp	.+920    	; 0x1d96 <vfprintf+0x3b6>
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	3c 01       	movw	r6, r24
    1a04:	f6 01       	movw	r30, r12
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	f7 01       	movw	r30, r14
    1a0a:	93 fd       	sbrc	r25, 3
    1a0c:	85 91       	lpm	r24, Z+
    1a0e:	93 ff       	sbrs	r25, 3
    1a10:	81 91       	ld	r24, Z+
    1a12:	7f 01       	movw	r14, r30
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <vfprintf+0x3a>
    1a18:	ba c1       	rjmp	.+884    	; 0x1d8e <vfprintf+0x3ae>
    1a1a:	85 32       	cpi	r24, 0x25	; 37
    1a1c:	39 f4       	brne	.+14     	; 0x1a2c <vfprintf+0x4c>
    1a1e:	93 fd       	sbrc	r25, 3
    1a20:	85 91       	lpm	r24, Z+
    1a22:	93 ff       	sbrs	r25, 3
    1a24:	81 91       	ld	r24, Z+
    1a26:	7f 01       	movw	r14, r30
    1a28:	85 32       	cpi	r24, 0x25	; 37
    1a2a:	29 f4       	brne	.+10     	; 0x1a36 <vfprintf+0x56>
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1a34:	e7 cf       	rjmp	.-50     	; 0x1a04 <vfprintf+0x24>
    1a36:	91 2c       	mov	r9, r1
    1a38:	21 2c       	mov	r2, r1
    1a3a:	31 2c       	mov	r3, r1
    1a3c:	ff e1       	ldi	r31, 0x1F	; 31
    1a3e:	f3 15       	cp	r31, r3
    1a40:	d8 f0       	brcs	.+54     	; 0x1a78 <vfprintf+0x98>
    1a42:	8b 32       	cpi	r24, 0x2B	; 43
    1a44:	79 f0       	breq	.+30     	; 0x1a64 <vfprintf+0x84>
    1a46:	38 f4       	brcc	.+14     	; 0x1a56 <vfprintf+0x76>
    1a48:	80 32       	cpi	r24, 0x20	; 32
    1a4a:	79 f0       	breq	.+30     	; 0x1a6a <vfprintf+0x8a>
    1a4c:	83 32       	cpi	r24, 0x23	; 35
    1a4e:	a1 f4       	brne	.+40     	; 0x1a78 <vfprintf+0x98>
    1a50:	23 2d       	mov	r18, r3
    1a52:	20 61       	ori	r18, 0x10	; 16
    1a54:	1d c0       	rjmp	.+58     	; 0x1a90 <vfprintf+0xb0>
    1a56:	8d 32       	cpi	r24, 0x2D	; 45
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <vfprintf+0x92>
    1a5a:	80 33       	cpi	r24, 0x30	; 48
    1a5c:	69 f4       	brne	.+26     	; 0x1a78 <vfprintf+0x98>
    1a5e:	23 2d       	mov	r18, r3
    1a60:	21 60       	ori	r18, 0x01	; 1
    1a62:	16 c0       	rjmp	.+44     	; 0x1a90 <vfprintf+0xb0>
    1a64:	83 2d       	mov	r24, r3
    1a66:	82 60       	ori	r24, 0x02	; 2
    1a68:	38 2e       	mov	r3, r24
    1a6a:	e3 2d       	mov	r30, r3
    1a6c:	e4 60       	ori	r30, 0x04	; 4
    1a6e:	3e 2e       	mov	r3, r30
    1a70:	2a c0       	rjmp	.+84     	; 0x1ac6 <vfprintf+0xe6>
    1a72:	f3 2d       	mov	r31, r3
    1a74:	f8 60       	ori	r31, 0x08	; 8
    1a76:	1d c0       	rjmp	.+58     	; 0x1ab2 <vfprintf+0xd2>
    1a78:	37 fc       	sbrc	r3, 7
    1a7a:	2d c0       	rjmp	.+90     	; 0x1ad6 <vfprintf+0xf6>
    1a7c:	20 ed       	ldi	r18, 0xD0	; 208
    1a7e:	28 0f       	add	r18, r24
    1a80:	2a 30       	cpi	r18, 0x0A	; 10
    1a82:	40 f0       	brcs	.+16     	; 0x1a94 <vfprintf+0xb4>
    1a84:	8e 32       	cpi	r24, 0x2E	; 46
    1a86:	b9 f4       	brne	.+46     	; 0x1ab6 <vfprintf+0xd6>
    1a88:	36 fc       	sbrc	r3, 6
    1a8a:	81 c1       	rjmp	.+770    	; 0x1d8e <vfprintf+0x3ae>
    1a8c:	23 2d       	mov	r18, r3
    1a8e:	20 64       	ori	r18, 0x40	; 64
    1a90:	32 2e       	mov	r3, r18
    1a92:	19 c0       	rjmp	.+50     	; 0x1ac6 <vfprintf+0xe6>
    1a94:	36 fe       	sbrs	r3, 6
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <vfprintf+0xc4>
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	98 9e       	mul	r9, r24
    1a9c:	20 0d       	add	r18, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	92 2e       	mov	r9, r18
    1aa2:	11 c0       	rjmp	.+34     	; 0x1ac6 <vfprintf+0xe6>
    1aa4:	ea e0       	ldi	r30, 0x0A	; 10
    1aa6:	2e 9e       	mul	r2, r30
    1aa8:	20 0d       	add	r18, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	22 2e       	mov	r2, r18
    1aae:	f3 2d       	mov	r31, r3
    1ab0:	f0 62       	ori	r31, 0x20	; 32
    1ab2:	3f 2e       	mov	r3, r31
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <vfprintf+0xe6>
    1ab6:	8c 36       	cpi	r24, 0x6C	; 108
    1ab8:	21 f4       	brne	.+8      	; 0x1ac2 <vfprintf+0xe2>
    1aba:	83 2d       	mov	r24, r3
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	38 2e       	mov	r3, r24
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0xe6>
    1ac2:	88 36       	cpi	r24, 0x68	; 104
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <vfprintf+0xf6>
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	93 fd       	sbrc	r25, 3
    1aca:	85 91       	lpm	r24, Z+
    1acc:	93 ff       	sbrs	r25, 3
    1ace:	81 91       	ld	r24, Z+
    1ad0:	7f 01       	movw	r14, r30
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	b3 cf       	rjmp	.-154    	; 0x1a3c <vfprintf+0x5c>
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	9f 7d       	andi	r25, 0xDF	; 223
    1ada:	95 54       	subi	r25, 0x45	; 69
    1adc:	93 30       	cpi	r25, 0x03	; 3
    1ade:	28 f4       	brcc	.+10     	; 0x1aea <vfprintf+0x10a>
    1ae0:	0c 5f       	subi	r16, 0xFC	; 252
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	9f e3       	ldi	r25, 0x3F	; 63
    1ae6:	99 83       	std	Y+1, r25	; 0x01
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <vfprintf+0x124>
    1aea:	83 36       	cpi	r24, 0x63	; 99
    1aec:	31 f0       	breq	.+12     	; 0x1afa <vfprintf+0x11a>
    1aee:	83 37       	cpi	r24, 0x73	; 115
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <vfprintf+0x12e>
    1af2:	83 35       	cpi	r24, 0x53	; 83
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <vfprintf+0x118>
    1af6:	59 c0       	rjmp	.+178    	; 0x1baa <vfprintf+0x1ca>
    1af8:	21 c0       	rjmp	.+66     	; 0x1b3c <vfprintf+0x15c>
    1afa:	f8 01       	movw	r30, r16
    1afc:	80 81       	ld	r24, Z
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	0e 5f       	subi	r16, 0xFE	; 254
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	88 24       	eor	r8, r8
    1b06:	83 94       	inc	r8
    1b08:	91 2c       	mov	r9, r1
    1b0a:	53 01       	movw	r10, r6
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <vfprintf+0x154>
    1b0e:	28 01       	movw	r4, r16
    1b10:	f2 e0       	ldi	r31, 0x02	; 2
    1b12:	4f 0e       	add	r4, r31
    1b14:	51 1c       	adc	r5, r1
    1b16:	f8 01       	movw	r30, r16
    1b18:	a0 80       	ld	r10, Z
    1b1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b1c:	36 fe       	sbrs	r3, 6
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <vfprintf+0x146>
    1b20:	69 2d       	mov	r22, r9
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <vfprintf+0x14a>
    1b26:	6f ef       	ldi	r22, 0xFF	; 255
    1b28:	7f ef       	ldi	r23, 0xFF	; 255
    1b2a:	c5 01       	movw	r24, r10
    1b2c:	0e 94 20 10 	call	0x2040	; 0x2040 <strnlen>
    1b30:	4c 01       	movw	r8, r24
    1b32:	82 01       	movw	r16, r4
    1b34:	f3 2d       	mov	r31, r3
    1b36:	ff 77       	andi	r31, 0x7F	; 127
    1b38:	3f 2e       	mov	r3, r31
    1b3a:	16 c0       	rjmp	.+44     	; 0x1b68 <vfprintf+0x188>
    1b3c:	28 01       	movw	r4, r16
    1b3e:	22 e0       	ldi	r18, 0x02	; 2
    1b40:	42 0e       	add	r4, r18
    1b42:	51 1c       	adc	r5, r1
    1b44:	f8 01       	movw	r30, r16
    1b46:	a0 80       	ld	r10, Z
    1b48:	b1 80       	ldd	r11, Z+1	; 0x01
    1b4a:	36 fe       	sbrs	r3, 6
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <vfprintf+0x174>
    1b4e:	69 2d       	mov	r22, r9
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0x178>
    1b54:	6f ef       	ldi	r22, 0xFF	; 255
    1b56:	7f ef       	ldi	r23, 0xFF	; 255
    1b58:	c5 01       	movw	r24, r10
    1b5a:	0e 94 0e 10 	call	0x201c	; 0x201c <strnlen_P>
    1b5e:	4c 01       	movw	r8, r24
    1b60:	f3 2d       	mov	r31, r3
    1b62:	f0 68       	ori	r31, 0x80	; 128
    1b64:	3f 2e       	mov	r3, r31
    1b66:	82 01       	movw	r16, r4
    1b68:	33 fc       	sbrc	r3, 3
    1b6a:	1b c0       	rjmp	.+54     	; 0x1ba2 <vfprintf+0x1c2>
    1b6c:	82 2d       	mov	r24, r2
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	88 16       	cp	r8, r24
    1b72:	99 06       	cpc	r9, r25
    1b74:	b0 f4       	brcc	.+44     	; 0x1ba2 <vfprintf+0x1c2>
    1b76:	b6 01       	movw	r22, r12
    1b78:	80 e2       	ldi	r24, 0x20	; 32
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1b80:	2a 94       	dec	r2
    1b82:	f4 cf       	rjmp	.-24     	; 0x1b6c <vfprintf+0x18c>
    1b84:	f5 01       	movw	r30, r10
    1b86:	37 fc       	sbrc	r3, 7
    1b88:	85 91       	lpm	r24, Z+
    1b8a:	37 fe       	sbrs	r3, 7
    1b8c:	81 91       	ld	r24, Z+
    1b8e:	5f 01       	movw	r10, r30
    1b90:	b6 01       	movw	r22, r12
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1b98:	21 10       	cpse	r2, r1
    1b9a:	2a 94       	dec	r2
    1b9c:	21 e0       	ldi	r18, 0x01	; 1
    1b9e:	82 1a       	sub	r8, r18
    1ba0:	91 08       	sbc	r9, r1
    1ba2:	81 14       	cp	r8, r1
    1ba4:	91 04       	cpc	r9, r1
    1ba6:	71 f7       	brne	.-36     	; 0x1b84 <vfprintf+0x1a4>
    1ba8:	e8 c0       	rjmp	.+464    	; 0x1d7a <vfprintf+0x39a>
    1baa:	84 36       	cpi	r24, 0x64	; 100
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <vfprintf+0x1d2>
    1bae:	89 36       	cpi	r24, 0x69	; 105
    1bb0:	41 f5       	brne	.+80     	; 0x1c02 <vfprintf+0x222>
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	37 fe       	sbrs	r3, 7
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <vfprintf+0x1e6>
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	0c 5f       	subi	r16, 0xFC	; 252
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <vfprintf+0x1f6>
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	07 2e       	mov	r0, r23
    1bcc:	00 0c       	add	r0, r0
    1bce:	88 0b       	sbc	r24, r24
    1bd0:	99 0b       	sbc	r25, r25
    1bd2:	0e 5f       	subi	r16, 0xFE	; 254
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	f3 2d       	mov	r31, r3
    1bd8:	ff 76       	andi	r31, 0x6F	; 111
    1bda:	3f 2e       	mov	r3, r31
    1bdc:	97 ff       	sbrs	r25, 7
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <vfprintf+0x212>
    1be0:	90 95       	com	r25
    1be2:	80 95       	com	r24
    1be4:	70 95       	com	r23
    1be6:	61 95       	neg	r22
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	f0 68       	ori	r31, 0x80	; 128
    1bf0:	3f 2e       	mov	r3, r31
    1bf2:	2a e0       	ldi	r18, 0x0A	; 10
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	a3 01       	movw	r20, r6
    1bf8:	0e 94 67 10 	call	0x20ce	; 0x20ce <__ultoa_invert>
    1bfc:	88 2e       	mov	r8, r24
    1bfe:	86 18       	sub	r8, r6
    1c00:	45 c0       	rjmp	.+138    	; 0x1c8c <vfprintf+0x2ac>
    1c02:	85 37       	cpi	r24, 0x75	; 117
    1c04:	31 f4       	brne	.+12     	; 0x1c12 <vfprintf+0x232>
    1c06:	23 2d       	mov	r18, r3
    1c08:	2f 7e       	andi	r18, 0xEF	; 239
    1c0a:	b2 2e       	mov	r11, r18
    1c0c:	2a e0       	ldi	r18, 0x0A	; 10
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	25 c0       	rjmp	.+74     	; 0x1c5c <vfprintf+0x27c>
    1c12:	93 2d       	mov	r25, r3
    1c14:	99 7f       	andi	r25, 0xF9	; 249
    1c16:	b9 2e       	mov	r11, r25
    1c18:	8f 36       	cpi	r24, 0x6F	; 111
    1c1a:	c1 f0       	breq	.+48     	; 0x1c4c <vfprintf+0x26c>
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <vfprintf+0x244>
    1c1e:	88 35       	cpi	r24, 0x58	; 88
    1c20:	79 f0       	breq	.+30     	; 0x1c40 <vfprintf+0x260>
    1c22:	b5 c0       	rjmp	.+362    	; 0x1d8e <vfprintf+0x3ae>
    1c24:	80 37       	cpi	r24, 0x70	; 112
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <vfprintf+0x24e>
    1c28:	88 37       	cpi	r24, 0x78	; 120
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <vfprintf+0x254>
    1c2c:	b0 c0       	rjmp	.+352    	; 0x1d8e <vfprintf+0x3ae>
    1c2e:	e9 2f       	mov	r30, r25
    1c30:	e0 61       	ori	r30, 0x10	; 16
    1c32:	be 2e       	mov	r11, r30
    1c34:	b4 fe       	sbrs	r11, 4
    1c36:	0d c0       	rjmp	.+26     	; 0x1c52 <vfprintf+0x272>
    1c38:	fb 2d       	mov	r31, r11
    1c3a:	f4 60       	ori	r31, 0x04	; 4
    1c3c:	bf 2e       	mov	r11, r31
    1c3e:	09 c0       	rjmp	.+18     	; 0x1c52 <vfprintf+0x272>
    1c40:	34 fe       	sbrs	r3, 4
    1c42:	0a c0       	rjmp	.+20     	; 0x1c58 <vfprintf+0x278>
    1c44:	29 2f       	mov	r18, r25
    1c46:	26 60       	ori	r18, 0x06	; 6
    1c48:	b2 2e       	mov	r11, r18
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <vfprintf+0x278>
    1c4c:	28 e0       	ldi	r18, 0x08	; 8
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <vfprintf+0x27c>
    1c52:	20 e1       	ldi	r18, 0x10	; 16
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <vfprintf+0x27c>
    1c58:	20 e1       	ldi	r18, 0x10	; 16
    1c5a:	32 e0       	ldi	r19, 0x02	; 2
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	b7 fe       	sbrs	r11, 7
    1c60:	07 c0       	rjmp	.+14     	; 0x1c70 <vfprintf+0x290>
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	0c 5f       	subi	r16, 0xFC	; 252
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	06 c0       	rjmp	.+12     	; 0x1c7c <vfprintf+0x29c>
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 5f       	subi	r16, 0xFE	; 254
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	a3 01       	movw	r20, r6
    1c7e:	0e 94 67 10 	call	0x20ce	; 0x20ce <__ultoa_invert>
    1c82:	88 2e       	mov	r8, r24
    1c84:	86 18       	sub	r8, r6
    1c86:	fb 2d       	mov	r31, r11
    1c88:	ff 77       	andi	r31, 0x7F	; 127
    1c8a:	3f 2e       	mov	r3, r31
    1c8c:	36 fe       	sbrs	r3, 6
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <vfprintf+0x2ca>
    1c90:	23 2d       	mov	r18, r3
    1c92:	2e 7f       	andi	r18, 0xFE	; 254
    1c94:	a2 2e       	mov	r10, r18
    1c96:	89 14       	cp	r8, r9
    1c98:	58 f4       	brcc	.+22     	; 0x1cb0 <vfprintf+0x2d0>
    1c9a:	34 fe       	sbrs	r3, 4
    1c9c:	0b c0       	rjmp	.+22     	; 0x1cb4 <vfprintf+0x2d4>
    1c9e:	32 fc       	sbrc	r3, 2
    1ca0:	09 c0       	rjmp	.+18     	; 0x1cb4 <vfprintf+0x2d4>
    1ca2:	83 2d       	mov	r24, r3
    1ca4:	8e 7e       	andi	r24, 0xEE	; 238
    1ca6:	a8 2e       	mov	r10, r24
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0x2d4>
    1caa:	b8 2c       	mov	r11, r8
    1cac:	a3 2c       	mov	r10, r3
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <vfprintf+0x2d6>
    1cb0:	b8 2c       	mov	r11, r8
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <vfprintf+0x2d6>
    1cb4:	b9 2c       	mov	r11, r9
    1cb6:	a4 fe       	sbrs	r10, 4
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <vfprintf+0x2f8>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e8 0d       	add	r30, r8
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 33       	cpi	r24, 0x30	; 48
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <vfprintf+0x2ee>
    1cc6:	9a 2d       	mov	r25, r10
    1cc8:	99 7e       	andi	r25, 0xE9	; 233
    1cca:	a9 2e       	mov	r10, r25
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <vfprintf+0x300>
    1cce:	a2 fe       	sbrs	r10, 2
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <vfprintf+0x2fe>
    1cd2:	b3 94       	inc	r11
    1cd4:	b3 94       	inc	r11
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <vfprintf+0x300>
    1cd8:	8a 2d       	mov	r24, r10
    1cda:	86 78       	andi	r24, 0x86	; 134
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <vfprintf+0x300>
    1cde:	b3 94       	inc	r11
    1ce0:	a3 fc       	sbrc	r10, 3
    1ce2:	11 c0       	rjmp	.+34     	; 0x1d06 <vfprintf+0x326>
    1ce4:	a0 fe       	sbrs	r10, 0
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0x314>
    1ce8:	b2 14       	cp	r11, r2
    1cea:	88 f4       	brcc	.+34     	; 0x1d0e <vfprintf+0x32e>
    1cec:	28 0c       	add	r2, r8
    1cee:	92 2c       	mov	r9, r2
    1cf0:	9b 18       	sub	r9, r11
    1cf2:	0e c0       	rjmp	.+28     	; 0x1d10 <vfprintf+0x330>
    1cf4:	b2 14       	cp	r11, r2
    1cf6:	60 f4       	brcc	.+24     	; 0x1d10 <vfprintf+0x330>
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d02:	b3 94       	inc	r11
    1d04:	f7 cf       	rjmp	.-18     	; 0x1cf4 <vfprintf+0x314>
    1d06:	b2 14       	cp	r11, r2
    1d08:	18 f4       	brcc	.+6      	; 0x1d10 <vfprintf+0x330>
    1d0a:	2b 18       	sub	r2, r11
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x332>
    1d0e:	98 2c       	mov	r9, r8
    1d10:	21 2c       	mov	r2, r1
    1d12:	a4 fe       	sbrs	r10, 4
    1d14:	10 c0       	rjmp	.+32     	; 0x1d36 <vfprintf+0x356>
    1d16:	b6 01       	movw	r22, r12
    1d18:	80 e3       	ldi	r24, 0x30	; 48
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d20:	a2 fe       	sbrs	r10, 2
    1d22:	17 c0       	rjmp	.+46     	; 0x1d52 <vfprintf+0x372>
    1d24:	a1 fc       	sbrc	r10, 1
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <vfprintf+0x34e>
    1d28:	88 e7       	ldi	r24, 0x78	; 120
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <vfprintf+0x352>
    1d2e:	88 e5       	ldi	r24, 0x58	; 88
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	b6 01       	movw	r22, r12
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <vfprintf+0x36e>
    1d36:	8a 2d       	mov	r24, r10
    1d38:	86 78       	andi	r24, 0x86	; 134
    1d3a:	59 f0       	breq	.+22     	; 0x1d52 <vfprintf+0x372>
    1d3c:	a1 fe       	sbrs	r10, 1
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <vfprintf+0x364>
    1d40:	8b e2       	ldi	r24, 0x2B	; 43
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <vfprintf+0x366>
    1d44:	80 e2       	ldi	r24, 0x20	; 32
    1d46:	a7 fc       	sbrc	r10, 7
    1d48:	8d e2       	ldi	r24, 0x2D	; 45
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d52:	89 14       	cp	r8, r9
    1d54:	38 f4       	brcc	.+14     	; 0x1d64 <vfprintf+0x384>
    1d56:	b6 01       	movw	r22, r12
    1d58:	80 e3       	ldi	r24, 0x30	; 48
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d60:	9a 94       	dec	r9
    1d62:	f7 cf       	rjmp	.-18     	; 0x1d52 <vfprintf+0x372>
    1d64:	8a 94       	dec	r8
    1d66:	f3 01       	movw	r30, r6
    1d68:	e8 0d       	add	r30, r8
    1d6a:	f1 1d       	adc	r31, r1
    1d6c:	80 81       	ld	r24, Z
    1d6e:	b6 01       	movw	r22, r12
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d76:	81 10       	cpse	r8, r1
    1d78:	f5 cf       	rjmp	.-22     	; 0x1d64 <vfprintf+0x384>
    1d7a:	22 20       	and	r2, r2
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <vfprintf+0x3a0>
    1d7e:	42 ce       	rjmp	.-892    	; 0x1a04 <vfprintf+0x24>
    1d80:	b6 01       	movw	r22, r12
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d8a:	2a 94       	dec	r2
    1d8c:	f6 cf       	rjmp	.-20     	; 0x1d7a <vfprintf+0x39a>
    1d8e:	f6 01       	movw	r30, r12
    1d90:	86 81       	ldd	r24, Z+6	; 0x06
    1d92:	97 81       	ldd	r25, Z+7	; 0x07
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <vfprintf+0x3ba>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	9f ef       	ldi	r25, 0xFF	; 255
    1d9a:	2b 96       	adiw	r28, 0x0b	; 11
    1d9c:	e2 e1       	ldi	r30, 0x12	; 18
    1d9e:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__epilogue_restores__>

00001da2 <calloc>:
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	86 9f       	mul	r24, r22
    1dac:	80 01       	movw	r16, r0
    1dae:	87 9f       	mul	r24, r23
    1db0:	10 0d       	add	r17, r0
    1db2:	96 9f       	mul	r25, r22
    1db4:	10 0d       	add	r17, r0
    1db6:	11 24       	eor	r1, r1
    1db8:	c8 01       	movw	r24, r16
    1dba:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <malloc>
    1dbe:	ec 01       	movw	r28, r24
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	29 f0       	breq	.+10     	; 0x1dce <calloc+0x2c>
    1dc4:	a8 01       	movw	r20, r16
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	0e 94 19 10 	call	0x2032	; 0x2032 <memset>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <malloc>:
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	91 05       	cpc	r25, r1
    1de6:	10 f4       	brcc	.+4      	; 0x1dec <malloc+0x12>
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <__flp>
    1df0:	f0 91 ae 03 	lds	r31, 0x03AE	; 0x8003ae <__flp+0x1>
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	30 97       	sbiw	r30, 0x00	; 0
    1dfe:	19 f1       	breq	.+70     	; 0x1e46 <malloc+0x6c>
    1e00:	40 81       	ld	r20, Z
    1e02:	51 81       	ldd	r21, Z+1	; 0x01
    1e04:	02 81       	ldd	r16, Z+2	; 0x02
    1e06:	13 81       	ldd	r17, Z+3	; 0x03
    1e08:	48 17       	cp	r20, r24
    1e0a:	59 07       	cpc	r21, r25
    1e0c:	c8 f0       	brcs	.+50     	; 0x1e40 <malloc+0x66>
    1e0e:	84 17       	cp	r24, r20
    1e10:	95 07       	cpc	r25, r21
    1e12:	69 f4       	brne	.+26     	; 0x1e2e <malloc+0x54>
    1e14:	10 97       	sbiw	r26, 0x00	; 0
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <malloc+0x4a>
    1e18:	12 96       	adiw	r26, 0x02	; 2
    1e1a:	0c 93       	st	X, r16
    1e1c:	12 97       	sbiw	r26, 0x02	; 2
    1e1e:	13 96       	adiw	r26, 0x03	; 3
    1e20:	1c 93       	st	X, r17
    1e22:	27 c0       	rjmp	.+78     	; 0x1e72 <malloc+0x98>
    1e24:	00 93 ad 03 	sts	0x03AD, r16	; 0x8003ad <__flp>
    1e28:	10 93 ae 03 	sts	0x03AE, r17	; 0x8003ae <__flp+0x1>
    1e2c:	22 c0       	rjmp	.+68     	; 0x1e72 <malloc+0x98>
    1e2e:	21 15       	cp	r18, r1
    1e30:	31 05       	cpc	r19, r1
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <malloc+0x60>
    1e34:	42 17       	cp	r20, r18
    1e36:	53 07       	cpc	r21, r19
    1e38:	18 f4       	brcc	.+6      	; 0x1e40 <malloc+0x66>
    1e3a:	9a 01       	movw	r18, r20
    1e3c:	bd 01       	movw	r22, r26
    1e3e:	ef 01       	movw	r28, r30
    1e40:	df 01       	movw	r26, r30
    1e42:	f8 01       	movw	r30, r16
    1e44:	db cf       	rjmp	.-74     	; 0x1dfc <malloc+0x22>
    1e46:	21 15       	cp	r18, r1
    1e48:	31 05       	cpc	r19, r1
    1e4a:	f9 f0       	breq	.+62     	; 0x1e8a <malloc+0xb0>
    1e4c:	28 1b       	sub	r18, r24
    1e4e:	39 0b       	sbc	r19, r25
    1e50:	24 30       	cpi	r18, 0x04	; 4
    1e52:	31 05       	cpc	r19, r1
    1e54:	80 f4       	brcc	.+32     	; 0x1e76 <malloc+0x9c>
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	61 15       	cp	r22, r1
    1e5c:	71 05       	cpc	r23, r1
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <malloc+0x8e>
    1e60:	fb 01       	movw	r30, r22
    1e62:	93 83       	std	Z+3, r25	; 0x03
    1e64:	82 83       	std	Z+2, r24	; 0x02
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <malloc+0x96>
    1e68:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <__flp+0x1>
    1e6c:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <__flp>
    1e70:	fe 01       	movw	r30, r28
    1e72:	32 96       	adiw	r30, 0x02	; 2
    1e74:	44 c0       	rjmp	.+136    	; 0x1efe <malloc+0x124>
    1e76:	fe 01       	movw	r30, r28
    1e78:	e2 0f       	add	r30, r18
    1e7a:	f3 1f       	adc	r31, r19
    1e7c:	81 93       	st	Z+, r24
    1e7e:	91 93       	st	Z+, r25
    1e80:	22 50       	subi	r18, 0x02	; 2
    1e82:	31 09       	sbc	r19, r1
    1e84:	39 83       	std	Y+1, r19	; 0x01
    1e86:	28 83       	st	Y, r18
    1e88:	3a c0       	rjmp	.+116    	; 0x1efe <malloc+0x124>
    1e8a:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <__brkval>
    1e8e:	30 91 ac 03 	lds	r19, 0x03AC	; 0x8003ac <__brkval+0x1>
    1e92:	23 2b       	or	r18, r19
    1e94:	41 f4       	brne	.+16     	; 0x1ea6 <malloc+0xcc>
    1e96:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1e9a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1e9e:	30 93 ac 03 	sts	0x03AC, r19	; 0x8003ac <__brkval+0x1>
    1ea2:	20 93 ab 03 	sts	0x03AB, r18	; 0x8003ab <__brkval>
    1ea6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1eaa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1eae:	21 15       	cp	r18, r1
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	41 f4       	brne	.+16     	; 0x1ec4 <malloc+0xea>
    1eb4:	2d b7       	in	r18, 0x3d	; 61
    1eb6:	3e b7       	in	r19, 0x3e	; 62
    1eb8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1ebc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ec0:	24 1b       	sub	r18, r20
    1ec2:	35 0b       	sbc	r19, r21
    1ec4:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <__brkval>
    1ec8:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <__brkval+0x1>
    1ecc:	e2 17       	cp	r30, r18
    1ece:	f3 07       	cpc	r31, r19
    1ed0:	a0 f4       	brcc	.+40     	; 0x1efa <malloc+0x120>
    1ed2:	2e 1b       	sub	r18, r30
    1ed4:	3f 0b       	sbc	r19, r31
    1ed6:	28 17       	cp	r18, r24
    1ed8:	39 07       	cpc	r19, r25
    1eda:	78 f0       	brcs	.+30     	; 0x1efa <malloc+0x120>
    1edc:	ac 01       	movw	r20, r24
    1ede:	4e 5f       	subi	r20, 0xFE	; 254
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	24 17       	cp	r18, r20
    1ee4:	35 07       	cpc	r19, r21
    1ee6:	48 f0       	brcs	.+18     	; 0x1efa <malloc+0x120>
    1ee8:	4e 0f       	add	r20, r30
    1eea:	5f 1f       	adc	r21, r31
    1eec:	50 93 ac 03 	sts	0x03AC, r21	; 0x8003ac <__brkval+0x1>
    1ef0:	40 93 ab 03 	sts	0x03AB, r20	; 0x8003ab <__brkval>
    1ef4:	81 93       	st	Z+, r24
    1ef6:	91 93       	st	Z+, r25
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <malloc+0x124>
    1efa:	e0 e0       	ldi	r30, 0x00	; 0
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	cf 01       	movw	r24, r30
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <free>:
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <free+0xa>
    1f12:	81 c0       	rjmp	.+258    	; 0x2016 <free+0x10c>
    1f14:	fc 01       	movw	r30, r24
    1f16:	32 97       	sbiw	r30, 0x02	; 2
    1f18:	13 82       	std	Z+3, r1	; 0x03
    1f1a:	12 82       	std	Z+2, r1	; 0x02
    1f1c:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <__flp>
    1f20:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <__flp+0x1>
    1f24:	10 97       	sbiw	r26, 0x00	; 0
    1f26:	81 f4       	brne	.+32     	; 0x1f48 <free+0x3e>
    1f28:	20 81       	ld	r18, Z
    1f2a:	31 81       	ldd	r19, Z+1	; 0x01
    1f2c:	82 0f       	add	r24, r18
    1f2e:	93 1f       	adc	r25, r19
    1f30:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <__brkval>
    1f34:	30 91 ac 03 	lds	r19, 0x03AC	; 0x8003ac <__brkval+0x1>
    1f38:	28 17       	cp	r18, r24
    1f3a:	39 07       	cpc	r19, r25
    1f3c:	51 f5       	brne	.+84     	; 0x1f92 <free+0x88>
    1f3e:	f0 93 ac 03 	sts	0x03AC, r31	; 0x8003ac <__brkval+0x1>
    1f42:	e0 93 ab 03 	sts	0x03AB, r30	; 0x8003ab <__brkval>
    1f46:	67 c0       	rjmp	.+206    	; 0x2016 <free+0x10c>
    1f48:	ed 01       	movw	r28, r26
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	ce 17       	cp	r28, r30
    1f50:	df 07       	cpc	r29, r31
    1f52:	40 f4       	brcc	.+16     	; 0x1f64 <free+0x5a>
    1f54:	4a 81       	ldd	r20, Y+2	; 0x02
    1f56:	5b 81       	ldd	r21, Y+3	; 0x03
    1f58:	9e 01       	movw	r18, r28
    1f5a:	41 15       	cp	r20, r1
    1f5c:	51 05       	cpc	r21, r1
    1f5e:	f1 f0       	breq	.+60     	; 0x1f9c <free+0x92>
    1f60:	ea 01       	movw	r28, r20
    1f62:	f5 cf       	rjmp	.-22     	; 0x1f4e <free+0x44>
    1f64:	d3 83       	std	Z+3, r29	; 0x03
    1f66:	c2 83       	std	Z+2, r28	; 0x02
    1f68:	40 81       	ld	r20, Z
    1f6a:	51 81       	ldd	r21, Z+1	; 0x01
    1f6c:	84 0f       	add	r24, r20
    1f6e:	95 1f       	adc	r25, r21
    1f70:	c8 17       	cp	r28, r24
    1f72:	d9 07       	cpc	r29, r25
    1f74:	59 f4       	brne	.+22     	; 0x1f8c <free+0x82>
    1f76:	88 81       	ld	r24, Y
    1f78:	99 81       	ldd	r25, Y+1	; 0x01
    1f7a:	84 0f       	add	r24, r20
    1f7c:	95 1f       	adc	r25, r21
    1f7e:	02 96       	adiw	r24, 0x02	; 2
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	93 83       	std	Z+3, r25	; 0x03
    1f8a:	82 83       	std	Z+2, r24	; 0x02
    1f8c:	21 15       	cp	r18, r1
    1f8e:	31 05       	cpc	r19, r1
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <free+0x92>
    1f92:	f0 93 ae 03 	sts	0x03AE, r31	; 0x8003ae <__flp+0x1>
    1f96:	e0 93 ad 03 	sts	0x03AD, r30	; 0x8003ad <__flp>
    1f9a:	3d c0       	rjmp	.+122    	; 0x2016 <free+0x10c>
    1f9c:	e9 01       	movw	r28, r18
    1f9e:	fb 83       	std	Y+3, r31	; 0x03
    1fa0:	ea 83       	std	Y+2, r30	; 0x02
    1fa2:	49 91       	ld	r20, Y+
    1fa4:	59 91       	ld	r21, Y+
    1fa6:	c4 0f       	add	r28, r20
    1fa8:	d5 1f       	adc	r29, r21
    1faa:	ec 17       	cp	r30, r28
    1fac:	fd 07       	cpc	r31, r29
    1fae:	61 f4       	brne	.+24     	; 0x1fc8 <free+0xbe>
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	84 0f       	add	r24, r20
    1fb6:	95 1f       	adc	r25, r21
    1fb8:	02 96       	adiw	r24, 0x02	; 2
    1fba:	e9 01       	movw	r28, r18
    1fbc:	99 83       	std	Y+1, r25	; 0x01
    1fbe:	88 83       	st	Y, r24
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	e0 e0       	ldi	r30, 0x00	; 0
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	12 96       	adiw	r26, 0x02	; 2
    1fce:	8d 91       	ld	r24, X+
    1fd0:	9c 91       	ld	r25, X
    1fd2:	13 97       	sbiw	r26, 0x03	; 3
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <free+0xd4>
    1fd8:	fd 01       	movw	r30, r26
    1fda:	dc 01       	movw	r26, r24
    1fdc:	f7 cf       	rjmp	.-18     	; 0x1fcc <free+0xc2>
    1fde:	8d 91       	ld	r24, X+
    1fe0:	9c 91       	ld	r25, X
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	9d 01       	movw	r18, r26
    1fe6:	2e 5f       	subi	r18, 0xFE	; 254
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
    1fee:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <__brkval>
    1ff2:	30 91 ac 03 	lds	r19, 0x03AC	; 0x8003ac <__brkval+0x1>
    1ff6:	28 17       	cp	r18, r24
    1ff8:	39 07       	cpc	r19, r25
    1ffa:	69 f4       	brne	.+26     	; 0x2016 <free+0x10c>
    1ffc:	30 97       	sbiw	r30, 0x00	; 0
    1ffe:	29 f4       	brne	.+10     	; 0x200a <free+0x100>
    2000:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <__flp+0x1>
    2004:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <__flp>
    2008:	02 c0       	rjmp	.+4      	; 0x200e <free+0x104>
    200a:	13 82       	std	Z+3, r1	; 0x03
    200c:	12 82       	std	Z+2, r1	; 0x02
    200e:	b0 93 ac 03 	sts	0x03AC, r27	; 0x8003ac <__brkval+0x1>
    2012:	a0 93 ab 03 	sts	0x03AB, r26	; 0x8003ab <__brkval>
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	08 95       	ret

0000201c <strnlen_P>:
    201c:	fc 01       	movw	r30, r24
    201e:	05 90       	lpm	r0, Z+
    2020:	61 50       	subi	r22, 0x01	; 1
    2022:	70 40       	sbci	r23, 0x00	; 0
    2024:	01 10       	cpse	r0, r1
    2026:	d8 f7       	brcc	.-10     	; 0x201e <strnlen_P+0x2>
    2028:	80 95       	com	r24
    202a:	90 95       	com	r25
    202c:	8e 0f       	add	r24, r30
    202e:	9f 1f       	adc	r25, r31
    2030:	08 95       	ret

00002032 <memset>:
    2032:	dc 01       	movw	r26, r24
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <memset+0x6>
    2036:	6d 93       	st	X+, r22
    2038:	41 50       	subi	r20, 0x01	; 1
    203a:	50 40       	sbci	r21, 0x00	; 0
    203c:	e0 f7       	brcc	.-8      	; 0x2036 <memset+0x4>
    203e:	08 95       	ret

00002040 <strnlen>:
    2040:	fc 01       	movw	r30, r24
    2042:	61 50       	subi	r22, 0x01	; 1
    2044:	70 40       	sbci	r23, 0x00	; 0
    2046:	01 90       	ld	r0, Z+
    2048:	01 10       	cpse	r0, r1
    204a:	d8 f7       	brcc	.-10     	; 0x2042 <strnlen+0x2>
    204c:	80 95       	com	r24
    204e:	90 95       	com	r25
    2050:	8e 0f       	add	r24, r30
    2052:	9f 1f       	adc	r25, r31
    2054:	08 95       	ret

00002056 <fputc>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	fb 01       	movw	r30, r22
    2060:	23 81       	ldd	r18, Z+3	; 0x03
    2062:	21 fd       	sbrc	r18, 1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <fputc+0x16>
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	9f ef       	ldi	r25, 0xFF	; 255
    206a:	2c c0       	rjmp	.+88     	; 0x20c4 <fputc+0x6e>
    206c:	22 ff       	sbrs	r18, 2
    206e:	16 c0       	rjmp	.+44     	; 0x209c <fputc+0x46>
    2070:	46 81       	ldd	r20, Z+6	; 0x06
    2072:	57 81       	ldd	r21, Z+7	; 0x07
    2074:	24 81       	ldd	r18, Z+4	; 0x04
    2076:	35 81       	ldd	r19, Z+5	; 0x05
    2078:	42 17       	cp	r20, r18
    207a:	53 07       	cpc	r21, r19
    207c:	44 f4       	brge	.+16     	; 0x208e <fputc+0x38>
    207e:	a0 81       	ld	r26, Z
    2080:	b1 81       	ldd	r27, Z+1	; 0x01
    2082:	9d 01       	movw	r18, r26
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	31 83       	std	Z+1, r19	; 0x01
    208a:	20 83       	st	Z, r18
    208c:	8c 93       	st	X, r24
    208e:	26 81       	ldd	r18, Z+6	; 0x06
    2090:	37 81       	ldd	r19, Z+7	; 0x07
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	37 83       	std	Z+7, r19	; 0x07
    2098:	26 83       	std	Z+6, r18	; 0x06
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <fputc+0x6e>
    209c:	8b 01       	movw	r16, r22
    209e:	ec 01       	movw	r28, r24
    20a0:	fb 01       	movw	r30, r22
    20a2:	00 84       	ldd	r0, Z+8	; 0x08
    20a4:	f1 85       	ldd	r31, Z+9	; 0x09
    20a6:	e0 2d       	mov	r30, r0
    20a8:	09 95       	icall
    20aa:	89 2b       	or	r24, r25
    20ac:	e1 f6       	brne	.-72     	; 0x2066 <fputc+0x10>
    20ae:	d8 01       	movw	r26, r16
    20b0:	16 96       	adiw	r26, 0x06	; 6
    20b2:	8d 91       	ld	r24, X+
    20b4:	9c 91       	ld	r25, X
    20b6:	17 97       	sbiw	r26, 0x07	; 7
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	17 96       	adiw	r26, 0x07	; 7
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	16 97       	sbiw	r26, 0x06	; 6
    20c2:	ce 01       	movw	r24, r28
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <__ultoa_invert>:
    20ce:	fa 01       	movw	r30, r20
    20d0:	aa 27       	eor	r26, r26
    20d2:	28 30       	cpi	r18, 0x08	; 8
    20d4:	51 f1       	breq	.+84     	; 0x212a <__ultoa_invert+0x5c>
    20d6:	20 31       	cpi	r18, 0x10	; 16
    20d8:	81 f1       	breq	.+96     	; 0x213a <__ultoa_invert+0x6c>
    20da:	e8 94       	clt
    20dc:	6f 93       	push	r22
    20de:	6e 7f       	andi	r22, 0xFE	; 254
    20e0:	6e 5f       	subi	r22, 0xFE	; 254
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	8f 4f       	sbci	r24, 0xFF	; 255
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	af 4f       	sbci	r26, 0xFF	; 255
    20ea:	b1 e0       	ldi	r27, 0x01	; 1
    20ec:	3e d0       	rcall	.+124    	; 0x216a <__ultoa_invert+0x9c>
    20ee:	b4 e0       	ldi	r27, 0x04	; 4
    20f0:	3c d0       	rcall	.+120    	; 0x216a <__ultoa_invert+0x9c>
    20f2:	67 0f       	add	r22, r23
    20f4:	78 1f       	adc	r23, r24
    20f6:	89 1f       	adc	r24, r25
    20f8:	9a 1f       	adc	r25, r26
    20fa:	a1 1d       	adc	r26, r1
    20fc:	68 0f       	add	r22, r24
    20fe:	79 1f       	adc	r23, r25
    2100:	8a 1f       	adc	r24, r26
    2102:	91 1d       	adc	r25, r1
    2104:	a1 1d       	adc	r26, r1
    2106:	6a 0f       	add	r22, r26
    2108:	71 1d       	adc	r23, r1
    210a:	81 1d       	adc	r24, r1
    210c:	91 1d       	adc	r25, r1
    210e:	a1 1d       	adc	r26, r1
    2110:	20 d0       	rcall	.+64     	; 0x2152 <__ultoa_invert+0x84>
    2112:	09 f4       	brne	.+2      	; 0x2116 <__ultoa_invert+0x48>
    2114:	68 94       	set
    2116:	3f 91       	pop	r19
    2118:	2a e0       	ldi	r18, 0x0A	; 10
    211a:	26 9f       	mul	r18, r22
    211c:	11 24       	eor	r1, r1
    211e:	30 19       	sub	r19, r0
    2120:	30 5d       	subi	r19, 0xD0	; 208
    2122:	31 93       	st	Z+, r19
    2124:	de f6       	brtc	.-74     	; 0x20dc <__ultoa_invert+0xe>
    2126:	cf 01       	movw	r24, r30
    2128:	08 95       	ret
    212a:	46 2f       	mov	r20, r22
    212c:	47 70       	andi	r20, 0x07	; 7
    212e:	40 5d       	subi	r20, 0xD0	; 208
    2130:	41 93       	st	Z+, r20
    2132:	b3 e0       	ldi	r27, 0x03	; 3
    2134:	0f d0       	rcall	.+30     	; 0x2154 <__ultoa_invert+0x86>
    2136:	c9 f7       	brne	.-14     	; 0x212a <__ultoa_invert+0x5c>
    2138:	f6 cf       	rjmp	.-20     	; 0x2126 <__ultoa_invert+0x58>
    213a:	46 2f       	mov	r20, r22
    213c:	4f 70       	andi	r20, 0x0F	; 15
    213e:	40 5d       	subi	r20, 0xD0	; 208
    2140:	4a 33       	cpi	r20, 0x3A	; 58
    2142:	18 f0       	brcs	.+6      	; 0x214a <__ultoa_invert+0x7c>
    2144:	49 5d       	subi	r20, 0xD9	; 217
    2146:	31 fd       	sbrc	r19, 1
    2148:	40 52       	subi	r20, 0x20	; 32
    214a:	41 93       	st	Z+, r20
    214c:	02 d0       	rcall	.+4      	; 0x2152 <__ultoa_invert+0x84>
    214e:	a9 f7       	brne	.-22     	; 0x213a <__ultoa_invert+0x6c>
    2150:	ea cf       	rjmp	.-44     	; 0x2126 <__ultoa_invert+0x58>
    2152:	b4 e0       	ldi	r27, 0x04	; 4
    2154:	a6 95       	lsr	r26
    2156:	97 95       	ror	r25
    2158:	87 95       	ror	r24
    215a:	77 95       	ror	r23
    215c:	67 95       	ror	r22
    215e:	ba 95       	dec	r27
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__ultoa_invert+0x86>
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	61 05       	cpc	r22, r1
    2166:	71 05       	cpc	r23, r1
    2168:	08 95       	ret
    216a:	9b 01       	movw	r18, r22
    216c:	ac 01       	movw	r20, r24
    216e:	0a 2e       	mov	r0, r26
    2170:	06 94       	lsr	r0
    2172:	57 95       	ror	r21
    2174:	47 95       	ror	r20
    2176:	37 95       	ror	r19
    2178:	27 95       	ror	r18
    217a:	ba 95       	dec	r27
    217c:	c9 f7       	brne	.-14     	; 0x2170 <__ultoa_invert+0xa2>
    217e:	62 0f       	add	r22, r18
    2180:	73 1f       	adc	r23, r19
    2182:	84 1f       	adc	r24, r20
    2184:	95 1f       	adc	r25, r21
    2186:	a0 1d       	adc	r26, r0
    2188:	08 95       	ret

0000218a <__prologue_saves__>:
    218a:	2f 92       	push	r2
    218c:	3f 92       	push	r3
    218e:	4f 92       	push	r4
    2190:	5f 92       	push	r5
    2192:	6f 92       	push	r6
    2194:	7f 92       	push	r7
    2196:	8f 92       	push	r8
    2198:	9f 92       	push	r9
    219a:	af 92       	push	r10
    219c:	bf 92       	push	r11
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	ca 1b       	sub	r28, r26
    21b4:	db 0b       	sbc	r29, r27
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	09 94       	ijmp

000021c2 <__epilogue_restores__>:
    21c2:	2a 88       	ldd	r2, Y+18	; 0x12
    21c4:	39 88       	ldd	r3, Y+17	; 0x11
    21c6:	48 88       	ldd	r4, Y+16	; 0x10
    21c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    21cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    21ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d4:	b9 84       	ldd	r11, Y+9	; 0x09
    21d6:	c8 84       	ldd	r12, Y+8	; 0x08
    21d8:	df 80       	ldd	r13, Y+7	; 0x07
    21da:	ee 80       	ldd	r14, Y+6	; 0x06
    21dc:	fd 80       	ldd	r15, Y+5	; 0x05
    21de:	0c 81       	ldd	r16, Y+4	; 0x04
    21e0:	1b 81       	ldd	r17, Y+3	; 0x03
    21e2:	aa 81       	ldd	r26, Y+2	; 0x02
    21e4:	b9 81       	ldd	r27, Y+1	; 0x01
    21e6:	ce 0f       	add	r28, r30
    21e8:	d1 1d       	adc	r29, r1
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	ed 01       	movw	r28, r26
    21f6:	08 95       	ret

000021f8 <_exit>:
    21f8:	f8 94       	cli

000021fa <__stop_program>:
    21fa:	ff cf       	rjmp	.-2      	; 0x21fa <__stop_program>
