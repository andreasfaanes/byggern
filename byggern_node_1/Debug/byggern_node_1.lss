
byggern_node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023e  00800100  0000202c  000020c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000202c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080033e  0080033e  000022fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000235c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a0f  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000153a  00000000  00000000  000060ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f7  00000000  00000000  00007629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a8  00000000  00000000  00008f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c16  00000000  00000000  000096c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c12  00000000  00000000  0000a2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000bef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 03 	jmp	0x776	; 0x776 <__ctors_end>
       4:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_1>
       8:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
       c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      10:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      14:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      18:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      1c:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_7>
      20:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      24:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      28:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      2c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      30:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      34:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      38:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      3c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      40:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      44:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__vector_17>
      48:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      4c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      50:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      54:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      58:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      5c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      60:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      64:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      68:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      6c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      70:	62 05       	cpc	r22, r2
      72:	72 05       	cpc	r23, r2
      74:	b3 05       	cpc	r27, r3
      76:	04 06       	cpc	r0, r20
      78:	ff 05       	cpc	r31, r15
      7a:	34 06       	cpc	r3, r20
      7c:	41 06       	cpc	r4, r17

0000007e <__trampolines_end>:
	...
      b2:	00 00       	nop
      b4:	00 e0       	ldi	r16, 0x00	; 0
      b6:	f0 f0       	brcs	.+60     	; 0xf4 <__trampolines_end+0x76>
      b8:	f8 f8       	.word	0xf8f8	; ????
      ba:	f8 fc       	.word	0xfcf8	; ????
      bc:	fc fe       	.word	0xfefc	; ????
      be:	ff ff       	.word	0xffff	; ????
      c0:	ff ff       	.word	0xffff	; ????
      c2:	ff ff       	.word	0xffff	; ????
      c4:	ff ff       	.word	0xffff	; ????
      c6:	ff ff       	.word	0xffff	; ????
      c8:	ff ff       	.word	0xffff	; ????
      ca:	ff ff       	.word	0xffff	; ????
      cc:	ff ff       	.word	0xffff	; ????
      ce:	ff ff       	.word	0xffff	; ????
      d0:	ff ff       	.word	0xffff	; ????
      d2:	fe fe       	.word	0xfefe	; ????
      d4:	fc fc       	.word	0xfcfc	; ????
      d6:	f8 f0       	brcs	.+62     	; 0x116 <__trampolines_end+0x98>
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	c0 c0       	rjmp	.+384    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
      dc:	80 80       	ld	r8, Z
	...
     132:	00 28       	or	r0, r0
     134:	ff ff       	.word	0xffff	; ????
     136:	ff ff       	.word	0xffff	; ????
     138:	ff ff       	.word	0xffff	; ????
     13a:	ff ff       	.word	0xffff	; ????
     13c:	ff ff       	.word	0xffff	; ????
     13e:	ff 7f       	andi	r31, 0xFF	; 255
     140:	7f 7f       	andi	r23, 0xFF	; 255
     142:	ff ff       	.word	0xffff	; ????
     144:	ff ff       	.word	0xffff	; ????
     146:	ff ff       	.word	0xffff	; ????
     148:	ff ff       	.word	0xffff	; ????
     14a:	ff ff       	.word	0xffff	; ????
     14c:	ff ff       	.word	0xffff	; ????
     14e:	ff ff       	.word	0xffff	; ????
     150:	ff ff       	.word	0xffff	; ????
     152:	ff ff       	.word	0xffff	; ????
     154:	ff ff       	.word	0xffff	; ????
     156:	ff ff       	.word	0xffff	; ????
     158:	ff ff       	.word	0xffff	; ????
     15a:	ff ff       	.word	0xffff	; ????
     15c:	ff ff       	.word	0xffff	; ????
     15e:	ff fe       	.word	0xfeff	; ????
     160:	fc f8       	.word	0xf8fc	; ????
     162:	f0 f0       	brcs	.+60     	; 0x1a0 <__trampolines_end+0x122>
     164:	c0 c0       	rjmp	.+384    	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
     166:	80 00       	.word	0x0080	; ????
	...
     1b4:	7f ff       	.word	0xff7f	; ????
     1b6:	ff ff       	.word	0xffff	; ????
     1b8:	ff ff       	.word	0xffff	; ????
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff f8       	.word	0xf8ff	; ????
     1be:	20 00       	.word	0x0020	; ????
     1c0:	40 00       	.word	0x0040	; ????
     1c2:	82 02       	muls	r24, r18
     1c4:	00 00       	nop
     1c6:	04 05       	cpc	r16, r4
     1c8:	05 25       	eor	r16, r5
     1ca:	27 27       	eor	r18, r23
     1cc:	27 6f       	ori	r18, 0xF7	; 247
     1ce:	6f 6f       	ori	r22, 0xFF	; 255
     1d0:	6f ef       	ldi	r22, 0xFF	; 255
     1d2:	df df       	rcall	.-66     	; 0x192 <__trampolines_end+0x114>
     1d4:	ff ff       	.word	0xffff	; ????
     1d6:	ff ff       	.word	0xffff	; ????
     1d8:	ff ff       	.word	0xffff	; ????
     1da:	ff ff       	.word	0xffff	; ????
     1dc:	ff ff       	.word	0xffff	; ????
     1de:	ff ff       	.word	0xffff	; ????
     1e0:	ff ff       	.word	0xffff	; ????
     1e2:	ff ff       	.word	0xffff	; ????
     1e4:	ff ff       	.word	0xffff	; ????
     1e6:	ff ff       	.word	0xffff	; ????
     1e8:	ff fe       	.word	0xfeff	; ????
     1ea:	f8 f0       	brcs	.+62     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
     1ec:	e0 c0       	rjmp	.+448    	; 0x3ae <__EEPROM_REGION_LENGTH__+0x1ae>
     1ee:	80 00       	.word	0x0080	; ????
	...
     234:	20 7f       	andi	r18, 0xF0	; 240
     236:	ff ff       	.word	0xffff	; ????
     238:	ff ff       	.word	0xffff	; ????
     23a:	ff ff       	.word	0xffff	; ????
     23c:	ff ff       	.word	0xffff	; ????
     23e:	fe f0       	brts	.+62     	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
     240:	fc 03       	fmulsu	r23, r20
	...
     24a:	88 c8       	rjmp	.-3824   	; 0xfffff35c <__eeprom_end+0xff7ef35c>
     24c:	fc fc       	.word	0xfcfc	; ????
     24e:	fc fe       	.word	0xfefc	; ????
     250:	fe fe       	.word	0xfefe	; ????
     252:	fe ff       	.word	0xfffe	; ????
     254:	ff ff       	.word	0xffff	; ????
     256:	ff ff       	.word	0xffff	; ????
     258:	ff ff       	.word	0xffff	; ????
     25a:	ff ff       	.word	0xffff	; ????
     25c:	ff df       	rcall	.-2      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
     25e:	df 9f       	mul	r29, r31
     260:	3f 3f       	cpi	r19, 0xFF	; 255
     262:	7f ff       	.word	0xff7f	; ????
     264:	ff ff       	.word	0xffff	; ????
     266:	ff ff       	.word	0xffff	; ????
     268:	ff ff       	.word	0xffff	; ????
     26a:	ff ff       	.word	0xffff	; ????
     26c:	ff ff       	.word	0xffff	; ????
     26e:	ff ff       	.word	0xffff	; ????
     270:	fc f0       	brlt	.+62     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
     272:	e0 80       	ld	r14, Z
	...
     2b4:	00 00       	nop
     2b6:	00 03       	mulsu	r16, r16
     2b8:	07 1f       	adc	r16, r23
     2ba:	7f ff       	.word	0xff7f	; ????
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
     2c0:	f9 18       	sub	r15, r9
     2c2:	00 00       	nop
     2c4:	00 00       	nop
     2c6:	18 fc       	.word	0xfc18	; ????
     2c8:	fe ff       	.word	0xfffe	; ????
     2ca:	ff ff       	.word	0xffff	; ????
     2cc:	ff ff       	.word	0xffff	; ????
     2ce:	ff ff       	.word	0xffff	; ????
     2d0:	ff ff       	.word	0xffff	; ????
     2d2:	ff ff       	.word	0xffff	; ????
     2d4:	f7 c3       	rjmp	.+2030   	; 0xac4 <Game_Machine+0x40>
     2d6:	07 83       	std	Z+7, r16	; 0x07
     2d8:	c3 c3       	rjmp	.+1926   	; 0xa60 <Can_Recieve_Msg+0x72>
     2da:	e3 f3       	brvs	.-8      	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>
     2dc:	f3 f3       	brvs	.-4      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
     2de:	ff ff       	.word	0xffff	; ????
     2e0:	ff 7c       	andi	r31, 0xCF	; 207
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	03 0f       	add	r16, r19
     2e8:	1f 7f       	andi	r17, 0xFF	; 255
     2ea:	ff ff       	.word	0xffff	; ????
     2ec:	ff ff       	.word	0xffff	; ????
     2ee:	ff ff       	.word	0xffff	; ????
     2f0:	ff ff       	.word	0xffff	; ????
     2f2:	ff ff       	.word	0xffff	; ????
     2f4:	10 00       	.word	0x0010	; ????
	...
     33a:	00 00       	nop
     33c:	01 03       	mulsu	r16, r17
     33e:	03 01       	movw	r0, r6
     340:	00 00       	nop
     342:	00 80       	ld	r0, Z
     344:	00 00       	nop
     346:	00 00       	nop
     348:	01 c3       	rjmp	.+1538   	; 0x94c <Can_Init+0x1a>
     34a:	ff ff       	.word	0xffff	; ????
     34c:	ff ff       	.word	0xffff	; ????
     34e:	ff ff       	.word	0xffff	; ????
     350:	ff ff       	.word	0xffff	; ????
     352:	ff ff       	.word	0xffff	; ????
     354:	ff ff       	.word	0xffff	; ????
     356:	e0 83       	st	Z, r30
     358:	ff ff       	.word	0xffff	; ????
     35a:	ff ff       	.word	0xffff	; ????
     35c:	ff 7f       	andi	r31, 0xFF	; 255
     35e:	1f 0f       	add	r17, r31
     360:	03 00       	.word	0x0003	; ????
	...
     36a:	01 ff       	sbrs	r16, 1
     36c:	ff ff       	.word	0xffff	; ????
     36e:	ff ff       	.word	0xffff	; ????
     370:	ff 3f       	cpi	r31, 0xFF	; 255
     372:	0f 01       	movw	r0, r30
	...
     3c4:	00 00       	nop
     3c6:	00 02       	muls	r16, r16
     3c8:	02 07       	cpc	r16, r18
     3ca:	07 0f       	add	r16, r23
     3cc:	0f 0f       	add	r16, r31
     3ce:	1f 1f       	adc	r17, r31
     3d0:	3f 7f       	andi	r19, 0xFF	; 255
     3d2:	7f ff       	.word	0xff7f	; ????
     3d4:	ff ff       	.word	0xffff	; ????
     3d6:	ff ff       	.word	0xffff	; ????
     3d8:	ff ff       	.word	0xffff	; ????
     3da:	1f 07       	cpc	r17, r31
     3dc:	01 00       	.word	0x0001	; ????
	...
     3e6:	00 00       	nop
     3e8:	c0 60       	ori	r28, 0x00	; 0
     3ea:	3c 1f       	adc	r19, r28
     3ec:	1f 0f       	add	r17, r31
     3ee:	07 03       	mulsu	r16, r23
     3f0:	01 00       	.word	0x0001	; ????
	...
     452:	00 00       	nop
     454:	00 01       	movw	r0, r0
     456:	01 01       	movw	r0, r2
     458:	03 03       	mulsu	r16, r19
	...
     466:	00 01       	movw	r0, r0
	...

0000047e <font8>:
	...
     486:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     496:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     4a6:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     4b6:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     4c6:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     4d6:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     4e6:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     4f6:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     506:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     516:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     526:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     536:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     546:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     556:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     566:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     576:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     586:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     596:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     5a6:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     5b6:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     5c6:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     5d6:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     5e6:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     5f6:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     606:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     616:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     626:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     636:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     646:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     656:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     666:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     676:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     686:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     696:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     6a6:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     6b6:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     6c6:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     6d6:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     6e6:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     6f6:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     706:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     716:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     726:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     736:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     746:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     756:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     766:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00000776 <__ctors_end>:
     776:	11 24       	eor	r1, r1
     778:	1f be       	out	0x3f, r1	; 63
     77a:	cf ef       	ldi	r28, 0xFF	; 255
     77c:	d4 e0       	ldi	r29, 0x04	; 4
     77e:	de bf       	out	0x3e, r29	; 62
     780:	cd bf       	out	0x3d, r28	; 61

00000782 <__do_copy_data>:
     782:	13 e0       	ldi	r17, 0x03	; 3
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b1 e0       	ldi	r27, 0x01	; 1
     788:	ec e2       	ldi	r30, 0x2C	; 44
     78a:	f0 e2       	ldi	r31, 0x20	; 32
     78c:	02 c0       	rjmp	.+4      	; 0x792 <__do_copy_data+0x10>
     78e:	05 90       	lpm	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	ae 33       	cpi	r26, 0x3E	; 62
     794:	b1 07       	cpc	r27, r17
     796:	d9 f7       	brne	.-10     	; 0x78e <__do_copy_data+0xc>

00000798 <__do_clear_bss>:
     798:	23 e0       	ldi	r18, 0x03	; 3
     79a:	ae e3       	ldi	r26, 0x3E	; 62
     79c:	b3 e0       	ldi	r27, 0x03	; 3
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <.do_clear_bss_start>

000007a0 <.do_clear_bss_loop>:
     7a0:	1d 92       	st	X+, r1

000007a2 <.do_clear_bss_start>:
     7a2:	a8 36       	cpi	r26, 0x68	; 104
     7a4:	b2 07       	cpc	r27, r18
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <.do_clear_bss_loop>
     7a8:	0e 94 07 04 	call	0x80e	; 0x80e <main>
     7ac:	0c 94 14 10 	jmp	0x2028	; 0x2028 <_exit>

000007b0 <__bad_interrupt>:
     7b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007b4 <can_check_message>:
#include "sources/include/usart.h"
#include "sources/include/timer.h"
#include "sources/include/can.h"
#include "sources/include/game.h"

void can_check_message(void){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	2a 97       	sbiw	r28, 0x0a	; 10
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
	can_data_t recived_data;
	recived_data.id = 0;
     7c8:	19 82       	std	Y+1, r1	; 0x01
	Can_Recieve_Msg(&recived_data);
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Can_Recieve_Msg>
	
	switch(recived_data.id){
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	80 31       	cpi	r24, 0x10	; 16
     7d6:	19 f0       	breq	.+6      	; 0x7de <can_check_message+0x2a>
     7d8:	81 31       	cpi	r24, 0x11	; 17
     7da:	49 f0       	breq	.+18     	; 0x7ee <can_check_message+0x3a>
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <can_check_message+0x48>
		case (14):
			break;
		case (15):
			break;
		case (16):// game over
			if (Get_Game_State() == IN_GAME)
     7de:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Get_Game_State>
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	59 f4       	brne	.+22     	; 0x7fc <can_check_message+0x48>
			{
				Set_Gamestate(END_GAME);
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	0e 94 55 06 	call	0xcaa	; 0xcaa <Set_Gamestate>
     7ec:	07 c0       	rjmp	.+14     	; 0x7fc <can_check_message+0x48>
			}
			break;
		case (17): // wait for calibrate to finish
			if (Get_Game_State() == CALIBRATE_WAIT)
     7ee:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Get_Game_State>
     7f2:	86 30       	cpi	r24, 0x06	; 6
     7f4:	19 f4       	brne	.+6      	; 0x7fc <can_check_message+0x48>
			{					
				Set_Gamestate(IN_MENU);				
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	0e 94 55 06 	call	0xcaa	; 0xcaa <Set_Gamestate>
			break;
		default:
			break;
		
	}
}
     7fc:	2a 96       	adiw	r28, 0x0a	; 10
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <main>:

int main(void)
{
	cli();
     80e:	f8 94       	cli
	USART_Init(MYUBRR);
     810:	8f e1       	ldi	r24, 0x1F	; 31
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 1b 08 	call	0x1036	; 0x1036 <USART_Init>
	printf("\n\n\rstart of program\n\r");
     818:	88 ea       	ldi	r24, 0xA8	; 168
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
	DDRD |=(1<<PIND5);
     824:	8d 9a       	sbi	0x11, 5	; 17
	
    Timer_Init();
     826:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <Timer_Init>
	Timer_3_off();
     82a:	0e 94 0a 08 	call	0x1014	; 0x1014 <Timer_3_off>
	
	User_Control_Init();
     82e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <User_Control_Init>
    Can_Init();
     832:	0e 94 99 04 	call	0x932	; 0x932 <Can_Init>
	
	printf("\n\rwaiting on node 1\n\r");
     836:	8e eb       	ldi	r24, 0xBE	; 190
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
	
	Node_One_Init();
     842:	0e 94 bd 0a 	call	0x157a	; 0x157a <Node_One_Init>

	Oled_Menu_Setup();
     846:	0e 94 98 08 	call	0x1130	; 0x1130 <Oled_Menu_Setup>
	
	sei();
     84a:	78 94       	sei
	Timer_3_on();
     84c:	0e 94 01 08 	call	0x1002	; 0x1002 <Timer_3_on>
	printf("\n\rinit done\n\r");
     850:	84 ed       	ldi	r24, 0xD4	; 212
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0

    while (1)
    {
		can_check_message();
     868:	0e 94 da 03 	call	0x7b4	; 0x7b4 <can_check_message>
		Oled_Update();
     86c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Oled_Update>
		Game_Machine();
     870:	0e 94 42 05 	call	0xa84	; 0xa84 <Game_Machine>
		Menu_Functionality();
     874:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Menu_Functionality>
     878:	f7 cf       	rjmp	.-18     	; 0x868 <main+0x5a>

0000087a <__vector_17>:
    }
}



ISR(TIMER0_OVF_vect){
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
	printf("timer 0 test ");
     89c:	82 ee       	ldi	r24, 0xE2	; 226
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
}
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <__vector_7>:

uint8_t program_counter = 0;

ISR(TIMER3_COMPA_vect){
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
	//{
	//	Menu_Functionality();
	//	program_counter = 0;
	//}

     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <Adc_Init>:
#include <avr/io.h>



void Adc_Init(){
	DDRE &= ~(1<<PINE0);
     8e2:	30 98       	cbi	0x06, 0	; 6
     8e4:	08 95       	ret

000008e6 <Adc_Read>:
}

uint8_t Adc_Read(uint8_t channel){
	volatile char *ext_adc = (char *) ADC_MEM_START;

	if (channel > 3){return -1;}
     8e6:	84 30       	cpi	r24, 0x04	; 4
     8e8:	40 f4       	brcc	.+16     	; 0x8fa <Adc_Read+0x14>

	//check if it works right!
	*ext_adc = 0x04|channel;
     8ea:	84 60       	ori	r24, 0x04	; 4
     8ec:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1098>

	while (TEST_BIT(PINE, PINE0));
     8f0:	28 99       	sbic	0x05, 0	; 5
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <Adc_Read+0xa>

	return *ext_adc;
     8f4:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1098>
     8f8:	08 95       	ret
}

uint8_t Adc_Read(uint8_t channel){
	volatile char *ext_adc = (char *) ADC_MEM_START;

	if (channel > 3){return -1;}
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
	*ext_adc = 0x04|channel;

	while (TEST_BIT(PINE, PINE0));

	return *ext_adc;
     8fc:	08 95       	ret

000008fe <Lunde_Byte>:

	for (i=0; i<5; i++)
	{
		OledCharacter[i] = pgm_read_byte(&(font5[t][i]));
	}
}
     8fe:	82 58       	subi	r24, 0x82	; 130
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	84 91       	lpm	r24, Z
     906:	08 95       	ret

00000908 <Ascii_to_Bitmap_Font8>:

void Ascii_to_Bitmap_Font8(char* OledCharacter, char AsciiCharacter){
     908:	e6 2f       	mov	r30, r22
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e2 58       	subi	r30, 0x82	; 130
     91a:	fc 4f       	sbci	r31, 0xFC	; 252
     91c:	dc 01       	movw	r26, r24
     91e:	9c 01       	movw	r18, r24
     920:	28 5f       	subi	r18, 0xF8	; 248
     922:	3f 4f       	sbci	r19, 0xFF	; 255
	int t;
	t = (int)AsciiCharacter-32;

	for (i=0; i<8; i++)
	{
		OledCharacter[i] = pgm_read_byte(&(font8[t][i]));
     924:	94 91       	lpm	r25, Z
     926:	9d 93       	st	X+, r25
     928:	31 96       	adiw	r30, 0x01	; 1

	int i;
	int t;
	t = (int)AsciiCharacter-32;

	for (i=0; i<8; i++)
     92a:	a2 17       	cp	r26, r18
     92c:	b3 07       	cpc	r27, r19
     92e:	d1 f7       	brne	.-12     	; 0x924 <Ascii_to_Bitmap_Font8+0x1c>
	{
		OledCharacter[i] = pgm_read_byte(&(font8[t][i]));
	}
}
     930:	08 95       	ret

00000932 <Can_Init>:
#include "include/MCP2515.h"
#include <avr/io.h>
#include <stdio.h>

void Can_Init(void){
	Spi_Init();
     932:	0e 94 cc 07 	call	0xf98	; 0xf98 <Spi_Init>
	Mcp_Reset();
     936:	0e 94 8a 06 	call	0xd14	; 0xd14 <Mcp_Reset>
	Mcp_Modify_Bit(MCP_CANCTRL,0xff,MODE_CONFIG);
     93a:	40 e8       	ldi	r20, 0x80	; 128
     93c:	6f ef       	ldi	r22, 0xFF	; 255
     93e:	8f e0       	ldi	r24, 0x0F	; 15
     940:	0e 94 92 06 	call	0xd24	; 0xd24 <Mcp_Modify_Bit>

	Mcp_Modify_Bit(MCP_RXB0CTRL,0x60,0xff);
     944:	4f ef       	ldi	r20, 0xFF	; 255
     946:	60 e6       	ldi	r22, 0x60	; 96
     948:	80 e6       	ldi	r24, 0x60	; 96
     94a:	0e 94 92 06 	call	0xd24	; 0xd24 <Mcp_Modify_Bit>

	Mcp_Modify_Bit(MCP_CANINTE,0x01,0x01);
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	8b e2       	ldi	r24, 0x2B	; 43
     954:	0e 94 92 06 	call	0xd24	; 0xd24 <Mcp_Modify_Bit>
	Mcp_Modify_Bit(MCP_CANCTRL, MODE_MASK,MODE_NORMAL);
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	60 ee       	ldi	r22, 0xE0	; 224
     95c:	8f e0       	ldi	r24, 0x0F	; 15
     95e:	0e 94 92 06 	call	0xd24	; 0xd24 <Mcp_Modify_Bit>

	DDRD &= ~(1<<PD2);
     962:	8a 98       	cbi	0x11, 2	; 17

	GICR |= (1 << INT0);
     964:	8b b7       	in	r24, 0x3b	; 59
     966:	80 64       	ori	r24, 0x40	; 64
     968:	8b bf       	out	0x3b, r24	; 59
     96a:	08 95       	ret

0000096c <Can_Send_Msg>:
}

void Can_Send_Msg(can_data_t* data){
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	8c 01       	movw	r16, r24
	Mcp_Write(MCP_TXB0SIDH,data->id / 0b1000);
     974:	fc 01       	movw	r30, r24
     976:	60 81       	ld	r22, Z
     978:	66 95       	lsr	r22
     97a:	66 95       	lsr	r22
     97c:	66 95       	lsr	r22
     97e:	81 e3       	ldi	r24, 0x31	; 49
     980:	0e 94 76 06 	call	0xcec	; 0xcec <Mcp_Write>
	Mcp_Write(MCP_TXB0SIDL,(data->id % 0b1000) << 5);
     984:	f8 01       	movw	r30, r16
     986:	60 81       	ld	r22, Z
     988:	f0 e2       	ldi	r31, 0x20	; 32
     98a:	6f 9f       	mul	r22, r31
     98c:	b0 01       	movw	r22, r0
     98e:	11 24       	eor	r1, r1
     990:	82 e3       	ldi	r24, 0x32	; 50
     992:	0e 94 76 06 	call	0xcec	; 0xcec <Mcp_Write>
	Mcp_Write(MCP_TXB0DLC,data->length);
     996:	f8 01       	movw	r30, r16
     998:	61 81       	ldd	r22, Z+1	; 0x01
     99a:	85 e3       	ldi	r24, 0x35	; 53
     99c:	0e 94 76 06 	call	0xcec	; 0xcec <Mcp_Write>
	printf("SENDT VALID MESSAGE id: %u\n\r", data->id);
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 81       	ld	r24, Z
     9a4:	1f 92       	push	r1
     9a6:	8f 93       	push	r24
     9a8:	80 ef       	ldi	r24, 0xF0	; 240
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
	for (uint8_t i = 0; i < data->length; i++)
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	f8 01       	movw	r30, r16
     9be:	81 81       	ldd	r24, Z+1	; 0x01
     9c0:	88 23       	and	r24, r24
     9c2:	71 f0       	breq	.+28     	; 0x9e0 <Can_Send_Msg+0x74>
     9c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Mcp_Write(MCP_TXB0D0+i,data->data[i]);
     9c6:	f8 01       	movw	r30, r16
     9c8:	ec 0f       	add	r30, r28
     9ca:	f1 1d       	adc	r31, r1
     9cc:	62 81       	ldd	r22, Z+2	; 0x02
     9ce:	86 e3       	ldi	r24, 0x36	; 54
     9d0:	8c 0f       	add	r24, r28
     9d2:	0e 94 76 06 	call	0xcec	; 0xcec <Mcp_Write>
void Can_Send_Msg(can_data_t* data){
	Mcp_Write(MCP_TXB0SIDH,data->id / 0b1000);
	Mcp_Write(MCP_TXB0SIDL,(data->id % 0b1000) << 5);
	Mcp_Write(MCP_TXB0DLC,data->length);
	printf("SENDT VALID MESSAGE id: %u\n\r", data->id);
	for (uint8_t i = 0; i < data->length; i++)
     9d6:	cf 5f       	subi	r28, 0xFF	; 255
     9d8:	f8 01       	movw	r30, r16
     9da:	81 81       	ldd	r24, Z+1	; 0x01
     9dc:	c8 17       	cp	r28, r24
     9de:	98 f3       	brcs	.-26     	; 0x9c6 <Can_Send_Msg+0x5a>
	{
		Mcp_Write(MCP_TXB0D0+i,data->data[i]);
	}
	
	Mcp_Request_to_Send(0); //1
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 ac 06 	call	0xd58	; 0xd58 <Mcp_Request_to_Send>
}
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <Can_Recieve_Msg>:

void Can_Recieve_Msg(can_data_t* data){
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	8c 01       	movw	r16, r24

	if (Mcp_Read(MCP_CANINTF) & 0x01){
     9f6:	8c e2       	ldi	r24, 0x2C	; 44
     9f8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Mcp_Read>
     9fc:	80 ff       	sbrs	r24, 0
     9fe:	37 c0       	rjmp	.+110    	; 0xa6e <Can_Recieve_Msg+0x80>
		
		uint8_t idhigh = Mcp_Read(MCP_RXB0SIDH);
     a00:	81 e6       	ldi	r24, 0x61	; 97
     a02:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Mcp_Read>
     a06:	c8 2f       	mov	r28, r24
		uint8_t idlow = Mcp_Read(MCP_RXB0SIDL);
     a08:	82 e6       	ldi	r24, 0x62	; 98
     a0a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Mcp_Read>
		data->id = (idhigh << 3)|(idlow >> 5);
     a0e:	cc 0f       	add	r28, r28
     a10:	cc 0f       	add	r28, r28
     a12:	cc 0f       	add	r28, r28
     a14:	82 95       	swap	r24
     a16:	86 95       	lsr	r24
     a18:	87 70       	andi	r24, 0x07	; 7
     a1a:	8c 2b       	or	r24, r28
     a1c:	f8 01       	movw	r30, r16
     a1e:	80 83       	st	Z, r24
		printf("VALID MESSAGE recieved with id: %u\n\r", data->id);
     a20:	1f 92       	push	r1
     a22:	8f 93       	push	r24
     a24:	8d e0       	ldi	r24, 0x0D	; 13
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
		data->length = Mcp_Read(MCP_RXB0DLC) & 0x0f;
     a30:	85 e6       	ldi	r24, 0x65	; 101
     a32:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Mcp_Read>
     a36:	8f 70       	andi	r24, 0x0F	; 15
     a38:	f8 01       	movw	r30, r16
     a3a:	81 83       	std	Z+1, r24	; 0x01

		for (uint8_t i = 0; i < data->length; i++)
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	88 23       	and	r24, r24
     a46:	71 f0       	breq	.+28     	; 0xa64 <Can_Recieve_Msg+0x76>
     a48:	c0 e0       	ldi	r28, 0x00	; 0
		{
			data->data[i] = Mcp_Read(MCP_RXB0D0+i);
     a4a:	86 e6       	ldi	r24, 0x66	; 102
     a4c:	8c 0f       	add	r24, r28
     a4e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Mcp_Read>
     a52:	f8 01       	movw	r30, r16
     a54:	ec 0f       	add	r30, r28
     a56:	f1 1d       	adc	r31, r1
     a58:	82 83       	std	Z+2, r24	; 0x02
		uint8_t idlow = Mcp_Read(MCP_RXB0SIDL);
		data->id = (idhigh << 3)|(idlow >> 5);
		printf("VALID MESSAGE recieved with id: %u\n\r", data->id);
		data->length = Mcp_Read(MCP_RXB0DLC) & 0x0f;

		for (uint8_t i = 0; i < data->length; i++)
     a5a:	cf 5f       	subi	r28, 0xFF	; 255
     a5c:	f8 01       	movw	r30, r16
     a5e:	81 81       	ldd	r24, Z+1	; 0x01
     a60:	c8 17       	cp	r28, r24
     a62:	98 f3       	brcs	.-26     	; 0xa4a <Can_Recieve_Msg+0x5c>
		{
			data->data[i] = Mcp_Read(MCP_RXB0D0+i);
		}
		Mcp_Modify_Bit(MCP_CANINTF, 0b01, 0);
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	8c e2       	ldi	r24, 0x2C	; 44
     a6a:	0e 94 92 06 	call	0xd24	; 0xd24 <Mcp_Modify_Bit>
	}
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <Ext_Mem_Init>:
#include <avr/io.h>
#include "include/settings.h"
#include "include/ext_mem.h"

void Ext_Mem_Init(){
	MCUCR |= (1<< SRE);
     a76:	85 b7       	in	r24, 0x35	; 53
     a78:	80 68       	ori	r24, 0x80	; 128
     a7a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
     a7c:	80 b7       	in	r24, 0x30	; 48
     a7e:	80 62       	ori	r24, 0x20	; 32
     a80:	80 bf       	out	0x30, r24	; 48
     a82:	08 95       	ret

00000a84 <Game_Machine>:
//////////////////////////////////////////////////////////////////////////


// main state machine for the game

void Game_Machine(void){
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	a8 97       	sbiw	r28, 0x28	; 40
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
	can_data_t calibrate_msg;
	uint16_t temp = 0;
	uint16_t temp2 = 0;
	uint8_t check = 0;
	start_game.id = 2;
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <start_game>
	switch(game_state){
     aaa:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <game_state>
     aae:	8e 2f       	mov	r24, r30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	87 30       	cpi	r24, 0x07	; 7
     ab4:	91 05       	cpc	r25, r1
     ab6:	08 f0       	brcs	.+2      	; 0xaba <Game_Machine+0x36>
     ab8:	e9 c0       	rjmp	.+466    	; 0xc8c <Game_Machine+0x208>
     aba:	fc 01       	movw	r30, r24
     abc:	e8 5c       	subi	r30, 0xC8	; 200
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__tablejump2__>
		case INITIAL:

			for(uint8_t i = 0; i<5; i++){
				list_highscore[i] = 0;	
     ac4:	e4 e4       	ldi	r30, 0x44	; 68
     ac6:	f3 e0       	ldi	r31, 0x03	; 3
     ac8:	11 82       	std	Z+1, r1	; 0x01
     aca:	10 82       	st	Z, r1
     acc:	13 82       	std	Z+3, r1	; 0x03
     ace:	12 82       	std	Z+2, r1	; 0x02
     ad0:	15 82       	std	Z+5, r1	; 0x05
     ad2:	14 82       	std	Z+4, r1	; 0x04
     ad4:	17 82       	std	Z+7, r1	; 0x07
     ad6:	16 82       	std	Z+6, r1	; 0x06
     ad8:	11 86       	std	Z+9, r1	; 0x09
     ada:	10 86       	std	Z+8, r1	; 0x08
			}

			game_state = IN_MENU;
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <game_state>
			
			break;
     ae2:	d4 c0       	rjmp	.+424    	; 0xc8c <Game_Machine+0x208>
			
		case START_GAME: // init the single game
			
			score = 0;
     ae4:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <score+0x1>
     ae8:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <score>
			Menu_Line_Change("GAME STARTS IN:",0,0);
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	82 e3       	ldi	r24, 0x32	; 50
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
     af8:	03 e0       	ldi	r16, 0x03	; 3
     afa:	10 e0       	ldi	r17, 0x00	; 0
			char countdown[2];
			for(uint8_t i = 0; i <3; i++){
				sprintf(countdown,"%u",3-i);
     afc:	0f 2e       	mov	r0, r31
     afe:	fe e4       	ldi	r31, 0x4E	; 78
     b00:	cf 2e       	mov	r12, r31
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	df 2e       	mov	r13, r31
     b06:	f0 2d       	mov	r31, r0
     b08:	7e 01       	movw	r14, r28
     b0a:	2b e0       	ldi	r18, 0x0B	; 11
     b0c:	e2 0e       	add	r14, r18
     b0e:	f1 1c       	adc	r15, r1
     b10:	1f 93       	push	r17
     b12:	0f 93       	push	r16
     b14:	df 92       	push	r13
     b16:	cf 92       	push	r12
     b18:	ff 92       	push	r15
     b1a:	ef 92       	push	r14
     b1c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
				Menu_Line_Change(countdown,3,0);
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	c7 01       	movw	r24, r14
     b26:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
				Oled_Update();
     b2a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Oled_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2e:	3f ef       	ldi	r19, 0xFF	; 255
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	9e e0       	ldi	r25, 0x0E	; 14
     b34:	31 50       	subi	r19, 0x01	; 1
     b36:	80 40       	sbci	r24, 0x00	; 0
     b38:	90 40       	sbci	r25, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <Game_Machine+0xb0>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <Game_Machine+0xba>
     b3e:	00 00       	nop
     b40:	01 50       	subi	r16, 0x01	; 1
     b42:	11 09       	sbc	r17, r1
		case START_GAME: // init the single game
			
			score = 0;
			Menu_Line_Change("GAME STARTS IN:",0,0);
			char countdown[2];
			for(uint8_t i = 0; i <3; i++){
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	f9 f6       	brne	.-66     	; 0xb10 <Game_Machine+0x8c>
				sprintf(countdown,"%u",3-i);
				Menu_Line_Change(countdown,3,0);
				Oled_Update();
				_delay_ms(1000);
			}
			Oled_Reset(); 
     b52:	0e 94 e7 06 	call	0xdce	; 0xdce <Oled_Reset>
			Can_Send_Msg(&start_game);
     b56:	8e e4       	ldi	r24, 0x4E	; 78
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	0e 94 b6 04 	call	0x96c	; 0x96c <Can_Send_Msg>
			game_state = IN_GAME;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <game_state>
			break;
     b64:	93 c0       	rjmp	.+294    	; 0xc8c <Game_Machine+0x208>
			
		case IN_GAME:
			Slider_Send_Pos();
     b66:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Slider_Send_Pos>
			char your_score[15];
			char highest_score[15];
			sprintf(your_score,"YOUR SCORE: %u",score);
     b6a:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <score+0x1>
     b6e:	8f 93       	push	r24
     b70:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <score>
     b74:	8f 93       	push	r24
     b76:	82 e4       	ldi	r24, 0x42	; 66
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	9f 93       	push	r25
     b7c:	8f 93       	push	r24
     b7e:	8e 01       	movw	r16, r28
     b80:	06 5e       	subi	r16, 0xE6	; 230
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	1f 93       	push	r17
     b86:	0f 93       	push	r16
     b88:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
			Menu_Line_Change(your_score,1,0);
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
			sprintf(highest_score,"%u",list_highscore[0]);
     b96:	e4 e4       	ldi	r30, 0x44	; 68
     b98:	f3 e0       	ldi	r31, 0x03	; 3
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	8f 93       	push	r24
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 93       	push	r24
     ba2:	8e e4       	ldi	r24, 0x4E	; 78
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	9f 93       	push	r25
     ba8:	8f 93       	push	r24
     baa:	0f 50       	subi	r16, 0x0F	; 15
     bac:	11 09       	sbc	r17, r1
     bae:	1f 93       	push	r17
     bb0:	0f 93       	push	r16
     bb2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
			Menu_Line_Change("HIGHEST SCORE:",4,0);
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	64 e0       	ldi	r22, 0x04	; 4
     bba:	81 e5       	ldi	r24, 0x51	; 81
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
			Menu_Line_Change(highest_score,5,0);
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	65 e0       	ldi	r22, 0x05	; 5
     bc6:	c8 01       	movw	r24, r16
     bc8:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
			
			counter ++;
     bcc:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <__data_end>
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <__data_end>
			if(counter > 20){
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	85 31       	cpi	r24, 0x15	; 21
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <Game_Machine+0x162>
     be4:	53 c0       	rjmp	.+166    	; 0xc8c <Game_Machine+0x208>
				score ++;
     be6:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <score>
     bea:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <score+0x1>
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <score+0x1>
     bf4:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <score>
				counter = 0;
     bf8:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <__data_end>
     bfc:	47 c0       	rjmp	.+142    	; 0xc8c <Game_Machine+0x208>
			}
			break;
			
		case IN_MENU:
			Menu_Navigation();
     bfe:	0e 94 85 09 	call	0x130a	; 0x130a <Menu_Navigation>
			Update_Menu();
     c02:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
			break;
     c06:	42 c0       	rjmp	.+132    	; 0xc8c <Game_Machine+0x208>
					temp2 = list_highscore[i];
					list_highscore[i] = temp;
					temp = temp2;
					
				}
				else if (score > list_highscore[i] && check == 0)
     c08:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <score>
     c0c:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <score+0x1>
     c10:	e4 e4       	ldi	r30, 0x44	; 68
     c12:	f3 e0       	ldi	r31, 0x03	; 3
     c14:	4e e4       	ldi	r20, 0x4E	; 78
     c16:	53 e0       	ldi	r21, 0x03	; 3
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
				{	
					temp = list_highscore[i];
					list_highscore[i] = score;
					check = 1;
     c1e:	ff 24       	eor	r15, r15
     c20:	f3 94       	inc	r15
			
		case (END_GAME): 

			for (uint8_t i = 0; i<5; i++)
			{
				if(check == 1)
     c22:	21 30       	cpi	r18, 0x01	; 1
     c24:	39 f4       	brne	.+14     	; 0xc34 <Game_Machine+0x1b0>
				{	
					temp2 = list_highscore[i];
     c26:	90 81       	ld	r25, Z
     c28:	81 81       	ldd	r24, Z+1	; 0x01
					list_highscore[i] = temp;
     c2a:	a0 83       	st	Z, r26
     c2c:	31 83       	std	Z+1, r19	; 0x01
					temp = temp2;
     c2e:	a9 2f       	mov	r26, r25
     c30:	38 2f       	mov	r19, r24
     c32:	0c c0       	rjmp	.+24     	; 0xc4c <Game_Machine+0x1c8>
					
				}
				else if (score > list_highscore[i] && check == 0)
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	86 17       	cp	r24, r22
     c3a:	97 07       	cpc	r25, r23
     c3c:	38 f4       	brcc	.+14     	; 0xc4c <Game_Machine+0x1c8>
     c3e:	21 11       	cpse	r18, r1
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <Game_Machine+0x1c8>
				{	
					temp = list_highscore[i];
					list_highscore[i] = score;
     c42:	71 83       	std	Z+1, r23	; 0x01
     c44:	60 83       	st	Z, r22
					temp = temp2;
					
				}
				else if (score > list_highscore[i] && check == 0)
				{	
					temp = list_highscore[i];
     c46:	a8 2f       	mov	r26, r24
     c48:	39 2f       	mov	r19, r25
					list_highscore[i] = score;
					check = 1;
     c4a:	2f 2d       	mov	r18, r15
     c4c:	32 96       	adiw	r30, 0x02	; 2
			Update_Menu();
			break;
			
		case (END_GAME): 

			for (uint8_t i = 0; i<5; i++)
     c4e:	4e 17       	cp	r20, r30
     c50:	5f 07       	cpc	r21, r31
     c52:	39 f7       	brne	.-50     	; 0xc22 <Game_Machine+0x19e>
					temp = list_highscore[i];
					list_highscore[i] = score;
					check = 1;
				}
			}
			score = 0;
     c54:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <score+0x1>
     c58:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <score>
			Move_To_Parent();
     c5c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Move_To_Parent>
			game_state = IN_MENU;
     c60:	84 e0       	ldi	r24, 0x04	; 4
     c62:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <game_state>
			break;
     c66:	12 c0       	rjmp	.+36     	; 0xc8c <Game_Machine+0x208>
			
		case CALIBRATE:
			
			calibrate_msg.id = 8;
     c68:	88 e0       	ldi	r24, 0x08	; 8
     c6a:	89 83       	std	Y+1, r24	; 0x01
			calibrate_msg.data[0] = 8;
     c6c:	8b 83       	std	Y+3, r24	; 0x03
			calibrate_msg.length = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	8a 83       	std	Y+2, r24	; 0x02
			Can_Send_Msg(&calibrate_msg);
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	0e 94 b6 04 	call	0x96c	; 0x96c <Can_Send_Msg>
			break; 
	}
}

void Set_Gamestate(game_state_t state){
	game_state = state;
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <game_state>
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <Game_Machine+0x208>
			Can_Send_Msg(&calibrate_msg);
			Set_Gamestate(CALIBRATE_WAIT);
			break;
			
		case CALIBRATE_WAIT:
			Move_To_Parent();
     c82:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Move_To_Parent>
			break; 
	}
}

void Set_Gamestate(game_state_t state){
	game_state = state;
     c86:	84 e0       	ldi	r24, 0x04	; 4
     c88:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <game_state>
		case CALIBRATE_WAIT:
			Move_To_Parent();
			Set_Gamestate(IN_MENU);
			break; 
	}
}
     c8c:	a8 96       	adiw	r28, 0x28	; 40
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	08 95       	ret

00000caa <Set_Gamestate>:

void Set_Gamestate(game_state_t state){
	game_state = state;
     caa:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <game_state>
     cae:	08 95       	ret

00000cb0 <Get_Game_State>:
}

game_state_t Get_Game_State(void){
	return game_state;
}
     cb0:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <game_state>
     cb4:	08 95       	ret

00000cb6 <Get_Highscore>:

uint16_t Get_Highscore(uint8_t number){
	return list_highscore[number];
     cb6:	e8 2f       	mov	r30, r24
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	ec 5b       	subi	r30, 0xBC	; 188
     cc0:	fc 4f       	sbci	r31, 0xFC	; 252
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	08 95       	ret

00000cc8 <Mcp_Read>:
#include "include/MCP2515.h"
#include "include/spi.h"
#include <avr/interrupt.h>
#include <avr/io.h>

uint8_t Mcp_Read(uint8_t addr){
     cc8:	cf 93       	push	r28
     cca:	c8 2f       	mov	r28, r24
	uint8_t result;

	Slave_Enable();
     ccc:	0e 94 de 07 	call	0xfbc	; 0xfbc <Slave_Enable>

	Spi_Write(MCP_READ);
     cd0:	83 e0       	ldi	r24, 0x03	; 3
     cd2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Spi_Write(addr);
     cd6:	8c 2f       	mov	r24, r28
     cd8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	result = Spi_Read();
     cdc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Spi_Read>
     ce0:	c8 2f       	mov	r28, r24

	Slave_Deselect();
     ce2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Slave_Deselect>
	return result;
}
     ce6:	8c 2f       	mov	r24, r28
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <Mcp_Write>:

void Mcp_Write(uint8_t addr, uint8_t data){
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	d8 2f       	mov	r29, r24
     cf2:	c6 2f       	mov	r28, r22
	Slave_Enable();
     cf4:	0e 94 de 07 	call	0xfbc	; 0xfbc <Slave_Enable>
	Spi_Write(MCP_WRITE);
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Spi_Write(addr);
     cfe:	8d 2f       	mov	r24, r29
     d00:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Spi_Write(data);
     d04:	8c 2f       	mov	r24, r28
     d06:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Slave_Deselect();
     d0a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Slave_Deselect>
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <Mcp_Reset>:

void Mcp_Reset(void){
	Slave_Enable();
     d14:	0e 94 de 07 	call	0xfbc	; 0xfbc <Slave_Enable>
	Spi_Write(MCP_RESET);
     d18:	80 ec       	ldi	r24, 0xC0	; 192
     d1a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Slave_Deselect();
     d1e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Slave_Deselect>
     d22:	08 95       	ret

00000d24 <Mcp_Modify_Bit>:
}

void Mcp_Modify_Bit(uint8_t addr, uint8_t mask, uint8_t data){
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	18 2f       	mov	r17, r24
     d2c:	d6 2f       	mov	r29, r22
     d2e:	c4 2f       	mov	r28, r20
	Slave_Enable();
     d30:	0e 94 de 07 	call	0xfbc	; 0xfbc <Slave_Enable>
	Spi_Write(MCP_BITMOD);
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Spi_Write(addr);
     d3a:	81 2f       	mov	r24, r17
     d3c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Spi_Write(mask);
     d40:	8d 2f       	mov	r24, r29
     d42:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Spi_Write(data);
     d46:	8c 2f       	mov	r24, r28
     d48:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Slave_Deselect();
     d4c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Slave_Deselect>
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	08 95       	ret

00000d58 <Mcp_Request_to_Send>:

void Mcp_Request_to_Send(uint8_t buffer){
     d58:	cf 93       	push	r28
     d5a:	c8 2f       	mov	r28, r24
	Slave_Enable();
     d5c:	0e 94 de 07 	call	0xfbc	; 0xfbc <Slave_Enable>
	Spi_Write(0x80 | (1<< buffer));
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <Mcp_Request_to_Send+0x12>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	ca 95       	dec	r28
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <Mcp_Request_to_Send+0xe>
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Spi_Write>
	Slave_Deselect();
     d74:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Slave_Deselect>
}
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <__vector_1>:



ISR(INT0_vect){
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
}
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <Oled_Data_Write>:
	Ascii_to_Bitmap_Custom(bits,character);
	for (uint8_t i = 0; i <16 ; i++)
	{
		Oled_Data_Write(bits[i]^0xff,column*0x08+i);
	}
}
     d90:	e0 91 00 1c 	lds	r30, 0x1C00	; 0x801c00 <__bss_end+0x1898>
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	f0 96       	adiw	r30, 0x30	; 48
     d98:	f6 95       	lsr	r31
     d9a:	fe 2f       	mov	r31, r30
     d9c:	ee 27       	eor	r30, r30
     d9e:	f7 95       	ror	r31
     da0:	e7 95       	ror	r30
     da2:	e6 0f       	add	r30, r22
     da4:	f1 1d       	adc	r31, r1
     da6:	80 83       	st	Z, r24
     da8:	08 95       	ret

00000daa <Oled_Clear_Line>:
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	d8 2f       	mov	r29, r24
     db0:	80 93 00 1c 	sts	0x1C00, r24	; 0x801c00 <__bss_end+0x1898>
     db4:	c0 e0       	ldi	r28, 0x00	; 0
     db6:	6c 2f       	mov	r22, r28
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 c8 06 	call	0xd90	; 0xd90 <Oled_Data_Write>
     dbe:	cf 5f       	subi	r28, 0xFF	; 255
     dc0:	c0 38       	cpi	r28, 0x80	; 128
     dc2:	c9 f7       	brne	.-14     	; 0xdb6 <Oled_Clear_Line+0xc>
     dc4:	d0 93 00 1c 	sts	0x1C00, r29	; 0x801c00 <__bss_end+0x1898>
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <Oled_Reset>:
     dce:	cf 93       	push	r28
     dd0:	c0 e0       	ldi	r28, 0x00	; 0
     dd2:	8c 2f       	mov	r24, r28
     dd4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Oled_Clear_Line>
     dd8:	cf 5f       	subi	r28, 0xFF	; 255
     dda:	c8 30       	cpi	r28, 0x08	; 8
     ddc:	d1 f7       	brne	.-12     	; 0xdd2 <Oled_Reset+0x4>
     dde:	10 92 00 1c 	sts	0x1C00, r1	; 0x801c00 <__bss_end+0x1898>
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <Oled_Print_Char>:
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	28 97       	sbiw	r28, 0x08	; 8
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	06 2f       	mov	r16, r22
     e08:	14 2f       	mov	r17, r20
     e0a:	68 2f       	mov	r22, r24
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	0e 94 84 04 	call	0x908	; 0x908 <Ascii_to_Bitmap_Font8>
     e14:	01 30       	cpi	r16, 0x01	; 1
     e16:	b1 f4       	brne	.+44     	; 0xe44 <Oled_Print_Char+0x5e>
     e18:	11 0f       	add	r17, r17
     e1a:	11 0f       	add	r17, r17
     e1c:	11 0f       	add	r17, r17
     e1e:	ce 01       	movw	r24, r28
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	7c 01       	movw	r14, r24
     e24:	6e 01       	movw	r12, r28
     e26:	99 e0       	ldi	r25, 0x09	; 9
     e28:	c9 0e       	add	r12, r25
     e2a:	d1 1c       	adc	r13, r1
     e2c:	f7 01       	movw	r30, r14
     e2e:	81 91       	ld	r24, Z+
     e30:	7f 01       	movw	r14, r30
     e32:	61 2f       	mov	r22, r17
     e34:	80 95       	com	r24
     e36:	0e 94 c8 06 	call	0xd90	; 0xd90 <Oled_Data_Write>
     e3a:	1f 5f       	subi	r17, 0xFF	; 255
     e3c:	ce 14       	cp	r12, r14
     e3e:	df 04       	cpc	r13, r15
     e40:	a9 f7       	brne	.-22     	; 0xe2c <Oled_Print_Char+0x46>
     e42:	14 c0       	rjmp	.+40     	; 0xe6c <Oled_Print_Char+0x86>
     e44:	11 0f       	add	r17, r17
     e46:	11 0f       	add	r17, r17
     e48:	11 0f       	add	r17, r17
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	7c 01       	movw	r14, r24
     e50:	6e 01       	movw	r12, r28
     e52:	99 e0       	ldi	r25, 0x09	; 9
     e54:	c9 0e       	add	r12, r25
     e56:	d1 1c       	adc	r13, r1
     e58:	61 2f       	mov	r22, r17
     e5a:	f7 01       	movw	r30, r14
     e5c:	81 91       	ld	r24, Z+
     e5e:	7f 01       	movw	r14, r30
     e60:	0e 94 c8 06 	call	0xd90	; 0xd90 <Oled_Data_Write>
     e64:	1f 5f       	subi	r17, 0xFF	; 255
     e66:	ec 14       	cp	r14, r12
     e68:	fd 04       	cpc	r15, r13
     e6a:	b1 f7       	brne	.-20     	; 0xe58 <Oled_Print_Char+0x72>
     e6c:	28 96       	adiw	r28, 0x08	; 8
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	08 95       	ret

00000e8a <Print_Lunde>:

void Print_Lunde(void){
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
     e92:	e0 e0       	ldi	r30, 0x00	; 0
     e94:	f0 e1       	ldi	r31, 0x10	; 16
     e96:	81 e2       	ldi	r24, 0x21	; 33
     e98:	80 83       	st	Z, r24
     e9a:	10 82       	st	Z, r1
     e9c:	8f e7       	ldi	r24, 0x7F	; 127
     e9e:	80 83       	st	Z, r24
     ea0:	82 e2       	ldi	r24, 0x22	; 34
     ea2:	80 83       	st	Z, r24
     ea4:	10 82       	st	Z, r1
     ea6:	87 e0       	ldi	r24, 0x07	; 7
     ea8:	80 83       	st	Z, r24
	Oled_Command_Write(0);
	Oled_Command_Write(0x7f);
	Oled_Command_Write(OLED_SET_PAGE_ADDR);
	Oled_Command_Write(0);
	Oled_Command_Write(0x07);
	for (uint16_t i = 0; i < 0x400; i++)
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
     eac:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*oled_write = Lunde_Byte(i);
     eae:	00 e0       	ldi	r16, 0x00	; 0
     eb0:	12 e1       	ldi	r17, 0x12	; 18
     eb2:	ce 01       	movw	r24, r28
     eb4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Lunde_Byte>
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24
	Oled_Command_Write(0);
	Oled_Command_Write(0x7f);
	Oled_Command_Write(OLED_SET_PAGE_ADDR);
	Oled_Command_Write(0);
	Oled_Command_Write(0x07);
	for (uint16_t i = 0; i < 0x400; i++)
     ebc:	21 96       	adiw	r28, 0x01	; 1
     ebe:	c1 15       	cp	r28, r1
     ec0:	f4 e0       	ldi	r31, 0x04	; 4
     ec2:	df 07       	cpc	r29, r31
     ec4:	b1 f7       	brne	.-20     	; 0xeb2 <Print_Lunde+0x28>

	for (uint16_t i = 0; i < 0x400; i++)
	{
		*sram_write = Lunde_Byte(i);
	}*/
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <Oled_Init>:

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f0 e1       	ldi	r31, 0x10	; 16
     ed4:	8e ea       	ldi	r24, 0xAE	; 174
     ed6:	80 83       	st	Z, r24
     ed8:	81 ea       	ldi	r24, 0xA1	; 161
     eda:	80 83       	st	Z, r24
     edc:	8a ed       	ldi	r24, 0xDA	; 218
     ede:	80 83       	st	Z, r24
     ee0:	82 e1       	ldi	r24, 0x12	; 18
     ee2:	80 83       	st	Z, r24
     ee4:	88 ec       	ldi	r24, 0xC8	; 200
     ee6:	80 83       	st	Z, r24
     ee8:	80 e2       	ldi	r24, 0x20	; 32
     eea:	80 83       	st	Z, r24
     eec:	10 82       	st	Z, r1
     eee:	88 ea       	ldi	r24, 0xA8	; 168
     ef0:	80 83       	st	Z, r24
     ef2:	8f e3       	ldi	r24, 0x3F	; 63
     ef4:	80 83       	st	Z, r24
     ef6:	85 ed       	ldi	r24, 0xD5	; 213
     ef8:	80 83       	st	Z, r24
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	80 83       	st	Z, r24
     efe:	8b ed       	ldi	r24, 0xDB	; 219
     f00:	80 83       	st	Z, r24
     f02:	80 e3       	ldi	r24, 0x30	; 48
     f04:	80 83       	st	Z, r24
     f06:	81 e8       	ldi	r24, 0x81	; 129
     f08:	80 83       	st	Z, r24
     f0a:	80 e5       	ldi	r24, 0x50	; 80
     f0c:	80 83       	st	Z, r24
     f0e:	89 ed       	ldi	r24, 0xD9	; 217
     f10:	80 83       	st	Z, r24
     f12:	81 e2       	ldi	r24, 0x21	; 33
     f14:	80 83       	st	Z, r24
     f16:	8d ea       	ldi	r24, 0xAD	; 173
     f18:	80 83       	st	Z, r24
     f1a:	10 82       	st	Z, r1
     f1c:	84 ea       	ldi	r24, 0xA4	; 164
     f1e:	80 83       	st	Z, r24
     f20:	86 ea       	ldi	r24, 0xA6	; 166
     f22:	80 83       	st	Z, r24
     f24:	8f ea       	ldi	r24, 0xAF	; 175
     f26:	80 83       	st	Z, r24

	Oled_Command_Write(0xa6); //set normal display

	Oled_Command_Write(0xaf); // display on

	Oled_Reset();
     f28:	0e 94 e7 06 	call	0xdce	; 0xdce <Oled_Reset>
     f2c:	08 95       	ret

00000f2e <Oled_Print>:
}

void Oled_Print(char* characters, uint8_t inverted){
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	fc 01       	movw	r30, r24
	int char_number = 0;

	while((characters[char_number] != '\0') && (char_number < 16))
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	89 f0       	breq	.+34     	; 0xf60 <Oled_Print+0x32>
     f3e:	d6 2f       	mov	r29, r22
     f40:	8f 01       	movw	r16, r30
     f42:	0f 5f       	subi	r16, 0xFF	; 255
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Oled_Print_Char(characters[char_number],inverted,char_number);
     f48:	4c 2f       	mov	r20, r28
     f4a:	6d 2f       	mov	r22, r29
     f4c:	0e 94 f3 06 	call	0xde6	; 0xde6 <Oled_Print_Char>
}

void Oled_Print(char* characters, uint8_t inverted){
	int char_number = 0;

	while((characters[char_number] != '\0') && (char_number < 16))
     f50:	f8 01       	movw	r30, r16
     f52:	81 91       	ld	r24, Z+
     f54:	8f 01       	movw	r16, r30
     f56:	88 23       	and	r24, r24
     f58:	19 f0       	breq	.+6      	; 0xf60 <Oled_Print+0x32>
     f5a:	cf 5f       	subi	r28, 0xFF	; 255
     f5c:	c0 31       	cpi	r28, 0x10	; 16
     f5e:	a1 f7       	brne	.-24     	; 0xf48 <Oled_Print+0x1a>
	{
		Oled_Print_Char(characters[char_number],inverted,char_number);
		char_number++;
	}
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	08 95       	ret

00000f6a <Oled_Update>:

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
     f6a:	e0 e0       	ldi	r30, 0x00	; 0
     f6c:	f0 e1       	ldi	r31, 0x10	; 16
     f6e:	81 e2       	ldi	r24, 0x21	; 33
     f70:	80 83       	st	Z, r24
     f72:	10 82       	st	Z, r1
     f74:	8f e7       	ldi	r24, 0x7F	; 127
     f76:	80 83       	st	Z, r24
     f78:	82 e2       	ldi	r24, 0x22	; 34
     f7a:	80 83       	st	Z, r24
     f7c:	10 82       	st	Z, r1
     f7e:	87 e0       	ldi	r24, 0x07	; 7
     f80:	80 83       	st	Z, r24
     f82:	e0 e0       	ldi	r30, 0x00	; 0
     f84:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *sram_read = (char *) (0x1800);
	volatile char *oled_write = (char *) 0x1200;

	for (uint16_t i = 0; i < 0x400; i++)
	{
		*oled_write = sram_read[i];
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b2 e1       	ldi	r27, 0x12	; 18
     f8a:	81 91       	ld	r24, Z+
     f8c:	8c 93       	st	X, r24
	Oled_Command_Write(0x07);

	volatile char *sram_read = (char *) (0x1800);
	volatile char *oled_write = (char *) 0x1200;

	for (uint16_t i = 0; i < 0x400; i++)
     f8e:	e1 15       	cp	r30, r1
     f90:	8c e1       	ldi	r24, 0x1C	; 28
     f92:	f8 07       	cpc	r31, r24
     f94:	d1 f7       	brne	.-12     	; 0xf8a <Oled_Update+0x20>
	{
		*oled_write = sram_read[i];
	}
     f96:	08 95       	ret

00000f98 <Spi_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "include/spi.h"

void Spi_Init(void){
	DDRB |= (1 << PINB4)|(1 << PINB5)|(1 << PINB7); // setting ss, mosi and sck as output
     f98:	87 b3       	in	r24, 0x17	; 23
     f9a:	80 6b       	ori	r24, 0xB0	; 176
     f9c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB6);	// setting miso as input
     f9e:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1 << SPR0); // enable SPI and selectiong master mode
     fa0:	8d b1       	in	r24, 0x0d	; 13
     fa2:	81 65       	ori	r24, 0x51	; 81
     fa4:	8d b9       	out	0x0d, r24	; 13
     fa6:	08 95       	ret

00000fa8 <Spi_Write>:
}

void Spi_Write(uint8_t data){
	SPDR = data;
     fa8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     faa:	77 9b       	sbis	0x0e, 7	; 14
     fac:	fe cf       	rjmp	.-4      	; 0xfaa <Spi_Write+0x2>
}
     fae:	08 95       	ret

00000fb0 <Spi_Read>:

uint8_t Spi_Read(void){
	SPDR = 0xaa;
     fb0:	8a ea       	ldi	r24, 0xAA	; 170
     fb2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     fb4:	77 9b       	sbis	0x0e, 7	; 14
     fb6:	fe cf       	rjmp	.-4      	; 0xfb4 <Spi_Read+0x4>
	return SPDR;
     fb8:	8f b1       	in	r24, 0x0f	; 15
}
     fba:	08 95       	ret

00000fbc <Slave_Enable>:

void Slave_Enable(void){
	PORTB &= ~(1 << PINB4);
     fbc:	c4 98       	cbi	0x18, 4	; 24
     fbe:	08 95       	ret

00000fc0 <Slave_Deselect>:
}

void Slave_Deselect(void){
	PORTB |= (1 << PINB4);
     fc0:	c4 9a       	sbi	0x18, 4	; 24
     fc2:	08 95       	ret

00000fc4 <Timer_Init>:
		Timer_1_off();
		_delay_ms(5);
		OCR1A = top_val;
		Timer_1_on();
	}
}
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	89 bf       	out	0x39, r24	; 57
     fc8:	12 be       	out	0x32, r1	; 50
     fca:	8f b5       	in	r24, 0x2f	; 47
     fcc:	83 64       	ori	r24, 0x43	; 67
     fce:	8f bd       	out	0x2f, r24	; 47
     fd0:	8f b5       	in	r24, 0x2f	; 47
     fd2:	8f 77       	andi	r24, 0x7F	; 127
     fd4:	8f bd       	out	0x2f, r24	; 47
     fd6:	8e b5       	in	r24, 0x2e	; 46
     fd8:	88 61       	ori	r24, 0x18	; 24
     fda:	8e bd       	out	0x2e, r24	; 46
     fdc:	eb e8       	ldi	r30, 0x8B	; 139
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8c 73       	andi	r24, 0x3C	; 60
     fe4:	80 83       	st	Z, r24
     fe6:	ea e8       	ldi	r30, 0x8A	; 138
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8f 7e       	andi	r24, 0xEF	; 239
     fee:	80 83       	st	Z, r24
     ff0:	80 81       	ld	r24, Z
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	80 83       	st	Z, r24
     ff6:	ed e7       	ldi	r30, 0x7D	; 125
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 61       	ori	r24, 0x10	; 16
     ffe:	80 83       	st	Z, r24
    1000:	08 95       	ret

00001002 <Timer_3_on>:

void Timer_3_on(void){
	//set timer 3 prescale to 256
	TCCR3B |= (1 << CS32);
    1002:	ea e8       	ldi	r30, 0x8A	; 138
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	84 60       	ori	r24, 0x04	; 4
    100a:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << CS31) & ~(1 << CS30);
    100c:	80 81       	ld	r24, Z
    100e:	8c 7f       	andi	r24, 0xFC	; 252
    1010:	80 83       	st	Z, r24
    1012:	08 95       	ret

00001014 <Timer_3_off>:
}

void Timer_3_off(void){
	//set timer 3 prescale to no clock
	TCCR3B &= ~(1 << CS32) & ~(1 << CS31) & ~(1 << CS30);
    1014:	ea e8       	ldi	r30, 0x8A	; 138
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 7f       	andi	r24, 0xF8	; 248
    101c:	80 83       	st	Z, r24
    101e:	08 95       	ret

00001020 <USART_Transmit>:
// USART driver

// USART transmit
int USART_Transmit(char data, FILE *f){
	/*Wait for empty transmit buffer*/
	while(!(UCSR0A & (1<<UDRE0)));
    1020:	5d 9b       	sbis	0x0b, 5	; 11
    1022:	fe cf       	rjmp	.-4      	; 0x1020 <USART_Transmit>
	/* Put data into buffer, sends the data*/
	UDR0 = data;
    1024:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	08 95       	ret

0000102c <USART_Receive>:

int USART_Receive(FILE* f){
	/* Wait for data to be received*/
	while(!(UCSR0A & (1<<RXC0)));
    102c:	5f 9b       	sbis	0x0b, 7	; 11
    102e:	fe cf       	rjmp	.-4      	; 0x102c <USART_Receive>
	/* Get and return received data from buffer*/
	return UDR0;
    1030:	8c b1       	in	r24, 0x0c	; 12
}
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	08 95       	ret

00001036 <USART_Init>:
// USART init
int USART_Init(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr >> 8);
    1036:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
    1038:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter and receive interrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<< RXCIE0);
    103a:	88 e9       	ldi	r24, 0x98	; 152
    103c:	8a b9       	out	0x0a, r24	; 10
	/*Set frame format: 8data, 2 stop bit*/
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    103e:	8e e8       	ldi	r24, 0x8E	; 142
    1040:	80 bd       	out	0x20, r24	; 32

	usart = fdevopen(&USART_Transmit, &USART_Receive);
    1042:	66 e1       	ldi	r22, 0x16	; 22
    1044:	78 e0       	ldi	r23, 0x08	; 8
    1046:	80 e1       	ldi	r24, 0x10	; 16
    1048:	98 e0       	ldi	r25, 0x08	; 8
    104a:	0e 94 85 0b 	call	0x170a	; 0x170a <fdevopen>
    104e:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <usart+0x1>
    1052:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <usart>

	return 0;
}
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 95       	ret

0000105c <Menu_Line_Change>:
	{
		return PINB & ( 1 << PINB1);
	}else{
		return PINB & ( 1 << PINB0);
	}
}
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	ec 01       	movw	r28, r24
    1064:	86 2f       	mov	r24, r22
    1066:	14 2f       	mov	r17, r20
    1068:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Oled_Clear_Line>
    106c:	61 2f       	mov	r22, r17
    106e:	ce 01       	movw	r24, r28
    1070:	0e 94 97 07 	call	0xf2e	; 0xf2e <Oled_Print>
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	08 95       	ret

0000107c <Update_Menu_Parent>:
    107c:	cf 93       	push	r28
    107e:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <current_menu>
    1082:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <current_menu+0x1>
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    1092:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <current_menu>
    1096:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <current_menu+0x1>
    109a:	50 96       	adiw	r26, 0x10	; 16
    109c:	8c 91       	ld	r24, X
    109e:	50 97       	sbiw	r26, 0x10	; 16
    10a0:	88 23       	and	r24, r24
    10a2:	b9 f1       	breq	.+110    	; 0x1112 <Update_Menu_Parent+0x96>
    10a4:	c1 e0       	ldi	r28, 0x01	; 1
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <Update_Menu_Parent+0x2e>
    10a8:	c9 2f       	mov	r28, r25
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	8c 0f       	add	r24, r28
    10ae:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <current_child_num>
    10b2:	98 13       	cpse	r25, r24
    10b4:	12 c0       	rjmp	.+36     	; 0x10da <Update_Menu_Parent+0x5e>
    10b6:	89 2f       	mov	r24, r25
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	fd 01       	movw	r30, r26
    10c2:	e8 0f       	add	r30, r24
    10c4:	f9 1f       	adc	r31, r25
    10c6:	01 90       	ld	r0, Z+
    10c8:	f0 81       	ld	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	6c 2f       	mov	r22, r28
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    10d8:	10 c0       	rjmp	.+32     	; 0x10fa <Update_Menu_Parent+0x7e>
    10da:	e8 2f       	mov	r30, r24
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	31 96       	adiw	r30, 0x01	; 1
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	ea 0f       	add	r30, r26
    10e6:	fb 1f       	adc	r31, r27
    10e8:	01 90       	ld	r0, Z+
    10ea:	f0 81       	ld	r31, Z
    10ec:	e0 2d       	mov	r30, r0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	6c 2f       	mov	r22, r28
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    10fa:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <current_menu>
    10fe:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <current_menu+0x1>
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	9c 0f       	add	r25, r28
    1106:	50 96       	adiw	r26, 0x10	; 16
    1108:	8c 91       	ld	r24, X
    110a:	50 97       	sbiw	r26, 0x10	; 16
    110c:	c8 17       	cp	r28, r24
    110e:	60 f2       	brcs	.-104    	; 0x10a8 <Update_Menu_Parent+0x2c>
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <Update_Menu_Parent+0x98>
    1112:	c0 e0       	ldi	r28, 0x00	; 0
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	6c 0f       	add	r22, r28
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	8e ee       	ldi	r24, 0xEE	; 238
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <Update_Menu>:
    1126:	0e 94 e7 06 	call	0xdce	; 0xdce <Oled_Reset>
    112a:	0e 94 3e 08 	call	0x107c	; 0x107c <Update_Menu_Parent>
    112e:	08 95       	ret

00001130 <Oled_Menu_Setup>:
    1130:	e6 e9       	ldi	r30, 0x96	; 150
    1132:	f1 e0       	ldi	r31, 0x01	; 1
    1134:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <current_menu+0x1>
    1138:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <current_menu>
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <current_child+0x1>
    1144:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <current_child>
    1148:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    114c:	08 95       	ret

0000114e <Change_Child>:
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	91 f4       	brne	.+36     	; 0x1176 <Change_Child+0x28>
    1152:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <current_child_num>
    1156:	42 2f       	mov	r20, r18
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <current_menu>
    115e:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <current_menu+0x1>
    1162:	80 89       	ldd	r24, Z+16	; 0x10
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	48 17       	cp	r20, r24
    116a:	59 07       	cpc	r21, r25
    116c:	6c f4       	brge	.+26     	; 0x1188 <Change_Child+0x3a>
    116e:	2f 5f       	subi	r18, 0xFF	; 255
    1170:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <current_child_num>
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <Change_Child+0x3a>
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	39 f4       	brne	.+14     	; 0x1188 <Change_Child+0x3a>
    117a:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <current_child_num>
    117e:	88 23       	and	r24, r24
    1180:	19 f0       	breq	.+6      	; 0x1188 <Change_Child+0x3a>
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <current_child_num>
    1188:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <current_menu>
    118c:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <current_menu+0x1>
    1190:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <current_child_num>
    1194:	e8 2f       	mov	r30, r24
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	31 96       	adiw	r30, 0x01	; 1
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <current_child+0x1>
    11aa:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <current_child>
    11ae:	08 95       	ret

000011b0 <User_Control_Init>:
    11b0:	0e 94 3b 05 	call	0xa76	; 0xa76 <Ext_Mem_Init>
    11b4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <Adc_Init>
    11b8:	0e 94 68 07 	call	0xed0	; 0xed0 <Oled_Init>
    11bc:	87 b3       	in	r24, 0x17	; 23
    11be:	87 60       	ori	r24, 0x07	; 7
    11c0:	87 bb       	out	0x17, r24	; 23
    11c2:	c2 9a       	sbi	0x18, 2	; 24
    11c4:	08 95       	ret

000011c6 <Joycon_Get>:
    11c6:	cf 93       	push	r28
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Adc_Read>
    11ce:	c8 2f       	mov	r28, r24
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Adc_Read>
    11d6:	28 2f       	mov	r18, r24
    11d8:	cc 23       	and	r28, r28
    11da:	a4 f4       	brge	.+40     	; 0x1204 <Joycon_Get+0x3e>
    11dc:	4c 2f       	mov	r20, r28
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	4f 57       	subi	r20, 0x7F	; 127
    11e2:	51 09       	sbc	r21, r1
    11e4:	84 e6       	ldi	r24, 0x64	; 100
    11e6:	84 9f       	mul	r24, r20
    11e8:	b0 01       	movw	r22, r0
    11ea:	85 9f       	mul	r24, r21
    11ec:	70 0d       	add	r23, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	77 23       	and	r23, r23
    11f2:	14 f4       	brge	.+4      	; 0x11f8 <Joycon_Get+0x32>
    11f4:	61 58       	subi	r22, 0x81	; 129
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	66 0f       	add	r22, r22
    11fa:	67 2f       	mov	r22, r23
    11fc:	66 1f       	adc	r22, r22
    11fe:	77 0b       	sbc	r23, r23
    1200:	46 2f       	mov	r20, r22
    1202:	13 c0       	rjmp	.+38     	; 0x122a <Joycon_Get+0x64>
    1204:	cf 37       	cpi	r28, 0x7F	; 127
    1206:	80 f4       	brcc	.+32     	; 0x1228 <Joycon_Get+0x62>
    1208:	4c 2f       	mov	r20, r28
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	4f 57       	subi	r20, 0x7F	; 127
    120e:	51 09       	sbc	r21, r1
    1210:	34 e6       	ldi	r19, 0x64	; 100
    1212:	34 9f       	mul	r19, r20
    1214:	c0 01       	movw	r24, r0
    1216:	35 9f       	mul	r19, r21
    1218:	90 0d       	add	r25, r0
    121a:	11 24       	eor	r1, r1
    121c:	6f e7       	ldi	r22, 0x7F	; 127
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__divmodhi4>
    1224:	46 2f       	mov	r20, r22
    1226:	01 c0       	rjmp	.+2      	; 0x122a <Joycon_Get+0x64>
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	22 23       	and	r18, r18
    122c:	9c f4       	brge	.+38     	; 0x1254 <Joycon_Get+0x8e>
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	2f 57       	subi	r18, 0x7F	; 127
    1232:	31 09       	sbc	r19, r1
    1234:	84 e6       	ldi	r24, 0x64	; 100
    1236:	82 9f       	mul	r24, r18
    1238:	b0 01       	movw	r22, r0
    123a:	83 9f       	mul	r24, r19
    123c:	70 0d       	add	r23, r0
    123e:	11 24       	eor	r1, r1
    1240:	77 23       	and	r23, r23
    1242:	14 f4       	brge	.+4      	; 0x1248 <Joycon_Get+0x82>
    1244:	61 58       	subi	r22, 0x81	; 129
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	66 0f       	add	r22, r22
    124a:	67 2f       	mov	r22, r23
    124c:	66 1f       	adc	r22, r22
    124e:	77 0b       	sbc	r23, r23
    1250:	76 2f       	mov	r23, r22
    1252:	12 c0       	rjmp	.+36     	; 0x1278 <Joycon_Get+0xb2>
    1254:	2f 37       	cpi	r18, 0x7F	; 127
    1256:	78 f4       	brcc	.+30     	; 0x1276 <Joycon_Get+0xb0>
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	2f 57       	subi	r18, 0x7F	; 127
    125c:	31 09       	sbc	r19, r1
    125e:	54 e6       	ldi	r21, 0x64	; 100
    1260:	52 9f       	mul	r21, r18
    1262:	c0 01       	movw	r24, r0
    1264:	53 9f       	mul	r21, r19
    1266:	90 0d       	add	r25, r0
    1268:	11 24       	eor	r1, r1
    126a:	6f e7       	ldi	r22, 0x7F	; 127
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__divmodhi4>
    1272:	76 2f       	mov	r23, r22
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <Joycon_Get+0xb2>
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	64 2f       	mov	r22, r20
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <Joycon_Get_Direction>:
    1280:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Joycon_Get>
    1284:	6e 3c       	cpi	r22, 0xCE	; 206
    1286:	14 f4       	brge	.+4      	; 0x128c <Joycon_Get_Direction+0xc>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	08 95       	ret
    128c:	63 33       	cpi	r22, 0x33	; 51
    128e:	14 f0       	brlt	.+4      	; 0x1294 <Joycon_Get_Direction+0x14>
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	08 95       	ret
    1294:	7e 3c       	cpi	r23, 0xCE	; 206
    1296:	14 f4       	brge	.+4      	; 0x129c <Joycon_Get_Direction+0x1c>
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	08 95       	ret
    129c:	73 33       	cpi	r23, 0x33	; 51
    129e:	14 f0       	brlt	.+4      	; 0x12a4 <Joycon_Get_Direction+0x24>
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret

000012a8 <Slider_Get_Postion>:
    12a8:	cf 93       	push	r28
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Adc_Read>
    12b0:	c8 2f       	mov	r28, r24
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Adc_Read>
    12b8:	98 2f       	mov	r25, r24
    12ba:	8c 2f       	mov	r24, r28
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <Slider_Send_Pos>:
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	2a 97       	sbiw	r28, 0x0a	; 10
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Slider_Get_Postion>
    12d8:	36 b3       	in	r19, 0x16	; 22
    12da:	26 b3       	in	r18, 0x16	; 22
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	49 83       	std	Y+1, r20	; 0x01
    12e0:	44 e0       	ldi	r20, 0x04	; 4
    12e2:	4a 83       	std	Y+2, r20	; 0x02
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	32 70       	andi	r19, 0x02	; 2
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	21 70       	andi	r18, 0x01	; 1
    12ee:	2e 83       	std	Y+6, r18	; 0x06
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	0e 94 b6 04 	call	0x96c	; 0x96c <Can_Send_Msg>
    12f8:	2a 96       	adiw	r28, 0x0a	; 10
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <Menu_Navigation>:
    130a:	0e 94 40 09 	call	0x1280	; 0x1280 <Joycon_Get_Direction>
    130e:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <hold_joycon>
    1312:	91 11       	cpse	r25, r1
    1314:	54 c0       	rjmp	.+168    	; 0x13be <Menu_Navigation+0xb4>
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	71 f1       	breq	.+92     	; 0x1376 <Menu_Navigation+0x6c>
    131a:	18 f4       	brcc	.+6      	; 0x1322 <Menu_Navigation+0x18>
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	99 f0       	breq	.+38     	; 0x1346 <Menu_Navigation+0x3c>
    1320:	08 95       	ret
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	49 f0       	breq	.+18     	; 0x1338 <Menu_Navigation+0x2e>
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	09 f0       	breq	.+2      	; 0x132c <Menu_Navigation+0x22>
    132a:	4d c0       	rjmp	.+154    	; 0x13c6 <Menu_Navigation+0xbc>
    132c:	0e 94 a7 08 	call	0x114e	; 0x114e <Change_Child>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <hold_joycon>
    1336:	08 95       	ret
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	0e 94 a7 08 	call	0x114e	; 0x114e <Change_Child>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <hold_joycon>
    1344:	08 95       	ret
    1346:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <current_menu>
    134a:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <current_menu+0x1>
    134e:	86 85       	ldd	r24, Z+14	; 0x0e
    1350:	97 85       	ldd	r25, Z+15	; 0x0f
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	c1 f1       	breq	.+112    	; 0x13c6 <Menu_Navigation+0xbc>
    1356:	f0 93 5d 03 	sts	0x035D, r31	; 0x80035d <current_child+0x1>
    135a:	e0 93 5c 03 	sts	0x035C, r30	; 0x80035c <current_child>
    135e:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <current_menu+0x1>
    1362:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <current_menu>
    1366:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <current_child_num>
    136a:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <hold_joycon>
    1374:	08 95       	ret
    1376:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <current_menu>
    137a:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <current_menu+0x1>
    137e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <current_child_num>
    1382:	e8 2f       	mov	r30, r24
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	31 96       	adiw	r30, 0x01	; 1
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	e2 0f       	add	r30, r18
    138e:	f3 1f       	adc	r31, r19
    1390:	01 90       	ld	r0, Z+
    1392:	f0 81       	ld	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <Menu_Navigation+0xbc>
    139a:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <current_menu+0x1>
    139e:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <current_menu>
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <current_child+0x1>
    13aa:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <current_child>
    13ae:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <current_child_num>
    13b2:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <hold_joycon>
    13bc:	08 95       	ret
    13be:	81 11       	cpse	r24, r1
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <Menu_Navigation+0xbc>
    13c2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <hold_joycon>
    13c6:	08 95       	ret

000013c8 <Menu_Functionality>:
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	cb 54       	subi	r28, 0x4B	; 75
    13e6:	d1 09       	sbc	r29, r1
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <current_menu>
    13f6:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <current_menu+0x1>
    13fa:	81 89       	ldd	r24, Z+17	; 0x11
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	99 f0       	breq	.+38     	; 0x1426 <Menu_Functionality+0x5e>
    1400:	28 f4       	brcc	.+10     	; 0x140c <Menu_Functionality+0x44>
    1402:	88 23       	and	r24, r24
    1404:	51 f0       	breq	.+20     	; 0x141a <Menu_Functionality+0x52>
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	59 f0       	breq	.+22     	; 0x1420 <Menu_Functionality+0x58>
    140a:	a1 c0       	rjmp	.+322    	; 0x154e <Menu_Functionality+0x186>
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	b1 f0       	breq	.+44     	; 0x143c <Menu_Functionality+0x74>
    1410:	c0 f0       	brcs	.+48     	; 0x1442 <Menu_Functionality+0x7a>
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	09 f4       	brne	.+2      	; 0x1418 <Menu_Functionality+0x50>
    1416:	8f c0       	rjmp	.+286    	; 0x1536 <Menu_Functionality+0x16e>
    1418:	9a c0       	rjmp	.+308    	; 0x154e <Menu_Functionality+0x186>
    141a:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    141e:	99 c0       	rjmp	.+306    	; 0x1552 <Menu_Functionality+0x18a>
    1420:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    1424:	96 c0       	rjmp	.+300    	; 0x1552 <Menu_Functionality+0x18a>
    1426:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Get_Game_State>
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	09 f0       	breq	.+2      	; 0x1430 <Menu_Functionality+0x68>
    142e:	91 c0       	rjmp	.+290    	; 0x1552 <Menu_Functionality+0x18a>
    1430:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	0e 94 55 06 	call	0xcaa	; 0xcaa <Set_Gamestate>
    143a:	8b c0       	rjmp	.+278    	; 0x1552 <Menu_Functionality+0x18a>
    143c:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    1440:	88 c0       	rjmp	.+272    	; 0x1552 <Menu_Functionality+0x18a>
    1442:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Get_Highscore>
    144c:	9f 93       	push	r25
    144e:	8f 93       	push	r24
    1450:	80 e6       	ldi	r24, 0x60	; 96
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	9f 93       	push	r25
    1456:	8f 93       	push	r24
    1458:	5e 01       	movw	r10, r28
    145a:	8d e3       	ldi	r24, 0x3D	; 61
    145c:	a8 0e       	add	r10, r24
    145e:	b1 1c       	adc	r11, r1
    1460:	bf 92       	push	r11
    1462:	af 92       	push	r10
    1464:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Get_Highscore>
    146e:	9f 93       	push	r25
    1470:	8f 93       	push	r24
    1472:	88 e6       	ldi	r24, 0x68	; 104
    1474:	92 e0       	ldi	r25, 0x02	; 2
    1476:	9f 93       	push	r25
    1478:	8f 93       	push	r24
    147a:	6e 01       	movw	r12, r28
    147c:	9e e2       	ldi	r25, 0x2E	; 46
    147e:	c9 0e       	add	r12, r25
    1480:	d1 1c       	adc	r13, r1
    1482:	df 92       	push	r13
    1484:	cf 92       	push	r12
    1486:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Get_Highscore>
    1490:	9f 93       	push	r25
    1492:	8f 93       	push	r24
    1494:	80 e7       	ldi	r24, 0x70	; 112
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	9f 93       	push	r25
    149a:	8f 93       	push	r24
    149c:	7e 01       	movw	r14, r28
    149e:	8f e1       	ldi	r24, 0x1F	; 31
    14a0:	e8 0e       	add	r14, r24
    14a2:	f1 1c       	adc	r15, r1
    14a4:	ff 92       	push	r15
    14a6:	ef 92       	push	r14
    14a8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Get_Highscore>
    14b2:	9f 93       	push	r25
    14b4:	8f 93       	push	r24
    14b6:	88 e7       	ldi	r24, 0x78	; 120
    14b8:	92 e0       	ldi	r25, 0x02	; 2
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	8e 01       	movw	r16, r28
    14c0:	00 5f       	subi	r16, 0xF0	; 240
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	1f 93       	push	r17
    14c6:	0f 93       	push	r16
    14c8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
    14cc:	84 e0       	ldi	r24, 0x04	; 4
    14ce:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Get_Highscore>
    14d2:	9f 93       	push	r25
    14d4:	8f 93       	push	r24
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	9f 93       	push	r25
    14dc:	8f 93       	push	r24
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	4c 01       	movw	r8, r24
    14e4:	9f 93       	push	r25
    14e6:	8f 93       	push	r24
    14e8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sprintf>
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	88 e8       	ldi	r24, 0x88	; 136
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	c5 01       	movw	r24, r10
    14fe:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	63 e0       	ldi	r22, 0x03	; 3
    1506:	c6 01       	movw	r24, r12
    1508:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	64 e0       	ldi	r22, 0x04	; 4
    1510:	c7 01       	movw	r24, r14
    1512:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	65 e0       	ldi	r22, 0x05	; 5
    151a:	c8 01       	movw	r24, r16
    151c:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	66 e0       	ldi	r22, 0x06	; 6
    1524:	c4 01       	movw	r24, r8
    1526:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <Menu_Functionality+0x18a>
    1536:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Get_Game_State>
    153a:	85 30       	cpi	r24, 0x05	; 5
    153c:	51 f0       	breq	.+20     	; 0x1552 <Menu_Functionality+0x18a>
    153e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Get_Game_State>
    1542:	86 30       	cpi	r24, 0x06	; 6
    1544:	31 f0       	breq	.+12     	; 0x1552 <Menu_Functionality+0x18a>
    1546:	85 e0       	ldi	r24, 0x05	; 5
    1548:	0e 94 55 06 	call	0xcaa	; 0xcaa <Set_Gamestate>
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <Menu_Functionality+0x18a>
    154e:	0e 94 93 08 	call	0x1126	; 0x1126 <Update_Menu>
    1552:	c5 5b       	subi	r28, 0xB5	; 181
    1554:	df 4f       	sbci	r29, 0xFF	; 255
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	08 95       	ret

0000157a <Node_One_Init>:
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	64 97       	sbiw	r28, 0x14	; 20
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	0e 94 e7 06 	call	0xdce	; 0xdce <Oled_Reset>
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	84 e9       	ldi	r24, 0x94	; 148
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	8d e9       	ldi	r24, 0x9D	; 157
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	8c ea       	ldi	r24, 0xAC	; 172
    15b0:	92 e0       	ldi	r25, 0x02	; 2
    15b2:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	63 e0       	ldi	r22, 0x03	; 3
    15ba:	87 eb       	ldi	r24, 0xB7	; 183
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	64 e0       	ldi	r22, 0x04	; 4
    15c6:	85 ec       	ldi	r24, 0xC5	; 197
    15c8:	92 e0       	ldi	r25, 0x02	; 2
    15ca:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	65 e0       	ldi	r22, 0x05	; 5
    15d2:	8f ec       	ldi	r24, 0xCF	; 207
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	0e 94 2e 08 	call	0x105c	; 0x105c <Menu_Line_Change>
    15da:	8c ec       	ldi	r24, 0xCC	; 204
    15dc:	94 e0       	ldi	r25, 0x04	; 4
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <Node_One_Init+0x64>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <Node_One_Init+0x6a>
    15e4:	00 00       	nop
    15e6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Oled_Update>
    15ea:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Oled_Update>
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	2f ef       	ldi	r18, 0xFF	; 255
    15f2:	8c e2       	ldi	r24, 0x2C	; 44
    15f4:	91 50       	subi	r25, 0x01	; 1
    15f6:	20 40       	sbci	r18, 0x00	; 0
    15f8:	80 40       	sbci	r24, 0x00	; 0
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <Node_One_Init+0x7a>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <Node_One_Init+0x84>
    15fe:	00 c0       	rjmp	.+0      	; 0x1600 <Node_One_Init+0x86>
    1600:	0e 94 e7 06 	call	0xdce	; 0xdce <Oled_Reset>
    1604:	0e 94 45 07 	call	0xe8a	; 0xe8a <Print_Lunde>
    1608:	89 e0       	ldi	r24, 0x09	; 9
    160a:	8b 87       	std	Y+11, r24	; 0x0b
    160c:	8d 87       	std	Y+13, r24	; 0x0d
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	8c 87       	std	Y+12, r24	; 0x0c
    1612:	ce 01       	movw	r24, r28
    1614:	0b 96       	adiw	r24, 0x0b	; 11
    1616:	0e 94 b6 04 	call	0x96c	; 0x96c <Can_Send_Msg>
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	2f e7       	ldi	r18, 0x7F	; 127
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	91 50       	subi	r25, 0x01	; 1
    1622:	20 40       	sbci	r18, 0x00	; 0
    1624:	80 40       	sbci	r24, 0x00	; 0
    1626:	e1 f7       	brne	.-8      	; 0x1620 <Node_One_Init+0xa6>
    1628:	00 c0       	rjmp	.+0      	; 0x162a <Node_One_Init+0xb0>
    162a:	00 c0       	rjmp	.+0      	; 0x162c <Node_One_Init+0xb2>
    162c:	ce 01       	movw	r24, r28
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Can_Recieve_Msg>
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	8b 30       	cpi	r24, 0x0B	; 11
    1638:	51 f0       	breq	.+20     	; 0x164e <Node_One_Init+0xd4>
    163a:	9f ef       	ldi	r25, 0xFF	; 255
    163c:	2f e7       	ldi	r18, 0x7F	; 127
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	91 50       	subi	r25, 0x01	; 1
    1642:	20 40       	sbci	r18, 0x00	; 0
    1644:	80 40       	sbci	r24, 0x00	; 0
    1646:	e1 f7       	brne	.-8      	; 0x1640 <Node_One_Init+0xc6>
    1648:	00 c0       	rjmp	.+0      	; 0x164a <Node_One_Init+0xd0>
    164a:	00 c0       	rjmp	.+0      	; 0x164c <Node_One_Init+0xd2>
    164c:	e2 cf       	rjmp	.-60     	; 0x1612 <Node_One_Init+0x98>
    164e:	9f ef       	ldi	r25, 0xFF	; 255
    1650:	2f e7       	ldi	r18, 0x7F	; 127
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	91 50       	subi	r25, 0x01	; 1
    1656:	20 40       	sbci	r18, 0x00	; 0
    1658:	80 40       	sbci	r24, 0x00	; 0
    165a:	e1 f7       	brne	.-8      	; 0x1654 <Node_One_Init+0xda>
    165c:	00 c0       	rjmp	.+0      	; 0x165e <Node_One_Init+0xe4>
    165e:	00 c0       	rjmp	.+0      	; 0x1660 <Node_One_Init+0xe6>
    1660:	8f ed       	ldi	r24, 0xDF	; 223
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	9f 93       	push	r25
    1666:	8f 93       	push	r24
    1668:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <printf>
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	8d e1       	ldi	r24, 0x1D	; 29
    1672:	91 50       	subi	r25, 0x01	; 1
    1674:	20 40       	sbci	r18, 0x00	; 0
    1676:	80 40       	sbci	r24, 0x00	; 0
    1678:	e1 f7       	brne	.-8      	; 0x1672 <Node_One_Init+0xf8>
    167a:	00 c0       	rjmp	.+0      	; 0x167c <Node_One_Init+0x102>
    167c:	00 00       	nop
    167e:	0e 94 e7 06 	call	0xdce	; 0xdce <Oled_Reset>
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	64 96       	adiw	r28, 0x14	; 20
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <Move_To_Parent>:

void Move_To_Parent(void){
	current_menu = current_menu->parent;
    1698:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <current_menu>
    169c:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <current_menu+0x1>
    16a0:	86 85       	ldd	r24, Z+14	; 0x0e
    16a2:	97 85       	ldd	r25, Z+15	; 0x0f
    16a4:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <current_menu+0x1>
    16a8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <current_menu>
    16ac:	08 95       	ret

000016ae <__divmodhi4>:
    16ae:	97 fb       	bst	r25, 7
    16b0:	07 2e       	mov	r0, r23
    16b2:	16 f4       	brtc	.+4      	; 0x16b8 <__divmodhi4+0xa>
    16b4:	00 94       	com	r0
    16b6:	07 d0       	rcall	.+14     	; 0x16c6 <__divmodhi4_neg1>
    16b8:	77 fd       	sbrc	r23, 7
    16ba:	09 d0       	rcall	.+18     	; 0x16ce <__divmodhi4_neg2>
    16bc:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__udivmodhi4>
    16c0:	07 fc       	sbrc	r0, 7
    16c2:	05 d0       	rcall	.+10     	; 0x16ce <__divmodhi4_neg2>
    16c4:	3e f4       	brtc	.+14     	; 0x16d4 <__divmodhi4_exit>

000016c6 <__divmodhi4_neg1>:
    16c6:	90 95       	com	r25
    16c8:	81 95       	neg	r24
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	08 95       	ret

000016ce <__divmodhi4_neg2>:
    16ce:	70 95       	com	r23
    16d0:	61 95       	neg	r22
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255

000016d4 <__divmodhi4_exit>:
    16d4:	08 95       	ret

000016d6 <__tablejump2__>:
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	05 90       	lpm	r0, Z+
    16dc:	f4 91       	lpm	r31, Z
    16de:	e0 2d       	mov	r30, r0
    16e0:	09 94       	ijmp

000016e2 <__udivmodhi4>:
    16e2:	aa 1b       	sub	r26, r26
    16e4:	bb 1b       	sub	r27, r27
    16e6:	51 e1       	ldi	r21, 0x11	; 17
    16e8:	07 c0       	rjmp	.+14     	; 0x16f8 <__udivmodhi4_ep>

000016ea <__udivmodhi4_loop>:
    16ea:	aa 1f       	adc	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	a6 17       	cp	r26, r22
    16f0:	b7 07       	cpc	r27, r23
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <__udivmodhi4_ep>
    16f4:	a6 1b       	sub	r26, r22
    16f6:	b7 0b       	sbc	r27, r23

000016f8 <__udivmodhi4_ep>:
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	5a 95       	dec	r21
    16fe:	a9 f7       	brne	.-22     	; 0x16ea <__udivmodhi4_loop>
    1700:	80 95       	com	r24
    1702:	90 95       	com	r25
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	08 95       	ret

0000170a <fdevopen>:
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	31 f4       	brne	.+12     	; 0x1722 <fdevopen+0x18>
    1716:	61 15       	cp	r22, r1
    1718:	71 05       	cpc	r23, r1
    171a:	19 f4       	brne	.+6      	; 0x1722 <fdevopen+0x18>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	3a c0       	rjmp	.+116    	; 0x1796 <fdevopen+0x8c>
    1722:	8b 01       	movw	r16, r22
    1724:	ec 01       	movw	r28, r24
    1726:	6e e0       	ldi	r22, 0x0E	; 14
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <calloc>
    1732:	fc 01       	movw	r30, r24
    1734:	89 2b       	or	r24, r25
    1736:	91 f3       	breq	.-28     	; 0x171c <fdevopen+0x12>
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	83 83       	std	Z+3, r24	; 0x03
    173c:	01 15       	cp	r16, r1
    173e:	11 05       	cpc	r17, r1
    1740:	71 f0       	breq	.+28     	; 0x175e <fdevopen+0x54>
    1742:	13 87       	std	Z+11, r17	; 0x0b
    1744:	02 87       	std	Z+10, r16	; 0x0a
    1746:	81 e8       	ldi	r24, 0x81	; 129
    1748:	83 83       	std	Z+3, r24	; 0x03
    174a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <__iob>
    174e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <__iob+0x1>
    1752:	89 2b       	or	r24, r25
    1754:	21 f4       	brne	.+8      	; 0x175e <fdevopen+0x54>
    1756:	f0 93 5f 03 	sts	0x035F, r31	; 0x80035f <__iob+0x1>
    175a:	e0 93 5e 03 	sts	0x035E, r30	; 0x80035e <__iob>
    175e:	20 97       	sbiw	r28, 0x00	; 0
    1760:	c9 f0       	breq	.+50     	; 0x1794 <fdevopen+0x8a>
    1762:	d1 87       	std	Z+9, r29	; 0x09
    1764:	c0 87       	std	Z+8, r28	; 0x08
    1766:	83 81       	ldd	r24, Z+3	; 0x03
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	83 83       	std	Z+3, r24	; 0x03
    176c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__iob+0x2>
    1770:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__iob+0x3>
    1774:	89 2b       	or	r24, r25
    1776:	71 f4       	brne	.+28     	; 0x1794 <fdevopen+0x8a>
    1778:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__iob+0x3>
    177c:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__iob+0x2>
    1780:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__iob+0x4>
    1784:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <__iob+0x5>
    1788:	89 2b       	or	r24, r25
    178a:	21 f4       	brne	.+8      	; 0x1794 <fdevopen+0x8a>
    178c:	f0 93 63 03 	sts	0x0363, r31	; 0x800363 <__iob+0x5>
    1790:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <__iob+0x4>
    1794:	cf 01       	movw	r24, r30
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	08 95       	ret

000017a0 <printf>:
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e6 ed       	ldi	r30, 0xD6	; 214
    17a6:	fb e0       	ldi	r31, 0x0B	; 11
    17a8:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__prologue_saves__+0x20>
    17ac:	ae 01       	movw	r20, r28
    17ae:	4b 5f       	subi	r20, 0xFB	; 251
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	fa 01       	movw	r30, r20
    17b4:	61 91       	ld	r22, Z+
    17b6:	71 91       	ld	r23, Z+
    17b8:	af 01       	movw	r20, r30
    17ba:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__iob+0x2>
    17be:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__iob+0x3>
    17c2:	0e 94 08 0c 	call	0x1810	; 0x1810 <vfprintf>
    17c6:	e2 e0       	ldi	r30, 0x02	; 2
    17c8:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__epilogue_restores__+0x20>

000017cc <sprintf>:
    17cc:	ae e0       	ldi	r26, 0x0E	; 14
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ec ee       	ldi	r30, 0xEC	; 236
    17d2:	fb e0       	ldi	r31, 0x0B	; 11
    17d4:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__+0x1c>
    17d8:	0d 89       	ldd	r16, Y+21	; 0x15
    17da:	1e 89       	ldd	r17, Y+22	; 0x16
    17dc:	86 e0       	ldi	r24, 0x06	; 6
    17de:	8c 83       	std	Y+4, r24	; 0x04
    17e0:	1a 83       	std	Y+2, r17	; 0x02
    17e2:	09 83       	std	Y+1, r16	; 0x01
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	9f e7       	ldi	r25, 0x7F	; 127
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
    17ec:	ae 01       	movw	r20, r28
    17ee:	47 5e       	subi	r20, 0xE7	; 231
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	6f 89       	ldd	r22, Y+23	; 0x17
    17f4:	78 8d       	ldd	r23, Y+24	; 0x18
    17f6:	ce 01       	movw	r24, r28
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	0e 94 08 0c 	call	0x1810	; 0x1810 <vfprintf>
    17fe:	ef 81       	ldd	r30, Y+7	; 0x07
    1800:	f8 85       	ldd	r31, Y+8	; 0x08
    1802:	e0 0f       	add	r30, r16
    1804:	f1 1f       	adc	r31, r17
    1806:	10 82       	st	Z, r1
    1808:	2e 96       	adiw	r28, 0x0e	; 14
    180a:	e4 e0       	ldi	r30, 0x04	; 4
    180c:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__+0x1c>

00001810 <vfprintf>:
    1810:	ab e0       	ldi	r26, 0x0B	; 11
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ee e0       	ldi	r30, 0x0E	; 14
    1816:	fc e0       	ldi	r31, 0x0C	; 12
    1818:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__prologue_saves__>
    181c:	6c 01       	movw	r12, r24
    181e:	7b 01       	movw	r14, r22
    1820:	8a 01       	movw	r16, r20
    1822:	fc 01       	movw	r30, r24
    1824:	17 82       	std	Z+7, r1	; 0x07
    1826:	16 82       	std	Z+6, r1	; 0x06
    1828:	83 81       	ldd	r24, Z+3	; 0x03
    182a:	81 ff       	sbrs	r24, 1
    182c:	cc c1       	rjmp	.+920    	; 0x1bc6 <vfprintf+0x3b6>
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	3c 01       	movw	r6, r24
    1834:	f6 01       	movw	r30, r12
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	f7 01       	movw	r30, r14
    183a:	93 fd       	sbrc	r25, 3
    183c:	85 91       	lpm	r24, Z+
    183e:	93 ff       	sbrs	r25, 3
    1840:	81 91       	ld	r24, Z+
    1842:	7f 01       	movw	r14, r30
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <vfprintf+0x3a>
    1848:	ba c1       	rjmp	.+884    	; 0x1bbe <vfprintf+0x3ae>
    184a:	85 32       	cpi	r24, 0x25	; 37
    184c:	39 f4       	brne	.+14     	; 0x185c <vfprintf+0x4c>
    184e:	93 fd       	sbrc	r25, 3
    1850:	85 91       	lpm	r24, Z+
    1852:	93 ff       	sbrs	r25, 3
    1854:	81 91       	ld	r24, Z+
    1856:	7f 01       	movw	r14, r30
    1858:	85 32       	cpi	r24, 0x25	; 37
    185a:	29 f4       	brne	.+10     	; 0x1866 <vfprintf+0x56>
    185c:	b6 01       	movw	r22, r12
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1864:	e7 cf       	rjmp	.-50     	; 0x1834 <vfprintf+0x24>
    1866:	91 2c       	mov	r9, r1
    1868:	21 2c       	mov	r2, r1
    186a:	31 2c       	mov	r3, r1
    186c:	ff e1       	ldi	r31, 0x1F	; 31
    186e:	f3 15       	cp	r31, r3
    1870:	d8 f0       	brcs	.+54     	; 0x18a8 <vfprintf+0x98>
    1872:	8b 32       	cpi	r24, 0x2B	; 43
    1874:	79 f0       	breq	.+30     	; 0x1894 <vfprintf+0x84>
    1876:	38 f4       	brcc	.+14     	; 0x1886 <vfprintf+0x76>
    1878:	80 32       	cpi	r24, 0x20	; 32
    187a:	79 f0       	breq	.+30     	; 0x189a <vfprintf+0x8a>
    187c:	83 32       	cpi	r24, 0x23	; 35
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <vfprintf+0x98>
    1880:	23 2d       	mov	r18, r3
    1882:	20 61       	ori	r18, 0x10	; 16
    1884:	1d c0       	rjmp	.+58     	; 0x18c0 <vfprintf+0xb0>
    1886:	8d 32       	cpi	r24, 0x2D	; 45
    1888:	61 f0       	breq	.+24     	; 0x18a2 <vfprintf+0x92>
    188a:	80 33       	cpi	r24, 0x30	; 48
    188c:	69 f4       	brne	.+26     	; 0x18a8 <vfprintf+0x98>
    188e:	23 2d       	mov	r18, r3
    1890:	21 60       	ori	r18, 0x01	; 1
    1892:	16 c0       	rjmp	.+44     	; 0x18c0 <vfprintf+0xb0>
    1894:	83 2d       	mov	r24, r3
    1896:	82 60       	ori	r24, 0x02	; 2
    1898:	38 2e       	mov	r3, r24
    189a:	e3 2d       	mov	r30, r3
    189c:	e4 60       	ori	r30, 0x04	; 4
    189e:	3e 2e       	mov	r3, r30
    18a0:	2a c0       	rjmp	.+84     	; 0x18f6 <vfprintf+0xe6>
    18a2:	f3 2d       	mov	r31, r3
    18a4:	f8 60       	ori	r31, 0x08	; 8
    18a6:	1d c0       	rjmp	.+58     	; 0x18e2 <vfprintf+0xd2>
    18a8:	37 fc       	sbrc	r3, 7
    18aa:	2d c0       	rjmp	.+90     	; 0x1906 <vfprintf+0xf6>
    18ac:	20 ed       	ldi	r18, 0xD0	; 208
    18ae:	28 0f       	add	r18, r24
    18b0:	2a 30       	cpi	r18, 0x0A	; 10
    18b2:	40 f0       	brcs	.+16     	; 0x18c4 <vfprintf+0xb4>
    18b4:	8e 32       	cpi	r24, 0x2E	; 46
    18b6:	b9 f4       	brne	.+46     	; 0x18e6 <vfprintf+0xd6>
    18b8:	36 fc       	sbrc	r3, 6
    18ba:	81 c1       	rjmp	.+770    	; 0x1bbe <vfprintf+0x3ae>
    18bc:	23 2d       	mov	r18, r3
    18be:	20 64       	ori	r18, 0x40	; 64
    18c0:	32 2e       	mov	r3, r18
    18c2:	19 c0       	rjmp	.+50     	; 0x18f6 <vfprintf+0xe6>
    18c4:	36 fe       	sbrs	r3, 6
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0xc4>
    18c8:	8a e0       	ldi	r24, 0x0A	; 10
    18ca:	98 9e       	mul	r9, r24
    18cc:	20 0d       	add	r18, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	92 2e       	mov	r9, r18
    18d2:	11 c0       	rjmp	.+34     	; 0x18f6 <vfprintf+0xe6>
    18d4:	ea e0       	ldi	r30, 0x0A	; 10
    18d6:	2e 9e       	mul	r2, r30
    18d8:	20 0d       	add	r18, r0
    18da:	11 24       	eor	r1, r1
    18dc:	22 2e       	mov	r2, r18
    18de:	f3 2d       	mov	r31, r3
    18e0:	f0 62       	ori	r31, 0x20	; 32
    18e2:	3f 2e       	mov	r3, r31
    18e4:	08 c0       	rjmp	.+16     	; 0x18f6 <vfprintf+0xe6>
    18e6:	8c 36       	cpi	r24, 0x6C	; 108
    18e8:	21 f4       	brne	.+8      	; 0x18f2 <vfprintf+0xe2>
    18ea:	83 2d       	mov	r24, r3
    18ec:	80 68       	ori	r24, 0x80	; 128
    18ee:	38 2e       	mov	r3, r24
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0xe6>
    18f2:	88 36       	cpi	r24, 0x68	; 104
    18f4:	41 f4       	brne	.+16     	; 0x1906 <vfprintf+0xf6>
    18f6:	f7 01       	movw	r30, r14
    18f8:	93 fd       	sbrc	r25, 3
    18fa:	85 91       	lpm	r24, Z+
    18fc:	93 ff       	sbrs	r25, 3
    18fe:	81 91       	ld	r24, Z+
    1900:	7f 01       	movw	r14, r30
    1902:	81 11       	cpse	r24, r1
    1904:	b3 cf       	rjmp	.-154    	; 0x186c <vfprintf+0x5c>
    1906:	98 2f       	mov	r25, r24
    1908:	9f 7d       	andi	r25, 0xDF	; 223
    190a:	95 54       	subi	r25, 0x45	; 69
    190c:	93 30       	cpi	r25, 0x03	; 3
    190e:	28 f4       	brcc	.+10     	; 0x191a <vfprintf+0x10a>
    1910:	0c 5f       	subi	r16, 0xFC	; 252
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	9f e3       	ldi	r25, 0x3F	; 63
    1916:	99 83       	std	Y+1, r25	; 0x01
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x124>
    191a:	83 36       	cpi	r24, 0x63	; 99
    191c:	31 f0       	breq	.+12     	; 0x192a <vfprintf+0x11a>
    191e:	83 37       	cpi	r24, 0x73	; 115
    1920:	71 f0       	breq	.+28     	; 0x193e <vfprintf+0x12e>
    1922:	83 35       	cpi	r24, 0x53	; 83
    1924:	09 f0       	breq	.+2      	; 0x1928 <vfprintf+0x118>
    1926:	59 c0       	rjmp	.+178    	; 0x19da <vfprintf+0x1ca>
    1928:	21 c0       	rjmp	.+66     	; 0x196c <vfprintf+0x15c>
    192a:	f8 01       	movw	r30, r16
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	0e 5f       	subi	r16, 0xFE	; 254
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	88 24       	eor	r8, r8
    1936:	83 94       	inc	r8
    1938:	91 2c       	mov	r9, r1
    193a:	53 01       	movw	r10, r6
    193c:	13 c0       	rjmp	.+38     	; 0x1964 <vfprintf+0x154>
    193e:	28 01       	movw	r4, r16
    1940:	f2 e0       	ldi	r31, 0x02	; 2
    1942:	4f 0e       	add	r4, r31
    1944:	51 1c       	adc	r5, r1
    1946:	f8 01       	movw	r30, r16
    1948:	a0 80       	ld	r10, Z
    194a:	b1 80       	ldd	r11, Z+1	; 0x01
    194c:	36 fe       	sbrs	r3, 6
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <vfprintf+0x146>
    1950:	69 2d       	mov	r22, r9
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x14a>
    1956:	6f ef       	ldi	r22, 0xFF	; 255
    1958:	7f ef       	ldi	r23, 0xFF	; 255
    195a:	c5 01       	movw	r24, r10
    195c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <strnlen>
    1960:	4c 01       	movw	r8, r24
    1962:	82 01       	movw	r16, r4
    1964:	f3 2d       	mov	r31, r3
    1966:	ff 77       	andi	r31, 0x7F	; 127
    1968:	3f 2e       	mov	r3, r31
    196a:	16 c0       	rjmp	.+44     	; 0x1998 <vfprintf+0x188>
    196c:	28 01       	movw	r4, r16
    196e:	22 e0       	ldi	r18, 0x02	; 2
    1970:	42 0e       	add	r4, r18
    1972:	51 1c       	adc	r5, r1
    1974:	f8 01       	movw	r30, r16
    1976:	a0 80       	ld	r10, Z
    1978:	b1 80       	ldd	r11, Z+1	; 0x01
    197a:	36 fe       	sbrs	r3, 6
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <vfprintf+0x174>
    197e:	69 2d       	mov	r22, r9
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <vfprintf+0x178>
    1984:	6f ef       	ldi	r22, 0xFF	; 255
    1986:	7f ef       	ldi	r23, 0xFF	; 255
    1988:	c5 01       	movw	r24, r10
    198a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <strnlen_P>
    198e:	4c 01       	movw	r8, r24
    1990:	f3 2d       	mov	r31, r3
    1992:	f0 68       	ori	r31, 0x80	; 128
    1994:	3f 2e       	mov	r3, r31
    1996:	82 01       	movw	r16, r4
    1998:	33 fc       	sbrc	r3, 3
    199a:	1b c0       	rjmp	.+54     	; 0x19d2 <vfprintf+0x1c2>
    199c:	82 2d       	mov	r24, r2
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	88 16       	cp	r8, r24
    19a2:	99 06       	cpc	r9, r25
    19a4:	b0 f4       	brcc	.+44     	; 0x19d2 <vfprintf+0x1c2>
    19a6:	b6 01       	movw	r22, r12
    19a8:	80 e2       	ldi	r24, 0x20	; 32
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    19b0:	2a 94       	dec	r2
    19b2:	f4 cf       	rjmp	.-24     	; 0x199c <vfprintf+0x18c>
    19b4:	f5 01       	movw	r30, r10
    19b6:	37 fc       	sbrc	r3, 7
    19b8:	85 91       	lpm	r24, Z+
    19ba:	37 fe       	sbrs	r3, 7
    19bc:	81 91       	ld	r24, Z+
    19be:	5f 01       	movw	r10, r30
    19c0:	b6 01       	movw	r22, r12
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    19c8:	21 10       	cpse	r2, r1
    19ca:	2a 94       	dec	r2
    19cc:	21 e0       	ldi	r18, 0x01	; 1
    19ce:	82 1a       	sub	r8, r18
    19d0:	91 08       	sbc	r9, r1
    19d2:	81 14       	cp	r8, r1
    19d4:	91 04       	cpc	r9, r1
    19d6:	71 f7       	brne	.-36     	; 0x19b4 <vfprintf+0x1a4>
    19d8:	e8 c0       	rjmp	.+464    	; 0x1baa <vfprintf+0x39a>
    19da:	84 36       	cpi	r24, 0x64	; 100
    19dc:	11 f0       	breq	.+4      	; 0x19e2 <vfprintf+0x1d2>
    19de:	89 36       	cpi	r24, 0x69	; 105
    19e0:	41 f5       	brne	.+80     	; 0x1a32 <vfprintf+0x222>
    19e2:	f8 01       	movw	r30, r16
    19e4:	37 fe       	sbrs	r3, 7
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <vfprintf+0x1e6>
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	0c 5f       	subi	r16, 0xFC	; 252
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	08 c0       	rjmp	.+16     	; 0x1a06 <vfprintf+0x1f6>
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	07 2e       	mov	r0, r23
    19fc:	00 0c       	add	r0, r0
    19fe:	88 0b       	sbc	r24, r24
    1a00:	99 0b       	sbc	r25, r25
    1a02:	0e 5f       	subi	r16, 0xFE	; 254
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	f3 2d       	mov	r31, r3
    1a08:	ff 76       	andi	r31, 0x6F	; 111
    1a0a:	3f 2e       	mov	r3, r31
    1a0c:	97 ff       	sbrs	r25, 7
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <vfprintf+0x212>
    1a10:	90 95       	com	r25
    1a12:	80 95       	com	r24
    1a14:	70 95       	com	r23
    1a16:	61 95       	neg	r22
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	f0 68       	ori	r31, 0x80	; 128
    1a20:	3f 2e       	mov	r3, r31
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	a3 01       	movw	r20, r6
    1a28:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__ultoa_invert>
    1a2c:	88 2e       	mov	r8, r24
    1a2e:	86 18       	sub	r8, r6
    1a30:	45 c0       	rjmp	.+138    	; 0x1abc <vfprintf+0x2ac>
    1a32:	85 37       	cpi	r24, 0x75	; 117
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <vfprintf+0x232>
    1a36:	23 2d       	mov	r18, r3
    1a38:	2f 7e       	andi	r18, 0xEF	; 239
    1a3a:	b2 2e       	mov	r11, r18
    1a3c:	2a e0       	ldi	r18, 0x0A	; 10
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	25 c0       	rjmp	.+74     	; 0x1a8c <vfprintf+0x27c>
    1a42:	93 2d       	mov	r25, r3
    1a44:	99 7f       	andi	r25, 0xF9	; 249
    1a46:	b9 2e       	mov	r11, r25
    1a48:	8f 36       	cpi	r24, 0x6F	; 111
    1a4a:	c1 f0       	breq	.+48     	; 0x1a7c <vfprintf+0x26c>
    1a4c:	18 f4       	brcc	.+6      	; 0x1a54 <vfprintf+0x244>
    1a4e:	88 35       	cpi	r24, 0x58	; 88
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <vfprintf+0x260>
    1a52:	b5 c0       	rjmp	.+362    	; 0x1bbe <vfprintf+0x3ae>
    1a54:	80 37       	cpi	r24, 0x70	; 112
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <vfprintf+0x24e>
    1a58:	88 37       	cpi	r24, 0x78	; 120
    1a5a:	21 f0       	breq	.+8      	; 0x1a64 <vfprintf+0x254>
    1a5c:	b0 c0       	rjmp	.+352    	; 0x1bbe <vfprintf+0x3ae>
    1a5e:	e9 2f       	mov	r30, r25
    1a60:	e0 61       	ori	r30, 0x10	; 16
    1a62:	be 2e       	mov	r11, r30
    1a64:	b4 fe       	sbrs	r11, 4
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <vfprintf+0x272>
    1a68:	fb 2d       	mov	r31, r11
    1a6a:	f4 60       	ori	r31, 0x04	; 4
    1a6c:	bf 2e       	mov	r11, r31
    1a6e:	09 c0       	rjmp	.+18     	; 0x1a82 <vfprintf+0x272>
    1a70:	34 fe       	sbrs	r3, 4
    1a72:	0a c0       	rjmp	.+20     	; 0x1a88 <vfprintf+0x278>
    1a74:	29 2f       	mov	r18, r25
    1a76:	26 60       	ori	r18, 0x06	; 6
    1a78:	b2 2e       	mov	r11, r18
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x278>
    1a7c:	28 e0       	ldi	r18, 0x08	; 8
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <vfprintf+0x27c>
    1a82:	20 e1       	ldi	r18, 0x10	; 16
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <vfprintf+0x27c>
    1a88:	20 e1       	ldi	r18, 0x10	; 16
    1a8a:	32 e0       	ldi	r19, 0x02	; 2
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	b7 fe       	sbrs	r11, 7
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <vfprintf+0x290>
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0c 5f       	subi	r16, 0xFC	; 252
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <vfprintf+0x29c>
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 5f       	subi	r16, 0xFE	; 254
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	a3 01       	movw	r20, r6
    1aae:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__ultoa_invert>
    1ab2:	88 2e       	mov	r8, r24
    1ab4:	86 18       	sub	r8, r6
    1ab6:	fb 2d       	mov	r31, r11
    1ab8:	ff 77       	andi	r31, 0x7F	; 127
    1aba:	3f 2e       	mov	r3, r31
    1abc:	36 fe       	sbrs	r3, 6
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <vfprintf+0x2ca>
    1ac0:	23 2d       	mov	r18, r3
    1ac2:	2e 7f       	andi	r18, 0xFE	; 254
    1ac4:	a2 2e       	mov	r10, r18
    1ac6:	89 14       	cp	r8, r9
    1ac8:	58 f4       	brcc	.+22     	; 0x1ae0 <vfprintf+0x2d0>
    1aca:	34 fe       	sbrs	r3, 4
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <vfprintf+0x2d4>
    1ace:	32 fc       	sbrc	r3, 2
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <vfprintf+0x2d4>
    1ad2:	83 2d       	mov	r24, r3
    1ad4:	8e 7e       	andi	r24, 0xEE	; 238
    1ad6:	a8 2e       	mov	r10, r24
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <vfprintf+0x2d4>
    1ada:	b8 2c       	mov	r11, r8
    1adc:	a3 2c       	mov	r10, r3
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <vfprintf+0x2d6>
    1ae0:	b8 2c       	mov	r11, r8
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x2d6>
    1ae4:	b9 2c       	mov	r11, r9
    1ae6:	a4 fe       	sbrs	r10, 4
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <vfprintf+0x2f8>
    1aea:	fe 01       	movw	r30, r28
    1aec:	e8 0d       	add	r30, r8
    1aee:	f1 1d       	adc	r31, r1
    1af0:	80 81       	ld	r24, Z
    1af2:	80 33       	cpi	r24, 0x30	; 48
    1af4:	21 f4       	brne	.+8      	; 0x1afe <vfprintf+0x2ee>
    1af6:	9a 2d       	mov	r25, r10
    1af8:	99 7e       	andi	r25, 0xE9	; 233
    1afa:	a9 2e       	mov	r10, r25
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <vfprintf+0x300>
    1afe:	a2 fe       	sbrs	r10, 2
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <vfprintf+0x2fe>
    1b02:	b3 94       	inc	r11
    1b04:	b3 94       	inc	r11
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <vfprintf+0x300>
    1b08:	8a 2d       	mov	r24, r10
    1b0a:	86 78       	andi	r24, 0x86	; 134
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <vfprintf+0x300>
    1b0e:	b3 94       	inc	r11
    1b10:	a3 fc       	sbrc	r10, 3
    1b12:	11 c0       	rjmp	.+34     	; 0x1b36 <vfprintf+0x326>
    1b14:	a0 fe       	sbrs	r10, 0
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <vfprintf+0x314>
    1b18:	b2 14       	cp	r11, r2
    1b1a:	88 f4       	brcc	.+34     	; 0x1b3e <vfprintf+0x32e>
    1b1c:	28 0c       	add	r2, r8
    1b1e:	92 2c       	mov	r9, r2
    1b20:	9b 18       	sub	r9, r11
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <vfprintf+0x330>
    1b24:	b2 14       	cp	r11, r2
    1b26:	60 f4       	brcc	.+24     	; 0x1b40 <vfprintf+0x330>
    1b28:	b6 01       	movw	r22, r12
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1b32:	b3 94       	inc	r11
    1b34:	f7 cf       	rjmp	.-18     	; 0x1b24 <vfprintf+0x314>
    1b36:	b2 14       	cp	r11, r2
    1b38:	18 f4       	brcc	.+6      	; 0x1b40 <vfprintf+0x330>
    1b3a:	2b 18       	sub	r2, r11
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <vfprintf+0x332>
    1b3e:	98 2c       	mov	r9, r8
    1b40:	21 2c       	mov	r2, r1
    1b42:	a4 fe       	sbrs	r10, 4
    1b44:	10 c0       	rjmp	.+32     	; 0x1b66 <vfprintf+0x356>
    1b46:	b6 01       	movw	r22, r12
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1b50:	a2 fe       	sbrs	r10, 2
    1b52:	17 c0       	rjmp	.+46     	; 0x1b82 <vfprintf+0x372>
    1b54:	a1 fc       	sbrc	r10, 1
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <vfprintf+0x34e>
    1b58:	88 e7       	ldi	r24, 0x78	; 120
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <vfprintf+0x352>
    1b5e:	88 e5       	ldi	r24, 0x58	; 88
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	b6 01       	movw	r22, r12
    1b64:	0c c0       	rjmp	.+24     	; 0x1b7e <vfprintf+0x36e>
    1b66:	8a 2d       	mov	r24, r10
    1b68:	86 78       	andi	r24, 0x86	; 134
    1b6a:	59 f0       	breq	.+22     	; 0x1b82 <vfprintf+0x372>
    1b6c:	a1 fe       	sbrs	r10, 1
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x364>
    1b70:	8b e2       	ldi	r24, 0x2B	; 43
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x366>
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	a7 fc       	sbrc	r10, 7
    1b78:	8d e2       	ldi	r24, 0x2D	; 45
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1b82:	89 14       	cp	r8, r9
    1b84:	38 f4       	brcc	.+14     	; 0x1b94 <vfprintf+0x384>
    1b86:	b6 01       	movw	r22, r12
    1b88:	80 e3       	ldi	r24, 0x30	; 48
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1b90:	9a 94       	dec	r9
    1b92:	f7 cf       	rjmp	.-18     	; 0x1b82 <vfprintf+0x372>
    1b94:	8a 94       	dec	r8
    1b96:	f3 01       	movw	r30, r6
    1b98:	e8 0d       	add	r30, r8
    1b9a:	f1 1d       	adc	r31, r1
    1b9c:	80 81       	ld	r24, Z
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1ba6:	81 10       	cpse	r8, r1
    1ba8:	f5 cf       	rjmp	.-22     	; 0x1b94 <vfprintf+0x384>
    1baa:	22 20       	and	r2, r2
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <vfprintf+0x3a0>
    1bae:	42 ce       	rjmp	.-892    	; 0x1834 <vfprintf+0x24>
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	80 e2       	ldi	r24, 0x20	; 32
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <fputc>
    1bba:	2a 94       	dec	r2
    1bbc:	f6 cf       	rjmp	.-20     	; 0x1baa <vfprintf+0x39a>
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	86 81       	ldd	r24, Z+6	; 0x06
    1bc2:	97 81       	ldd	r25, Z+7	; 0x07
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x3ba>
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	2b 96       	adiw	r28, 0x0b	; 11
    1bcc:	e2 e1       	ldi	r30, 0x12	; 18
    1bce:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__epilogue_restores__>

00001bd2 <calloc>:
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	86 9f       	mul	r24, r22
    1bdc:	80 01       	movw	r16, r0
    1bde:	87 9f       	mul	r24, r23
    1be0:	10 0d       	add	r17, r0
    1be2:	96 9f       	mul	r25, r22
    1be4:	10 0d       	add	r17, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	c8 01       	movw	r24, r16
    1bea:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <malloc>
    1bee:	ec 01       	movw	r28, r24
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	29 f0       	breq	.+10     	; 0x1bfe <calloc+0x2c>
    1bf4:	a8 01       	movw	r20, r16
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <memset>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	08 95       	ret

00001c0a <malloc>:
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	91 05       	cpc	r25, r1
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <malloc+0x12>
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <__flp>
    1c20:	f0 91 67 03 	lds	r31, 0x0367	; 0x800367 <__flp+0x1>
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	a0 e0       	ldi	r26, 0x00	; 0
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	30 97       	sbiw	r30, 0x00	; 0
    1c2e:	19 f1       	breq	.+70     	; 0x1c76 <malloc+0x6c>
    1c30:	40 81       	ld	r20, Z
    1c32:	51 81       	ldd	r21, Z+1	; 0x01
    1c34:	02 81       	ldd	r16, Z+2	; 0x02
    1c36:	13 81       	ldd	r17, Z+3	; 0x03
    1c38:	48 17       	cp	r20, r24
    1c3a:	59 07       	cpc	r21, r25
    1c3c:	c8 f0       	brcs	.+50     	; 0x1c70 <malloc+0x66>
    1c3e:	84 17       	cp	r24, r20
    1c40:	95 07       	cpc	r25, r21
    1c42:	69 f4       	brne	.+26     	; 0x1c5e <malloc+0x54>
    1c44:	10 97       	sbiw	r26, 0x00	; 0
    1c46:	31 f0       	breq	.+12     	; 0x1c54 <malloc+0x4a>
    1c48:	12 96       	adiw	r26, 0x02	; 2
    1c4a:	0c 93       	st	X, r16
    1c4c:	12 97       	sbiw	r26, 0x02	; 2
    1c4e:	13 96       	adiw	r26, 0x03	; 3
    1c50:	1c 93       	st	X, r17
    1c52:	27 c0       	rjmp	.+78     	; 0x1ca2 <malloc+0x98>
    1c54:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <__flp>
    1c58:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <__flp+0x1>
    1c5c:	22 c0       	rjmp	.+68     	; 0x1ca2 <malloc+0x98>
    1c5e:	21 15       	cp	r18, r1
    1c60:	31 05       	cpc	r19, r1
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <malloc+0x60>
    1c64:	42 17       	cp	r20, r18
    1c66:	53 07       	cpc	r21, r19
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <malloc+0x66>
    1c6a:	9a 01       	movw	r18, r20
    1c6c:	bd 01       	movw	r22, r26
    1c6e:	ef 01       	movw	r28, r30
    1c70:	df 01       	movw	r26, r30
    1c72:	f8 01       	movw	r30, r16
    1c74:	db cf       	rjmp	.-74     	; 0x1c2c <malloc+0x22>
    1c76:	21 15       	cp	r18, r1
    1c78:	31 05       	cpc	r19, r1
    1c7a:	f9 f0       	breq	.+62     	; 0x1cba <malloc+0xb0>
    1c7c:	28 1b       	sub	r18, r24
    1c7e:	39 0b       	sbc	r19, r25
    1c80:	24 30       	cpi	r18, 0x04	; 4
    1c82:	31 05       	cpc	r19, r1
    1c84:	80 f4       	brcc	.+32     	; 0x1ca6 <malloc+0x9c>
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	61 15       	cp	r22, r1
    1c8c:	71 05       	cpc	r23, r1
    1c8e:	21 f0       	breq	.+8      	; 0x1c98 <malloc+0x8e>
    1c90:	fb 01       	movw	r30, r22
    1c92:	93 83       	std	Z+3, r25	; 0x03
    1c94:	82 83       	std	Z+2, r24	; 0x02
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <malloc+0x96>
    1c98:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <__flp+0x1>
    1c9c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__flp>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	32 96       	adiw	r30, 0x02	; 2
    1ca4:	44 c0       	rjmp	.+136    	; 0x1d2e <malloc+0x124>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e2 0f       	add	r30, r18
    1caa:	f3 1f       	adc	r31, r19
    1cac:	81 93       	st	Z+, r24
    1cae:	91 93       	st	Z+, r25
    1cb0:	22 50       	subi	r18, 0x02	; 2
    1cb2:	31 09       	sbc	r19, r1
    1cb4:	39 83       	std	Y+1, r19	; 0x01
    1cb6:	28 83       	st	Y, r18
    1cb8:	3a c0       	rjmp	.+116    	; 0x1d2e <malloc+0x124>
    1cba:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1cbe:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1cc2:	23 2b       	or	r18, r19
    1cc4:	41 f4       	brne	.+16     	; 0x1cd6 <malloc+0xcc>
    1cc6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cce:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <__brkval+0x1>
    1cd2:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <__brkval>
    1cd6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cda:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1cde:	21 15       	cp	r18, r1
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	41 f4       	brne	.+16     	; 0x1cf4 <malloc+0xea>
    1ce4:	2d b7       	in	r18, 0x3d	; 61
    1ce6:	3e b7       	in	r19, 0x3e	; 62
    1ce8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1cec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1cf0:	24 1b       	sub	r18, r20
    1cf2:	35 0b       	sbc	r19, r21
    1cf4:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <__brkval>
    1cf8:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <__brkval+0x1>
    1cfc:	e2 17       	cp	r30, r18
    1cfe:	f3 07       	cpc	r31, r19
    1d00:	a0 f4       	brcc	.+40     	; 0x1d2a <malloc+0x120>
    1d02:	2e 1b       	sub	r18, r30
    1d04:	3f 0b       	sbc	r19, r31
    1d06:	28 17       	cp	r18, r24
    1d08:	39 07       	cpc	r19, r25
    1d0a:	78 f0       	brcs	.+30     	; 0x1d2a <malloc+0x120>
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	4e 5f       	subi	r20, 0xFE	; 254
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	24 17       	cp	r18, r20
    1d14:	35 07       	cpc	r19, r21
    1d16:	48 f0       	brcs	.+18     	; 0x1d2a <malloc+0x120>
    1d18:	4e 0f       	add	r20, r30
    1d1a:	5f 1f       	adc	r21, r31
    1d1c:	50 93 65 03 	sts	0x0365, r21	; 0x800365 <__brkval+0x1>
    1d20:	40 93 64 03 	sts	0x0364, r20	; 0x800364 <__brkval>
    1d24:	81 93       	st	Z+, r24
    1d26:	91 93       	st	Z+, r25
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <malloc+0x124>
    1d2a:	e0 e0       	ldi	r30, 0x00	; 0
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	cf 01       	movw	r24, r30
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <free>:
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <free+0xa>
    1d42:	81 c0       	rjmp	.+258    	; 0x1e46 <free+0x10c>
    1d44:	fc 01       	movw	r30, r24
    1d46:	32 97       	sbiw	r30, 0x02	; 2
    1d48:	13 82       	std	Z+3, r1	; 0x03
    1d4a:	12 82       	std	Z+2, r1	; 0x02
    1d4c:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <__flp>
    1d50:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <__flp+0x1>
    1d54:	10 97       	sbiw	r26, 0x00	; 0
    1d56:	81 f4       	brne	.+32     	; 0x1d78 <free+0x3e>
    1d58:	20 81       	ld	r18, Z
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	82 0f       	add	r24, r18
    1d5e:	93 1f       	adc	r25, r19
    1d60:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1d64:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1d68:	28 17       	cp	r18, r24
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	51 f5       	brne	.+84     	; 0x1dc2 <free+0x88>
    1d6e:	f0 93 65 03 	sts	0x0365, r31	; 0x800365 <__brkval+0x1>
    1d72:	e0 93 64 03 	sts	0x0364, r30	; 0x800364 <__brkval>
    1d76:	67 c0       	rjmp	.+206    	; 0x1e46 <free+0x10c>
    1d78:	ed 01       	movw	r28, r26
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	ce 17       	cp	r28, r30
    1d80:	df 07       	cpc	r29, r31
    1d82:	40 f4       	brcc	.+16     	; 0x1d94 <free+0x5a>
    1d84:	4a 81       	ldd	r20, Y+2	; 0x02
    1d86:	5b 81       	ldd	r21, Y+3	; 0x03
    1d88:	9e 01       	movw	r18, r28
    1d8a:	41 15       	cp	r20, r1
    1d8c:	51 05       	cpc	r21, r1
    1d8e:	f1 f0       	breq	.+60     	; 0x1dcc <free+0x92>
    1d90:	ea 01       	movw	r28, r20
    1d92:	f5 cf       	rjmp	.-22     	; 0x1d7e <free+0x44>
    1d94:	d3 83       	std	Z+3, r29	; 0x03
    1d96:	c2 83       	std	Z+2, r28	; 0x02
    1d98:	40 81       	ld	r20, Z
    1d9a:	51 81       	ldd	r21, Z+1	; 0x01
    1d9c:	84 0f       	add	r24, r20
    1d9e:	95 1f       	adc	r25, r21
    1da0:	c8 17       	cp	r28, r24
    1da2:	d9 07       	cpc	r29, r25
    1da4:	59 f4       	brne	.+22     	; 0x1dbc <free+0x82>
    1da6:	88 81       	ld	r24, Y
    1da8:	99 81       	ldd	r25, Y+1	; 0x01
    1daa:	84 0f       	add	r24, r20
    1dac:	95 1f       	adc	r25, r21
    1dae:	02 96       	adiw	r24, 0x02	; 2
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	93 83       	std	Z+3, r25	; 0x03
    1dba:	82 83       	std	Z+2, r24	; 0x02
    1dbc:	21 15       	cp	r18, r1
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <free+0x92>
    1dc2:	f0 93 67 03 	sts	0x0367, r31	; 0x800367 <__flp+0x1>
    1dc6:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <__flp>
    1dca:	3d c0       	rjmp	.+122    	; 0x1e46 <free+0x10c>
    1dcc:	e9 01       	movw	r28, r18
    1dce:	fb 83       	std	Y+3, r31	; 0x03
    1dd0:	ea 83       	std	Y+2, r30	; 0x02
    1dd2:	49 91       	ld	r20, Y+
    1dd4:	59 91       	ld	r21, Y+
    1dd6:	c4 0f       	add	r28, r20
    1dd8:	d5 1f       	adc	r29, r21
    1dda:	ec 17       	cp	r30, r28
    1ddc:	fd 07       	cpc	r31, r29
    1dde:	61 f4       	brne	.+24     	; 0x1df8 <free+0xbe>
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	84 0f       	add	r24, r20
    1de6:	95 1f       	adc	r25, r21
    1de8:	02 96       	adiw	r24, 0x02	; 2
    1dea:	e9 01       	movw	r28, r18
    1dec:	99 83       	std	Y+1, r25	; 0x01
    1dee:	88 83       	st	Y, r24
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	9b 83       	std	Y+3, r25	; 0x03
    1df6:	8a 83       	std	Y+2, r24	; 0x02
    1df8:	e0 e0       	ldi	r30, 0x00	; 0
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	12 96       	adiw	r26, 0x02	; 2
    1dfe:	8d 91       	ld	r24, X+
    1e00:	9c 91       	ld	r25, X
    1e02:	13 97       	sbiw	r26, 0x03	; 3
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	19 f0       	breq	.+6      	; 0x1e0e <free+0xd4>
    1e08:	fd 01       	movw	r30, r26
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	f7 cf       	rjmp	.-18     	; 0x1dfc <free+0xc2>
    1e0e:	8d 91       	ld	r24, X+
    1e10:	9c 91       	ld	r25, X
    1e12:	11 97       	sbiw	r26, 0x01	; 1
    1e14:	9d 01       	movw	r18, r26
    1e16:	2e 5f       	subi	r18, 0xFE	; 254
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	82 0f       	add	r24, r18
    1e1c:	93 1f       	adc	r25, r19
    1e1e:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1e22:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1e26:	28 17       	cp	r18, r24
    1e28:	39 07       	cpc	r19, r25
    1e2a:	69 f4       	brne	.+26     	; 0x1e46 <free+0x10c>
    1e2c:	30 97       	sbiw	r30, 0x00	; 0
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <free+0x100>
    1e30:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <__flp+0x1>
    1e34:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <__flp>
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <free+0x104>
    1e3a:	13 82       	std	Z+3, r1	; 0x03
    1e3c:	12 82       	std	Z+2, r1	; 0x02
    1e3e:	b0 93 65 03 	sts	0x0365, r27	; 0x800365 <__brkval+0x1>
    1e42:	a0 93 64 03 	sts	0x0364, r26	; 0x800364 <__brkval>
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <strnlen_P>:
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	05 90       	lpm	r0, Z+
    1e50:	61 50       	subi	r22, 0x01	; 1
    1e52:	70 40       	sbci	r23, 0x00	; 0
    1e54:	01 10       	cpse	r0, r1
    1e56:	d8 f7       	brcc	.-10     	; 0x1e4e <strnlen_P+0x2>
    1e58:	80 95       	com	r24
    1e5a:	90 95       	com	r25
    1e5c:	8e 0f       	add	r24, r30
    1e5e:	9f 1f       	adc	r25, r31
    1e60:	08 95       	ret

00001e62 <memset>:
    1e62:	dc 01       	movw	r26, r24
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <memset+0x6>
    1e66:	6d 93       	st	X+, r22
    1e68:	41 50       	subi	r20, 0x01	; 1
    1e6a:	50 40       	sbci	r21, 0x00	; 0
    1e6c:	e0 f7       	brcc	.-8      	; 0x1e66 <memset+0x4>
    1e6e:	08 95       	ret

00001e70 <strnlen>:
    1e70:	fc 01       	movw	r30, r24
    1e72:	61 50       	subi	r22, 0x01	; 1
    1e74:	70 40       	sbci	r23, 0x00	; 0
    1e76:	01 90       	ld	r0, Z+
    1e78:	01 10       	cpse	r0, r1
    1e7a:	d8 f7       	brcc	.-10     	; 0x1e72 <strnlen+0x2>
    1e7c:	80 95       	com	r24
    1e7e:	90 95       	com	r25
    1e80:	8e 0f       	add	r24, r30
    1e82:	9f 1f       	adc	r25, r31
    1e84:	08 95       	ret

00001e86 <fputc>:
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	fb 01       	movw	r30, r22
    1e90:	23 81       	ldd	r18, Z+3	; 0x03
    1e92:	21 fd       	sbrc	r18, 1
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <fputc+0x16>
    1e96:	8f ef       	ldi	r24, 0xFF	; 255
    1e98:	9f ef       	ldi	r25, 0xFF	; 255
    1e9a:	2c c0       	rjmp	.+88     	; 0x1ef4 <fputc+0x6e>
    1e9c:	22 ff       	sbrs	r18, 2
    1e9e:	16 c0       	rjmp	.+44     	; 0x1ecc <fputc+0x46>
    1ea0:	46 81       	ldd	r20, Z+6	; 0x06
    1ea2:	57 81       	ldd	r21, Z+7	; 0x07
    1ea4:	24 81       	ldd	r18, Z+4	; 0x04
    1ea6:	35 81       	ldd	r19, Z+5	; 0x05
    1ea8:	42 17       	cp	r20, r18
    1eaa:	53 07       	cpc	r21, r19
    1eac:	44 f4       	brge	.+16     	; 0x1ebe <fputc+0x38>
    1eae:	a0 81       	ld	r26, Z
    1eb0:	b1 81       	ldd	r27, Z+1	; 0x01
    1eb2:	9d 01       	movw	r18, r26
    1eb4:	2f 5f       	subi	r18, 0xFF	; 255
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	31 83       	std	Z+1, r19	; 0x01
    1eba:	20 83       	st	Z, r18
    1ebc:	8c 93       	st	X, r24
    1ebe:	26 81       	ldd	r18, Z+6	; 0x06
    1ec0:	37 81       	ldd	r19, Z+7	; 0x07
    1ec2:	2f 5f       	subi	r18, 0xFF	; 255
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	37 83       	std	Z+7, r19	; 0x07
    1ec8:	26 83       	std	Z+6, r18	; 0x06
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <fputc+0x6e>
    1ecc:	8b 01       	movw	r16, r22
    1ece:	ec 01       	movw	r28, r24
    1ed0:	fb 01       	movw	r30, r22
    1ed2:	00 84       	ldd	r0, Z+8	; 0x08
    1ed4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ed6:	e0 2d       	mov	r30, r0
    1ed8:	09 95       	icall
    1eda:	89 2b       	or	r24, r25
    1edc:	e1 f6       	brne	.-72     	; 0x1e96 <fputc+0x10>
    1ede:	d8 01       	movw	r26, r16
    1ee0:	16 96       	adiw	r26, 0x06	; 6
    1ee2:	8d 91       	ld	r24, X+
    1ee4:	9c 91       	ld	r25, X
    1ee6:	17 97       	sbiw	r26, 0x07	; 7
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	17 96       	adiw	r26, 0x07	; 7
    1eec:	9c 93       	st	X, r25
    1eee:	8e 93       	st	-X, r24
    1ef0:	16 97       	sbiw	r26, 0x06	; 6
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	08 95       	ret

00001efe <__ultoa_invert>:
    1efe:	fa 01       	movw	r30, r20
    1f00:	aa 27       	eor	r26, r26
    1f02:	28 30       	cpi	r18, 0x08	; 8
    1f04:	51 f1       	breq	.+84     	; 0x1f5a <__ultoa_invert+0x5c>
    1f06:	20 31       	cpi	r18, 0x10	; 16
    1f08:	81 f1       	breq	.+96     	; 0x1f6a <__ultoa_invert+0x6c>
    1f0a:	e8 94       	clt
    1f0c:	6f 93       	push	r22
    1f0e:	6e 7f       	andi	r22, 0xFE	; 254
    1f10:	6e 5f       	subi	r22, 0xFE	; 254
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	af 4f       	sbci	r26, 0xFF	; 255
    1f1a:	b1 e0       	ldi	r27, 0x01	; 1
    1f1c:	3e d0       	rcall	.+124    	; 0x1f9a <__ultoa_invert+0x9c>
    1f1e:	b4 e0       	ldi	r27, 0x04	; 4
    1f20:	3c d0       	rcall	.+120    	; 0x1f9a <__ultoa_invert+0x9c>
    1f22:	67 0f       	add	r22, r23
    1f24:	78 1f       	adc	r23, r24
    1f26:	89 1f       	adc	r24, r25
    1f28:	9a 1f       	adc	r25, r26
    1f2a:	a1 1d       	adc	r26, r1
    1f2c:	68 0f       	add	r22, r24
    1f2e:	79 1f       	adc	r23, r25
    1f30:	8a 1f       	adc	r24, r26
    1f32:	91 1d       	adc	r25, r1
    1f34:	a1 1d       	adc	r26, r1
    1f36:	6a 0f       	add	r22, r26
    1f38:	71 1d       	adc	r23, r1
    1f3a:	81 1d       	adc	r24, r1
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	a1 1d       	adc	r26, r1
    1f40:	20 d0       	rcall	.+64     	; 0x1f82 <__ultoa_invert+0x84>
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <__ultoa_invert+0x48>
    1f44:	68 94       	set
    1f46:	3f 91       	pop	r19
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	26 9f       	mul	r18, r22
    1f4c:	11 24       	eor	r1, r1
    1f4e:	30 19       	sub	r19, r0
    1f50:	30 5d       	subi	r19, 0xD0	; 208
    1f52:	31 93       	st	Z+, r19
    1f54:	de f6       	brtc	.-74     	; 0x1f0c <__ultoa_invert+0xe>
    1f56:	cf 01       	movw	r24, r30
    1f58:	08 95       	ret
    1f5a:	46 2f       	mov	r20, r22
    1f5c:	47 70       	andi	r20, 0x07	; 7
    1f5e:	40 5d       	subi	r20, 0xD0	; 208
    1f60:	41 93       	st	Z+, r20
    1f62:	b3 e0       	ldi	r27, 0x03	; 3
    1f64:	0f d0       	rcall	.+30     	; 0x1f84 <__ultoa_invert+0x86>
    1f66:	c9 f7       	brne	.-14     	; 0x1f5a <__ultoa_invert+0x5c>
    1f68:	f6 cf       	rjmp	.-20     	; 0x1f56 <__ultoa_invert+0x58>
    1f6a:	46 2f       	mov	r20, r22
    1f6c:	4f 70       	andi	r20, 0x0F	; 15
    1f6e:	40 5d       	subi	r20, 0xD0	; 208
    1f70:	4a 33       	cpi	r20, 0x3A	; 58
    1f72:	18 f0       	brcs	.+6      	; 0x1f7a <__ultoa_invert+0x7c>
    1f74:	49 5d       	subi	r20, 0xD9	; 217
    1f76:	31 fd       	sbrc	r19, 1
    1f78:	40 52       	subi	r20, 0x20	; 32
    1f7a:	41 93       	st	Z+, r20
    1f7c:	02 d0       	rcall	.+4      	; 0x1f82 <__ultoa_invert+0x84>
    1f7e:	a9 f7       	brne	.-22     	; 0x1f6a <__ultoa_invert+0x6c>
    1f80:	ea cf       	rjmp	.-44     	; 0x1f56 <__ultoa_invert+0x58>
    1f82:	b4 e0       	ldi	r27, 0x04	; 4
    1f84:	a6 95       	lsr	r26
    1f86:	97 95       	ror	r25
    1f88:	87 95       	ror	r24
    1f8a:	77 95       	ror	r23
    1f8c:	67 95       	ror	r22
    1f8e:	ba 95       	dec	r27
    1f90:	c9 f7       	brne	.-14     	; 0x1f84 <__ultoa_invert+0x86>
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	61 05       	cpc	r22, r1
    1f96:	71 05       	cpc	r23, r1
    1f98:	08 95       	ret
    1f9a:	9b 01       	movw	r18, r22
    1f9c:	ac 01       	movw	r20, r24
    1f9e:	0a 2e       	mov	r0, r26
    1fa0:	06 94       	lsr	r0
    1fa2:	57 95       	ror	r21
    1fa4:	47 95       	ror	r20
    1fa6:	37 95       	ror	r19
    1fa8:	27 95       	ror	r18
    1faa:	ba 95       	dec	r27
    1fac:	c9 f7       	brne	.-14     	; 0x1fa0 <__ultoa_invert+0xa2>
    1fae:	62 0f       	add	r22, r18
    1fb0:	73 1f       	adc	r23, r19
    1fb2:	84 1f       	adc	r24, r20
    1fb4:	95 1f       	adc	r25, r21
    1fb6:	a0 1d       	adc	r26, r0
    1fb8:	08 95       	ret

00001fba <__prologue_saves__>:
    1fba:	2f 92       	push	r2
    1fbc:	3f 92       	push	r3
    1fbe:	4f 92       	push	r4
    1fc0:	5f 92       	push	r5
    1fc2:	6f 92       	push	r6
    1fc4:	7f 92       	push	r7
    1fc6:	8f 92       	push	r8
    1fc8:	9f 92       	push	r9
    1fca:	af 92       	push	r10
    1fcc:	bf 92       	push	r11
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	ca 1b       	sub	r28, r26
    1fe4:	db 0b       	sbc	r29, r27
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	09 94       	ijmp

00001ff2 <__epilogue_restores__>:
    1ff2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ff4:	39 88       	ldd	r3, Y+17	; 0x11
    1ff6:	48 88       	ldd	r4, Y+16	; 0x10
    1ff8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ffa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ffc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ffe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2000:	9b 84       	ldd	r9, Y+11	; 0x0b
    2002:	aa 84       	ldd	r10, Y+10	; 0x0a
    2004:	b9 84       	ldd	r11, Y+9	; 0x09
    2006:	c8 84       	ldd	r12, Y+8	; 0x08
    2008:	df 80       	ldd	r13, Y+7	; 0x07
    200a:	ee 80       	ldd	r14, Y+6	; 0x06
    200c:	fd 80       	ldd	r15, Y+5	; 0x05
    200e:	0c 81       	ldd	r16, Y+4	; 0x04
    2010:	1b 81       	ldd	r17, Y+3	; 0x03
    2012:	aa 81       	ldd	r26, Y+2	; 0x02
    2014:	b9 81       	ldd	r27, Y+1	; 0x01
    2016:	ce 0f       	add	r28, r30
    2018:	d1 1d       	adc	r29, r1
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	ed 01       	movw	r28, r26
    2026:	08 95       	ret

00002028 <_exit>:
    2028:	f8 94       	cli

0000202a <__stop_program>:
    202a:	ff cf       	rjmp	.-2      	; 0x202a <__stop_program>
