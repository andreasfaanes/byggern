
byggern_node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000e6c  00000f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800130  00800130  00000f30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002baf  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001116  00000000  00000000  00003e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013af  00000000  00000000  00004f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  000062f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a38  00000000  00000000  00006930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000157a  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  000088e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bc 01 	jmp	0x378	; 0x378 <__ctors_end>
   4:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_1>
   8:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
   c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  10:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  14:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  18:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  1c:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_7>
  20:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  24:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  28:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  2c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  30:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  34:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  38:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  3c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  40:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_17>
  48:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  4c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  50:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  54:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  58:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  5c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  60:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  64:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  68:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
  6c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	e8 d8       	rcall	.-3632   	; 0xfffff242 <__eeprom_end+0xff7ef242>
  72:	b8 7f       	andi	r27, 0xF8	; 248
  74:	7f b8       	out	0x0f, r7	; 15
  76:	d8 e8       	ldi	r29, 0x88	; 136
  78:	e8 d8       	rcall	.-3632   	; 0xfffff24a <__eeprom_end+0xff7ef24a>
  7a:	b8 7f       	andi	r27, 0xF8	; 248
  7c:	7f b8       	out	0x0f, r7	; 15
  7e:	d8 e8       	ldi	r29, 0x88	; 136

00000080 <font8>:
	...
  88:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
  98:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
  a8:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
  b8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
  c8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
  d8:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
  e8:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
  f8:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
 108:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
 118:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
 128:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
 138:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
 148:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
 158:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
 168:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
 178:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
 188:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
 198:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
 1a8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
 1b8:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
 1c8:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
 1d8:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
 1e8:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
 1f8:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
 208:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
 218:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
 228:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
 238:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
 248:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
 258:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
 268:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
 278:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
 288:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
 298:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
 2a8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
 2b8:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
 2c8:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
 2d8:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
 2e8:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
 2f8:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
 308:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
 318:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
 328:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
 338:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
 348:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
 358:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
 368:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00000378 <__ctors_end>:
 378:	11 24       	eor	r1, r1
 37a:	1f be       	out	0x3f, r1	; 63
 37c:	cf ef       	ldi	r28, 0xFF	; 255
 37e:	d4 e0       	ldi	r29, 0x04	; 4
 380:	de bf       	out	0x3e, r29	; 62
 382:	cd bf       	out	0x3d, r28	; 61

00000384 <__do_copy_data>:
 384:	11 e0       	ldi	r17, 0x01	; 1
 386:	a0 e0       	ldi	r26, 0x00	; 0
 388:	b1 e0       	ldi	r27, 0x01	; 1
 38a:	ec e6       	ldi	r30, 0x6C	; 108
 38c:	fe e0       	ldi	r31, 0x0E	; 14
 38e:	02 c0       	rjmp	.+4      	; 0x394 <__do_copy_data+0x10>
 390:	05 90       	lpm	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	a0 33       	cpi	r26, 0x30	; 48
 396:	b1 07       	cpc	r27, r17
 398:	d9 f7       	brne	.-10     	; 0x390 <__do_copy_data+0xc>

0000039a <__do_clear_bss>:
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	a0 e3       	ldi	r26, 0x30	; 48
 39e:	b1 e0       	ldi	r27, 0x01	; 1
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <.do_clear_bss_start>

000003a2 <.do_clear_bss_loop>:
 3a2:	1d 92       	st	X+, r1

000003a4 <.do_clear_bss_start>:
 3a4:	a2 34       	cpi	r26, 0x42	; 66
 3a6:	b2 07       	cpc	r27, r18
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <.do_clear_bss_loop>
 3aa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 3ae:	0c 94 34 07 	jmp	0xe68	; 0xe68 <_exit>

000003b2 <__bad_interrupt>:
 3b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b6 <main>:
#include "sources/include/timer.h"
#include "sources/include/can.h"

int main(void)
{
	USART_Init(MYUBRR);
 3b6:	8f e1       	ldi	r24, 0x1F	; 31
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <USART_Init>
    Timer_Init();
 3be:	0e 94 c5 03 	call	0x78a	; 0x78a <Timer_Init>
	User_Control_Init();
 3c2:	0e 94 a1 04 	call	0x942	; 0x942 <User_Control_Init>
    Can_Init();
 3c6:	0e 94 4c 02 	call	0x498	; 0x498 <Can_Init>
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <main+0x14>

000003cc <__vector_17>:
}

// main timer
// might need a counter

ISR(TIMER0_OVF_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	Oled_Update();
 3ee:	0e 94 9e 03 	call	0x73c	; 0x73c <Oled_Update>
    Menu_Navigation();
 3f2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Menu_Navigation>
    Menu_Functionality();
 3f6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Menu_Functionality>
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_7>:

ISR(TIMER3_COMPA_vect){
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1

 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <Adc_Init>:
#include <avr/io.h>



void Adc_Init(){
	DDRE &= ~(1<<PINE0);
 430:	30 98       	cbi	0x06, 0	; 6
 432:	08 95       	ret

00000434 <Adc_Read>:
}

uint8_t Adc_Read(uint8_t channel){
	volatile char *ext_adc = (char *) ADC_MEM_START;

	if (channel > 3){return -1;}
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	40 f4       	brcc	.+16     	; 0x448 <Adc_Read+0x14>

	//check if it works right!
	*ext_adc = 0x04|channel;
 438:	84 60       	ori	r24, 0x04	; 4
 43a:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x12be>

	while (TEST_BIT(PINE, PINE0));
 43e:	28 99       	sbic	0x05, 0	; 5
 440:	fe cf       	rjmp	.-4      	; 0x43e <Adc_Read+0xa>

	return *ext_adc;
 442:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x12be>
 446:	08 95       	ret
}

uint8_t Adc_Read(uint8_t channel){
	volatile char *ext_adc = (char *) ADC_MEM_START;

	if (channel > 3){return -1;}
 448:	8f ef       	ldi	r24, 0xFF	; 255
	*ext_adc = 0x04|channel;

	while (TEST_BIT(PINE, PINE0));

	return *ext_adc;
 44a:	08 95       	ret

0000044c <Ascii_to_Bitmap_Custom>:

	for (i=0; i<5; i++)
	{
		OledCharacter[i] = pgm_read_byte(&(font5[t][i]));
	}
}
 44c:	20 e1       	ldi	r18, 0x10	; 16
 44e:	62 9f       	mul	r22, r18
 450:	f0 01       	movw	r30, r0
 452:	11 24       	eor	r1, r1
 454:	e0 59       	subi	r30, 0x90	; 144
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	dc 01       	movw	r26, r24
 45a:	9c 01       	movw	r18, r24
 45c:	20 5f       	subi	r18, 0xF0	; 240
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	94 91       	lpm	r25, Z
 462:	9d 93       	st	X+, r25
 464:	31 96       	adiw	r30, 0x01	; 1
 466:	a2 17       	cp	r26, r18
 468:	b3 07       	cpc	r27, r19
 46a:	d1 f7       	brne	.-12     	; 0x460 <Ascii_to_Bitmap_Custom+0x14>
 46c:	08 95       	ret

0000046e <Ascii_to_Bitmap_Font8>:

void Ascii_to_Bitmap_Font8(char* OledCharacter, char AsciiCharacter){
 46e:	e6 2f       	mov	r30, r22
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	e0 58       	subi	r30, 0x80	; 128
 480:	f0 40       	sbci	r31, 0x00	; 0
 482:	dc 01       	movw	r26, r24
 484:	9c 01       	movw	r18, r24
 486:	28 5f       	subi	r18, 0xF8	; 248
 488:	3f 4f       	sbci	r19, 0xFF	; 255
	int t;
	t = (int)AsciiCharacter-32;

	for (i=0; i<8; i++)
	{
		OledCharacter[i] = pgm_read_byte(&(font8[t][i]));
 48a:	94 91       	lpm	r25, Z
 48c:	9d 93       	st	X+, r25
 48e:	31 96       	adiw	r30, 0x01	; 1

	int i;
	int t;
	t = (int)AsciiCharacter-32;

	for (i=0; i<8; i++)
 490:	a2 17       	cp	r26, r18
 492:	b3 07       	cpc	r27, r19
 494:	d1 f7       	brne	.-12     	; 0x48a <Ascii_to_Bitmap_Font8+0x1c>
	{
		OledCharacter[i] = pgm_read_byte(&(font8[t][i]));
	}
}
 496:	08 95       	ret

00000498 <Can_Init>:
#include "include/MCP2515.h"
#include <avr/io.h>
#include <stdio.h>

void Can_Init(void){
	Spi_Init();
 498:	0e 94 b5 03 	call	0x76a	; 0x76a <Spi_Init>
	Mcp_Reset();
 49c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Mcp_Reset>
	Mcp_Modify_Bit(MCP_CANCTRL,0xff,MODE_CONFIG);
 4a0:	40 e8       	ldi	r20, 0x80	; 128
 4a2:	6f ef       	ldi	r22, 0xFF	; 255
 4a4:	8f e0       	ldi	r24, 0x0F	; 15
 4a6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Mcp_Modify_Bit>

	Mcp_Modify_Bit(MCP_RXB0CTRL,0x60,0xff);
 4aa:	4f ef       	ldi	r20, 0xFF	; 255
 4ac:	60 e6       	ldi	r22, 0x60	; 96
 4ae:	80 e6       	ldi	r24, 0x60	; 96
 4b0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Mcp_Modify_Bit>

	Mcp_Modify_Bit(MCP_CANINTE,0x01,0x01);
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	8b e2       	ldi	r24, 0x2B	; 43
 4ba:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Mcp_Modify_Bit>
	Mcp_Modify_Bit(MCP_CANCTRL, MODE_MASK,MODE_NORMAL);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	60 ee       	ldi	r22, 0xE0	; 224
 4c2:	8f e0       	ldi	r24, 0x0F	; 15
 4c4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Mcp_Modify_Bit>

	DDRD &= ~(1<<PD2);
 4c8:	8a 98       	cbi	0x11, 2	; 17

	GICR |= (1 << INT0);
 4ca:	8b b7       	in	r24, 0x3b	; 59
 4cc:	80 64       	ori	r24, 0x40	; 64
 4ce:	8b bf       	out	0x3b, r24	; 59
 4d0:	08 95       	ret

000004d2 <Ext_Mem_Init>:
#include <avr/io.h>
#include "include/settings.h"
#include "include/ext_mem.h"

void Ext_Mem_Init(){
	MCUCR |= (1<< SRE);
 4d2:	85 b7       	in	r24, 0x35	; 53
 4d4:	80 68       	ori	r24, 0x80	; 128
 4d6:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
 4d8:	80 b7       	in	r24, 0x30	; 48
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	80 bf       	out	0x30, r24	; 48
 4de:	08 95       	ret

000004e0 <Mcp_Reset>:

void Mcp_Request_to_Send(uint8_t buffer){
	Slave_Enable();
	Spi_Write(0x80 | (1<< buffer));
	Slave_Deselect();
}
 4e0:	0e 94 c1 03 	call	0x782	; 0x782 <Slave_Enable>
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	0e 94 bd 03 	call	0x77a	; 0x77a <Spi_Write>
 4ea:	0e 94 c3 03 	call	0x786	; 0x786 <Slave_Deselect>
 4ee:	08 95       	ret

000004f0 <Mcp_Modify_Bit>:
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	18 2f       	mov	r17, r24
 4f8:	d6 2f       	mov	r29, r22
 4fa:	c4 2f       	mov	r28, r20
 4fc:	0e 94 c1 03 	call	0x782	; 0x782 <Slave_Enable>
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	0e 94 bd 03 	call	0x77a	; 0x77a <Spi_Write>
 506:	81 2f       	mov	r24, r17
 508:	0e 94 bd 03 	call	0x77a	; 0x77a <Spi_Write>
 50c:	8d 2f       	mov	r24, r29
 50e:	0e 94 bd 03 	call	0x77a	; 0x77a <Spi_Write>
 512:	8c 2f       	mov	r24, r28
 514:	0e 94 bd 03 	call	0x77a	; 0x77a <Spi_Write>
 518:	0e 94 c3 03 	call	0x786	; 0x786 <Slave_Deselect>
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	08 95       	ret

00000524 <__vector_1>:



ISR(INT0_vect){
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
}
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <Oled_Data_Write>:
	Oled_Command_Write(0x07);
	for (uint16_t i = 0; i < 0x400; i++)
	{
		*oled_write = Lunde_Byte(i);
	}
}
 538:	e0 91 00 1c 	lds	r30, 0x1C00	; 0x801c00 <__bss_end+0x1abe>
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	f0 96       	adiw	r30, 0x30	; 48
 540:	f6 95       	lsr	r31
 542:	fe 2f       	mov	r31, r30
 544:	ee 27       	eor	r30, r30
 546:	f7 95       	ror	r31
 548:	e7 95       	ror	r30
 54a:	e6 0f       	add	r30, r22
 54c:	f1 1d       	adc	r31, r1
 54e:	80 83       	st	Z, r24
 550:	08 95       	ret

00000552 <Oled_Clear_Line>:
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	d8 2f       	mov	r29, r24
 558:	80 93 00 1c 	sts	0x1C00, r24	; 0x801c00 <__bss_end+0x1abe>
 55c:	c0 e0       	ldi	r28, 0x00	; 0
 55e:	6c 2f       	mov	r22, r28
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 9c 02 	call	0x538	; 0x538 <Oled_Data_Write>
 566:	cf 5f       	subi	r28, 0xFF	; 255
 568:	c0 38       	cpi	r28, 0x80	; 128
 56a:	c9 f7       	brne	.-14     	; 0x55e <Oled_Clear_Line+0xc>
 56c:	d0 93 00 1c 	sts	0x1C00, r29	; 0x801c00 <__bss_end+0x1abe>
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <Oled_Reset>:
 576:	cf 93       	push	r28
 578:	c0 e0       	ldi	r28, 0x00	; 0
 57a:	8c 2f       	mov	r24, r28
 57c:	0e 94 a9 02 	call	0x552	; 0x552 <Oled_Clear_Line>
 580:	cf 5f       	subi	r28, 0xFF	; 255
 582:	c8 30       	cpi	r28, 0x08	; 8
 584:	d1 f7       	brne	.-12     	; 0x57a <Oled_Reset+0x4>
 586:	10 92 00 1c 	sts	0x1C00, r1	; 0x801c00 <__bss_end+0x1abe>
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <Oled_Print_Char>:
 58e:	cf 92       	push	r12
 590:	df 92       	push	r13
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	28 97       	sbiw	r28, 0x08	; 8
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	06 2f       	mov	r16, r22
 5b0:	14 2f       	mov	r17, r20
 5b2:	68 2f       	mov	r22, r24
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	0e 94 37 02 	call	0x46e	; 0x46e <Ascii_to_Bitmap_Font8>
 5bc:	01 30       	cpi	r16, 0x01	; 1
 5be:	b1 f4       	brne	.+44     	; 0x5ec <Oled_Print_Char+0x5e>
 5c0:	11 0f       	add	r17, r17
 5c2:	11 0f       	add	r17, r17
 5c4:	11 0f       	add	r17, r17
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	7c 01       	movw	r14, r24
 5cc:	6e 01       	movw	r12, r28
 5ce:	99 e0       	ldi	r25, 0x09	; 9
 5d0:	c9 0e       	add	r12, r25
 5d2:	d1 1c       	adc	r13, r1
 5d4:	f7 01       	movw	r30, r14
 5d6:	81 91       	ld	r24, Z+
 5d8:	7f 01       	movw	r14, r30
 5da:	61 2f       	mov	r22, r17
 5dc:	80 95       	com	r24
 5de:	0e 94 9c 02 	call	0x538	; 0x538 <Oled_Data_Write>
 5e2:	1f 5f       	subi	r17, 0xFF	; 255
 5e4:	ce 14       	cp	r12, r14
 5e6:	df 04       	cpc	r13, r15
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <Oled_Print_Char+0x46>
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <Oled_Print_Char+0x86>
 5ec:	11 0f       	add	r17, r17
 5ee:	11 0f       	add	r17, r17
 5f0:	11 0f       	add	r17, r17
 5f2:	ce 01       	movw	r24, r28
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	7c 01       	movw	r14, r24
 5f8:	6e 01       	movw	r12, r28
 5fa:	99 e0       	ldi	r25, 0x09	; 9
 5fc:	c9 0e       	add	r12, r25
 5fe:	d1 1c       	adc	r13, r1
 600:	61 2f       	mov	r22, r17
 602:	f7 01       	movw	r30, r14
 604:	81 91       	ld	r24, Z+
 606:	7f 01       	movw	r14, r30
 608:	0e 94 9c 02 	call	0x538	; 0x538 <Oled_Data_Write>
 60c:	1f 5f       	subi	r17, 0xFF	; 255
 60e:	ec 14       	cp	r14, r12
 610:	fd 04       	cpc	r15, r13
 612:	b1 f7       	brne	.-20     	; 0x600 <Oled_Print_Char+0x72>
 614:	28 96       	adiw	r28, 0x08	; 8
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	df 90       	pop	r13
 62e:	cf 90       	pop	r12
 630:	08 95       	ret

00000632 <Oled_Print_Custom>:
 632:	cf 92       	push	r12
 634:	df 92       	push	r13
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	60 97       	sbiw	r28, 0x10	; 16
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	f6 2e       	mov	r15, r22
 652:	68 2f       	mov	r22, r24
 654:	ce 01       	movw	r24, r28
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	0e 94 26 02 	call	0x44c	; 0x44c <Ascii_to_Bitmap_Custom>
 65c:	ff 0c       	add	r15, r15
 65e:	ff 0c       	add	r15, r15
 660:	ff 0c       	add	r15, r15
 662:	8e 01       	movw	r16, r28
 664:	0f 5f       	subi	r16, 0xFF	; 255
 666:	1f 4f       	sbci	r17, 0xFF	; 255
 668:	6e 01       	movw	r12, r28
 66a:	81 e1       	ldi	r24, 0x11	; 17
 66c:	c8 0e       	add	r12, r24
 66e:	d1 1c       	adc	r13, r1
 670:	f8 01       	movw	r30, r16
 672:	81 91       	ld	r24, Z+
 674:	8f 01       	movw	r16, r30
 676:	6f 2d       	mov	r22, r15
 678:	80 95       	com	r24
 67a:	0e 94 9c 02 	call	0x538	; 0x538 <Oled_Data_Write>
 67e:	f3 94       	inc	r15
 680:	0c 15       	cp	r16, r12
 682:	1d 05       	cpc	r17, r13
 684:	a9 f7       	brne	.-22     	; 0x670 <Oled_Print_Custom+0x3e>
 686:	60 96       	adiw	r28, 0x10	; 16
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	df 90       	pop	r13
 69e:	cf 90       	pop	r12
 6a0:	08 95       	ret

000006a2 <Oled_Init>:

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
 6a2:	e0 e0       	ldi	r30, 0x00	; 0
 6a4:	f0 e1       	ldi	r31, 0x10	; 16
 6a6:	8e ea       	ldi	r24, 0xAE	; 174
 6a8:	80 83       	st	Z, r24
 6aa:	81 ea       	ldi	r24, 0xA1	; 161
 6ac:	80 83       	st	Z, r24
 6ae:	8a ed       	ldi	r24, 0xDA	; 218
 6b0:	80 83       	st	Z, r24
 6b2:	82 e1       	ldi	r24, 0x12	; 18
 6b4:	80 83       	st	Z, r24
 6b6:	88 ec       	ldi	r24, 0xC8	; 200
 6b8:	80 83       	st	Z, r24
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	80 83       	st	Z, r24
 6be:	10 82       	st	Z, r1
 6c0:	88 ea       	ldi	r24, 0xA8	; 168
 6c2:	80 83       	st	Z, r24
 6c4:	8f e3       	ldi	r24, 0x3F	; 63
 6c6:	80 83       	st	Z, r24
 6c8:	85 ed       	ldi	r24, 0xD5	; 213
 6ca:	80 83       	st	Z, r24
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	80 83       	st	Z, r24
 6d0:	8b ed       	ldi	r24, 0xDB	; 219
 6d2:	80 83       	st	Z, r24
 6d4:	80 e3       	ldi	r24, 0x30	; 48
 6d6:	80 83       	st	Z, r24
 6d8:	81 e8       	ldi	r24, 0x81	; 129
 6da:	80 83       	st	Z, r24
 6dc:	80 e5       	ldi	r24, 0x50	; 80
 6de:	80 83       	st	Z, r24
 6e0:	89 ed       	ldi	r24, 0xD9	; 217
 6e2:	80 83       	st	Z, r24
 6e4:	81 e2       	ldi	r24, 0x21	; 33
 6e6:	80 83       	st	Z, r24
 6e8:	8d ea       	ldi	r24, 0xAD	; 173
 6ea:	80 83       	st	Z, r24
 6ec:	10 82       	st	Z, r1
 6ee:	84 ea       	ldi	r24, 0xA4	; 164
 6f0:	80 83       	st	Z, r24
 6f2:	86 ea       	ldi	r24, 0xA6	; 166
 6f4:	80 83       	st	Z, r24
 6f6:	8f ea       	ldi	r24, 0xAF	; 175
 6f8:	80 83       	st	Z, r24

	Oled_Command_Write(0xa6); //set normal display

	Oled_Command_Write(0xaf); // display on

	Oled_Reset();
 6fa:	0e 94 bb 02 	call	0x576	; 0x576 <Oled_Reset>
 6fe:	08 95       	ret

00000700 <Oled_Print>:
}

void Oled_Print(char* characters, uint8_t inverted){
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	fc 01       	movw	r30, r24
	int char_number = 0;

	while((characters[char_number] != '\0') && (char_number < 16))
 70a:	80 81       	ld	r24, Z
 70c:	88 23       	and	r24, r24
 70e:	89 f0       	breq	.+34     	; 0x732 <Oled_Print+0x32>
 710:	d6 2f       	mov	r29, r22
 712:	8f 01       	movw	r16, r30
 714:	0f 5f       	subi	r16, 0xFF	; 255
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Oled_Print_Char(characters[char_number],inverted,char_number);
 71a:	4c 2f       	mov	r20, r28
 71c:	6d 2f       	mov	r22, r29
 71e:	0e 94 c7 02 	call	0x58e	; 0x58e <Oled_Print_Char>
}

void Oled_Print(char* characters, uint8_t inverted){
	int char_number = 0;

	while((characters[char_number] != '\0') && (char_number < 16))
 722:	f8 01       	movw	r30, r16
 724:	81 91       	ld	r24, Z+
 726:	8f 01       	movw	r16, r30
 728:	88 23       	and	r24, r24
 72a:	19 f0       	breq	.+6      	; 0x732 <Oled_Print+0x32>
 72c:	cf 5f       	subi	r28, 0xFF	; 255
 72e:	c0 31       	cpi	r28, 0x10	; 16
 730:	a1 f7       	brne	.-24     	; 0x71a <Oled_Print+0x1a>
	{
		Oled_Print_Char(characters[char_number],inverted,char_number);
		char_number++;
	}
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <Oled_Update>:

void Oled_Command_Write(uint8_t command)
{
	// send command to oled
	volatile char *oled_command = (char *) 0x1000;
	*oled_command = command;
 73c:	e0 e0       	ldi	r30, 0x00	; 0
 73e:	f0 e1       	ldi	r31, 0x10	; 16
 740:	81 e2       	ldi	r24, 0x21	; 33
 742:	80 83       	st	Z, r24
 744:	10 82       	st	Z, r1
 746:	8f e7       	ldi	r24, 0x7F	; 127
 748:	80 83       	st	Z, r24
 74a:	82 e2       	ldi	r24, 0x22	; 34
 74c:	80 83       	st	Z, r24
 74e:	10 82       	st	Z, r1
 750:	87 e0       	ldi	r24, 0x07	; 7
 752:	80 83       	st	Z, r24
 754:	e0 e0       	ldi	r30, 0x00	; 0
 756:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *sram_read = (char *) (0x1800);
	volatile char *oled_write = (char *) 0x1200;

	for (uint16_t i = 0; i < 0x400; i++)
	{
		*oled_write = sram_read[i];
 758:	a0 e0       	ldi	r26, 0x00	; 0
 75a:	b2 e1       	ldi	r27, 0x12	; 18
 75c:	81 91       	ld	r24, Z+
 75e:	8c 93       	st	X, r24
	Oled_Command_Write(0x07);

	volatile char *sram_read = (char *) (0x1800);
	volatile char *oled_write = (char *) 0x1200;

	for (uint16_t i = 0; i < 0x400; i++)
 760:	e1 15       	cp	r30, r1
 762:	8c e1       	ldi	r24, 0x1C	; 28
 764:	f8 07       	cpc	r31, r24
 766:	d1 f7       	brne	.-12     	; 0x75c <Oled_Update+0x20>
	{
		*oled_write = sram_read[i];
	}
 768:	08 95       	ret

0000076a <Spi_Init>:

uint8_t Spi_Read(void){
	SPDR = 0xaa;
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
}
 76a:	87 b3       	in	r24, 0x17	; 23
 76c:	80 6b       	ori	r24, 0xB0	; 176
 76e:	87 bb       	out	0x17, r24	; 23
 770:	be 98       	cbi	0x17, 6	; 23
 772:	8d b1       	in	r24, 0x0d	; 13
 774:	81 65       	ori	r24, 0x51	; 81
 776:	8d b9       	out	0x0d, r24	; 13
 778:	08 95       	ret

0000077a <Spi_Write>:
 77a:	8f b9       	out	0x0f, r24	; 15
 77c:	77 9b       	sbis	0x0e, 7	; 14
 77e:	fe cf       	rjmp	.-4      	; 0x77c <Spi_Write+0x2>
 780:	08 95       	ret

00000782 <Slave_Enable>:

void Slave_Enable(void){
	PORTB &= ~(1 << PINB4);
 782:	c4 98       	cbi	0x18, 4	; 24
 784:	08 95       	ret

00000786 <Slave_Deselect>:
}

void Slave_Deselect(void){
	PORTB |= (1 << PINB4);
 786:	c4 9a       	sbi	0x18, 4	; 24
 788:	08 95       	ret

0000078a <Timer_Init>:
#include <util/delay.h>

void Timer_Init(void){

	//Timer 0: Interrupt on timer overflow, prescaler set to 8
	TIMSK=(1<<TOIE0);
 78a:	82 e0       	ldi	r24, 0x02	; 2
 78c:	89 bf       	out	0x39, r24	; 57
	TCNT0=0x00; // start value for counter
 78e:	12 be       	out	0x32, r1	; 50
	TCCR0 = (1<<CS01);
 790:	83 bf       	out	0x33, r24	; 51


	//Timer 1: Toggle OC1A (channel A) on compare match, use fast PWM, OCR1A used as TOP, prescaler to 8
	TCCR1A |= (1 << COM1A0) | (1 << WGM11) | (1 << WGM10);
 792:	8f b5       	in	r24, 0x2f	; 47
 794:	83 64       	ori	r24, 0x43	; 67
 796:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << COM1A1);
 798:	8f b5       	in	r24, 0x2f	; 47
 79a:	8f 77       	andi	r24, 0x7F	; 127
 79c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 79e:	8e b5       	in	r24, 0x2e	; 46
 7a0:	88 61       	ori	r24, 0x18	; 24
 7a2:	8e bd       	out	0x2e, r24	; 46


	//Timer 3: Normal port operation, CTC mode, OCR3A as TOP
	TCCR3A &= ~(1 << COM3A1) & ~(1 << COM3A0) & ~(1 << WGM31) & ~(1 << WGM30);
 7a4:	eb e8       	ldi	r30, 0x8B	; 139
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	8c 73       	andi	r24, 0x3C	; 60
 7ac:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << WGM33);
 7ae:	ea e8       	ldi	r30, 0x8A	; 138
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	8f 7e       	andi	r24, 0xEF	; 239
 7b6:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32);
 7b8:	80 81       	ld	r24, Z
 7ba:	88 60       	ori	r24, 0x08	; 8
 7bc:	80 83       	st	Z, r24

	ETIMSK |= (1 << OCIE3A);//Set the compare match interrupt enable
 7be:	ed e7       	ldi	r30, 0x7D	; 125
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	80 61       	ori	r24, 0x10	; 16
 7c6:	80 83       	st	Z, r24
 7c8:	08 95       	ret

000007ca <USART_Transmit>:
// USART driver

// USART transmit
int USART_Transmit(char data, FILE *f){
	/*Wait for empty transmit buffer*/
	while(!(UCSR0A & (1<<UDRE0)));
 7ca:	5d 9b       	sbis	0x0b, 5	; 11
 7cc:	fe cf       	rjmp	.-4      	; 0x7ca <USART_Transmit>
	/* Put data into buffer, sends the data*/
	UDR0 = data;
 7ce:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	08 95       	ret

000007d6 <USART_Receive>:

int USART_Receive(FILE* f){
	/* Wait for data to be received*/
	while(!(UCSR0A & (1<<RXC0)));
 7d6:	5f 9b       	sbis	0x0b, 7	; 11
 7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <USART_Receive>
	/* Get and return received data from buffer*/
	return UDR0;
 7da:	8c b1       	in	r24, 0x0c	; 12
}
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	08 95       	ret

000007e0 <USART_Init>:
// USART init
int USART_Init(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr >> 8);
 7e0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 7e2:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter and receive interrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<< RXCIE0);
 7e4:	88 e9       	ldi	r24, 0x98	; 152
 7e6:	8a b9       	out	0x0a, r24	; 10
	/*Set frame format: 8data, 2 stop bit*/
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 7e8:	8e e8       	ldi	r24, 0x8E	; 142
 7ea:	80 bd       	out	0x20, r24	; 32

	usart = fdevopen(&USART_Transmit, &USART_Receive);
 7ec:	6b ee       	ldi	r22, 0xEB	; 235
 7ee:	73 e0       	ldi	r23, 0x03	; 3
 7f0:	85 ee       	ldi	r24, 0xE5	; 229
 7f2:	93 e0       	ldi	r25, 0x03	; 3
 7f4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fdevopen>
 7f8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <usart+0x1>
 7fc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <usart>

	return 0;
}
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	08 95       	ret

00000806 <Menu_Line_Change>:
	data.id = slider_id;
	data.length = 2;
	data.data[0] = slider_postion.left_slider;
	data.data[1] = slider_postion.right_slider;
	Can_Send_Msg(&data);
}
 806:	1f 93       	push	r17
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	ec 01       	movw	r28, r24
 80e:	86 2f       	mov	r24, r22
 810:	14 2f       	mov	r17, r20
 812:	0e 94 a9 02 	call	0x552	; 0x552 <Oled_Clear_Line>
 816:	61 2f       	mov	r22, r17
 818:	ce 01       	movw	r24, r28
 81a:	0e 94 80 03 	call	0x700	; 0x700 <Oled_Print>
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	08 95       	ret

00000826 <Update_Menu>:
 826:	cf 93       	push	r28
 828:	0e 94 bb 02 	call	0x576	; 0x576 <Oled_Reset>
 82c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current_menu>
 830:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current_menu+0x1>
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	91 81       	ldd	r25, Z+1	; 0x01
 83c:	0e 94 03 04 	call	0x806	; 0x806 <Menu_Line_Change>
 840:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <current_menu>
 844:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <current_menu+0x1>
 848:	50 96       	adiw	r26, 0x10	; 16
 84a:	8c 91       	ld	r24, X
 84c:	50 97       	sbiw	r26, 0x10	; 16
 84e:	88 23       	and	r24, r24
 850:	b9 f1       	breq	.+110    	; 0x8c0 <Update_Menu+0x9a>
 852:	c1 e0       	ldi	r28, 0x01	; 1
 854:	01 c0       	rjmp	.+2      	; 0x858 <Update_Menu+0x32>
 856:	c9 2f       	mov	r28, r25
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	8c 0f       	add	r24, r28
 85c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <current_child_num>
 860:	98 13       	cpse	r25, r24
 862:	12 c0       	rjmp	.+36     	; 0x888 <Update_Menu+0x62>
 864:	89 2f       	mov	r24, r25
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	fd 01       	movw	r30, r26
 870:	e8 0f       	add	r30, r24
 872:	f9 1f       	adc	r31, r25
 874:	01 90       	ld	r0, Z+
 876:	f0 81       	ld	r31, Z
 878:	e0 2d       	mov	r30, r0
 87a:	41 e0       	ldi	r20, 0x01	; 1
 87c:	6c 2f       	mov	r22, r28
 87e:	80 81       	ld	r24, Z
 880:	91 81       	ldd	r25, Z+1	; 0x01
 882:	0e 94 03 04 	call	0x806	; 0x806 <Menu_Line_Change>
 886:	10 c0       	rjmp	.+32     	; 0x8a8 <Update_Menu+0x82>
 888:	e8 2f       	mov	r30, r24
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	31 96       	adiw	r30, 0x01	; 1
 88e:	ee 0f       	add	r30, r30
 890:	ff 1f       	adc	r31, r31
 892:	ea 0f       	add	r30, r26
 894:	fb 1f       	adc	r31, r27
 896:	01 90       	ld	r0, Z+
 898:	f0 81       	ld	r31, Z
 89a:	e0 2d       	mov	r30, r0
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	6c 2f       	mov	r22, r28
 8a0:	80 81       	ld	r24, Z
 8a2:	91 81       	ldd	r25, Z+1	; 0x01
 8a4:	0e 94 03 04 	call	0x806	; 0x806 <Menu_Line_Change>
 8a8:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <current_menu>
 8ac:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <current_menu+0x1>
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	9c 0f       	add	r25, r28
 8b4:	50 96       	adiw	r26, 0x10	; 16
 8b6:	8c 91       	ld	r24, X
 8b8:	50 97       	sbiw	r26, 0x10	; 16
 8ba:	c8 17       	cp	r28, r24
 8bc:	60 f2       	brcs	.-104    	; 0x856 <Update_Menu+0x30>
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <Update_Menu+0x9c>
 8c0:	c0 e0       	ldi	r28, 0x00	; 0
 8c2:	ce 5f       	subi	r28, 0xFE	; 254
 8c4:	40 e0       	ldi	r20, 0x00	; 0
 8c6:	6c 2f       	mov	r22, r28
 8c8:	86 e0       	ldi	r24, 0x06	; 6
 8ca:	91 e0       	ldi	r25, 0x01	; 1
 8cc:	0e 94 03 04 	call	0x806	; 0x806 <Menu_Line_Change>
 8d0:	6c 2f       	mov	r22, r28
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	0e 94 19 03 	call	0x632	; 0x632 <Oled_Print_Custom>
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <Change_Child>:
 8dc:	84 30       	cpi	r24, 0x04	; 4
 8de:	91 f4       	brne	.+36     	; 0x904 <Change_Child+0x28>
 8e0:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <current_child_num>
 8e4:	42 2f       	mov	r20, r18
 8e6:	50 e0       	ldi	r21, 0x00	; 0
 8e8:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current_menu>
 8ec:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current_menu+0x1>
 8f0:	80 89       	ldd	r24, Z+16	; 0x10
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	01 97       	sbiw	r24, 0x01	; 1
 8f6:	48 17       	cp	r20, r24
 8f8:	59 07       	cpc	r21, r25
 8fa:	6c f4       	brge	.+26     	; 0x916 <Change_Child+0x3a>
 8fc:	2f 5f       	subi	r18, 0xFF	; 255
 8fe:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <current_child_num>
 902:	09 c0       	rjmp	.+18     	; 0x916 <Change_Child+0x3a>
 904:	83 30       	cpi	r24, 0x03	; 3
 906:	39 f4       	brne	.+14     	; 0x916 <Change_Child+0x3a>
 908:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <current_child_num>
 90c:	88 23       	and	r24, r24
 90e:	19 f0       	breq	.+6      	; 0x916 <Change_Child+0x3a>
 910:	81 50       	subi	r24, 0x01	; 1
 912:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <current_child_num>
 916:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <current_menu>
 91a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <current_menu+0x1>
 91e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <current_child_num>
 922:	e8 2f       	mov	r30, r24
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	31 96       	adiw	r30, 0x01	; 1
 928:	ee 0f       	add	r30, r30
 92a:	ff 1f       	adc	r31, r31
 92c:	e2 0f       	add	r30, r18
 92e:	f3 1f       	adc	r31, r19
 930:	80 81       	ld	r24, Z
 932:	91 81       	ldd	r25, Z+1	; 0x01
 934:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <current_child+0x1>
 938:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <current_child>
 93c:	0e 94 13 04 	call	0x826	; 0x826 <Update_Menu>
 940:	08 95       	ret

00000942 <User_Control_Init>:
 942:	0e 94 69 02 	call	0x4d2	; 0x4d2 <Ext_Mem_Init>
 946:	0e 94 18 02 	call	0x430	; 0x430 <Adc_Init>
 94a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Oled_Init>
 94e:	87 b3       	in	r24, 0x17	; 23
 950:	87 60       	ori	r24, 0x07	; 7
 952:	87 bb       	out	0x17, r24	; 23
 954:	c2 9a       	sbi	0x18, 2	; 24
 956:	08 95       	ret

00000958 <Joycon_Get>:
 958:	cf 93       	push	r28
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	0e 94 1a 02 	call	0x434	; 0x434 <Adc_Read>
 960:	c8 2f       	mov	r28, r24
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	0e 94 1a 02 	call	0x434	; 0x434 <Adc_Read>
 968:	28 2f       	mov	r18, r24
 96a:	cc 23       	and	r28, r28
 96c:	a4 f4       	brge	.+40     	; 0x996 <Joycon_Get+0x3e>
 96e:	4c 2f       	mov	r20, r28
 970:	50 e0       	ldi	r21, 0x00	; 0
 972:	4f 57       	subi	r20, 0x7F	; 127
 974:	51 09       	sbc	r21, r1
 976:	84 e6       	ldi	r24, 0x64	; 100
 978:	84 9f       	mul	r24, r20
 97a:	b0 01       	movw	r22, r0
 97c:	85 9f       	mul	r24, r21
 97e:	70 0d       	add	r23, r0
 980:	11 24       	eor	r1, r1
 982:	77 23       	and	r23, r23
 984:	14 f4       	brge	.+4      	; 0x98a <Joycon_Get+0x32>
 986:	61 58       	subi	r22, 0x81	; 129
 988:	7f 4f       	sbci	r23, 0xFF	; 255
 98a:	66 0f       	add	r22, r22
 98c:	67 2f       	mov	r22, r23
 98e:	66 1f       	adc	r22, r22
 990:	77 0b       	sbc	r23, r23
 992:	46 2f       	mov	r20, r22
 994:	13 c0       	rjmp	.+38     	; 0x9bc <Joycon_Get+0x64>
 996:	cf 37       	cpi	r28, 0x7F	; 127
 998:	80 f4       	brcc	.+32     	; 0x9ba <Joycon_Get+0x62>
 99a:	4c 2f       	mov	r20, r28
 99c:	50 e0       	ldi	r21, 0x00	; 0
 99e:	4f 57       	subi	r20, 0x7F	; 127
 9a0:	51 09       	sbc	r21, r1
 9a2:	34 e6       	ldi	r19, 0x64	; 100
 9a4:	34 9f       	mul	r19, r20
 9a6:	c0 01       	movw	r24, r0
 9a8:	35 9f       	mul	r19, r21
 9aa:	90 0d       	add	r25, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	6f e7       	ldi	r22, 0x7F	; 127
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	0e 94 7d 05 	call	0xafa	; 0xafa <__divmodhi4>
 9b6:	46 2f       	mov	r20, r22
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <Joycon_Get+0x64>
 9ba:	40 e0       	ldi	r20, 0x00	; 0
 9bc:	22 23       	and	r18, r18
 9be:	9c f4       	brge	.+38     	; 0x9e6 <Joycon_Get+0x8e>
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	2f 57       	subi	r18, 0x7F	; 127
 9c4:	31 09       	sbc	r19, r1
 9c6:	84 e6       	ldi	r24, 0x64	; 100
 9c8:	82 9f       	mul	r24, r18
 9ca:	b0 01       	movw	r22, r0
 9cc:	83 9f       	mul	r24, r19
 9ce:	70 0d       	add	r23, r0
 9d0:	11 24       	eor	r1, r1
 9d2:	77 23       	and	r23, r23
 9d4:	14 f4       	brge	.+4      	; 0x9da <Joycon_Get+0x82>
 9d6:	61 58       	subi	r22, 0x81	; 129
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	66 0f       	add	r22, r22
 9dc:	67 2f       	mov	r22, r23
 9de:	66 1f       	adc	r22, r22
 9e0:	77 0b       	sbc	r23, r23
 9e2:	76 2f       	mov	r23, r22
 9e4:	12 c0       	rjmp	.+36     	; 0xa0a <Joycon_Get+0xb2>
 9e6:	2f 37       	cpi	r18, 0x7F	; 127
 9e8:	78 f4       	brcc	.+30     	; 0xa08 <Joycon_Get+0xb0>
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	2f 57       	subi	r18, 0x7F	; 127
 9ee:	31 09       	sbc	r19, r1
 9f0:	54 e6       	ldi	r21, 0x64	; 100
 9f2:	52 9f       	mul	r21, r18
 9f4:	c0 01       	movw	r24, r0
 9f6:	53 9f       	mul	r21, r19
 9f8:	90 0d       	add	r25, r0
 9fa:	11 24       	eor	r1, r1
 9fc:	6f e7       	ldi	r22, 0x7F	; 127
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	0e 94 7d 05 	call	0xafa	; 0xafa <__divmodhi4>
 a04:	76 2f       	mov	r23, r22
 a06:	01 c0       	rjmp	.+2      	; 0xa0a <Joycon_Get+0xb2>
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	64 2f       	mov	r22, r20
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	cf 91       	pop	r28
 a10:	08 95       	ret

00000a12 <Joycon_Get_Direction>:
 a12:	0e 94 ac 04 	call	0x958	; 0x958 <Joycon_Get>
 a16:	6e 3c       	cpi	r22, 0xCE	; 206
 a18:	14 f4       	brge	.+4      	; 0xa1e <Joycon_Get_Direction+0xc>
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	08 95       	ret
 a1e:	63 33       	cpi	r22, 0x33	; 51
 a20:	14 f0       	brlt	.+4      	; 0xa26 <Joycon_Get_Direction+0x14>
 a22:	82 e0       	ldi	r24, 0x02	; 2
 a24:	08 95       	ret
 a26:	7e 3c       	cpi	r23, 0xCE	; 206
 a28:	14 f4       	brge	.+4      	; 0xa2e <Joycon_Get_Direction+0x1c>
 a2a:	84 e0       	ldi	r24, 0x04	; 4
 a2c:	08 95       	ret
 a2e:	73 33       	cpi	r23, 0x33	; 51
 a30:	14 f0       	brlt	.+4      	; 0xa36 <Joycon_Get_Direction+0x24>
 a32:	83 e0       	ldi	r24, 0x03	; 3
 a34:	08 95       	ret
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	08 95       	ret

00000a3a <Menu_Navigation>:

bool hold_joycon = false;
void Menu_Navigation(void){
	joycon_t joycon = Joycon_Get_Direction();
 a3a:	0e 94 09 05 	call	0xa12	; 0xa12 <Joycon_Get_Direction>
	if (!hold_joycon)
 a3e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__data_end>
 a42:	91 11       	cpse	r25, r1
 a44:	54 c0       	rjmp	.+168    	; 0xaee <Menu_Navigation+0xb4>
	{
		switch(joycon.direction){
 a46:	82 30       	cpi	r24, 0x02	; 2
 a48:	71 f1       	breq	.+92     	; 0xaa6 <Menu_Navigation+0x6c>
 a4a:	18 f4       	brcc	.+6      	; 0xa52 <Menu_Navigation+0x18>
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	99 f0       	breq	.+38     	; 0xa76 <Menu_Navigation+0x3c>
 a50:	08 95       	ret
 a52:	83 30       	cpi	r24, 0x03	; 3
 a54:	49 f0       	breq	.+18     	; 0xa68 <Menu_Navigation+0x2e>
 a56:	84 30       	cpi	r24, 0x04	; 4
 a58:	09 f0       	breq	.+2      	; 0xa5c <Menu_Navigation+0x22>
 a5a:	4d c0       	rjmp	.+154    	; 0xaf6 <Menu_Navigation+0xbc>
			case DOWN:
				Change_Child(DOWN);
 a5c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Change_Child>

				hold_joycon = true;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
				break;
 a66:	08 95       	ret
			case UP:
				Change_Child(UP);
 a68:	83 e0       	ldi	r24, 0x03	; 3
 a6a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Change_Child>

				hold_joycon = true;
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
				break;
 a74:	08 95       	ret
			case LEFT:
				if (current_menu->parent != NULL)
 a76:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current_menu>
 a7a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current_menu+0x1>
 a7e:	86 85       	ldd	r24, Z+14	; 0x0e
 a80:	97 85       	ldd	r25, Z+15	; 0x0f
 a82:	00 97       	sbiw	r24, 0x00	; 0
 a84:	c1 f1       	breq	.+112    	; 0xaf6 <Menu_Navigation+0xbc>
				{
					current_child = current_menu;
 a86:	f0 93 37 01 	sts	0x0137, r31	; 0x800137 <current_child+0x1>
 a8a:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <current_child>
					current_menu = current_menu->parent;
 a8e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current_menu+0x1>
 a92:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_menu>
					current_child_num = 0;
 a96:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <current_child_num>
					Update_Menu();
 a9a:	0e 94 13 04 	call	0x826	; 0x826 <Update_Menu>

					hold_joycon = true;
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 aa4:	08 95       	ret
				}
				break;
			case RIGHT:
				if (current_menu->child[current_child_num] != NULL)
 aa6:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <current_menu>
 aaa:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <current_menu+0x1>
 aae:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <current_child_num>
 ab2:	e8 2f       	mov	r30, r24
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	31 96       	adiw	r30, 0x01	; 1
 ab8:	ee 0f       	add	r30, r30
 aba:	ff 1f       	adc	r31, r31
 abc:	e2 0f       	add	r30, r18
 abe:	f3 1f       	adc	r31, r19
 ac0:	01 90       	ld	r0, Z+
 ac2:	f0 81       	ld	r31, Z
 ac4:	e0 2d       	mov	r30, r0
 ac6:	30 97       	sbiw	r30, 0x00	; 0
 ac8:	b1 f0       	breq	.+44     	; 0xaf6 <Menu_Navigation+0xbc>
				{
					current_menu = current_menu->child[current_child_num];
 aca:	f0 93 35 01 	sts	0x0135, r31	; 0x800135 <current_menu+0x1>
 ace:	e0 93 34 01 	sts	0x0134, r30	; 0x800134 <current_menu>
					current_child = current_menu->child[0];
 ad2:	82 81       	ldd	r24, Z+2	; 0x02
 ad4:	93 81       	ldd	r25, Z+3	; 0x03
 ad6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <current_child+0x1>
 ada:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <current_child>
					current_child_num = 0;
 ade:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <current_child_num>
					Update_Menu();
 ae2:	0e 94 13 04 	call	0x826	; 0x826 <Update_Menu>

					hold_joycon = true;
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 aec:	08 95       	ret
			default:
				break;
		}
	}else
	{
		if (joycon.direction == NEUTRAL)
 aee:	81 11       	cpse	r24, r1
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <Menu_Navigation+0xbc>
		{
			hold_joycon = false;
 af2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
 af6:	08 95       	ret

00000af8 <Menu_Functionality>:

}



void Menu_Functionality(void){
 af8:	08 95       	ret

00000afa <__divmodhi4>:
 afa:	97 fb       	bst	r25, 7
 afc:	07 2e       	mov	r0, r23
 afe:	16 f4       	brtc	.+4      	; 0xb04 <__divmodhi4+0xa>
 b00:	00 94       	com	r0
 b02:	07 d0       	rcall	.+14     	; 0xb12 <__divmodhi4_neg1>
 b04:	77 fd       	sbrc	r23, 7
 b06:	09 d0       	rcall	.+18     	; 0xb1a <__divmodhi4_neg2>
 b08:	0e 94 91 05 	call	0xb22	; 0xb22 <__udivmodhi4>
 b0c:	07 fc       	sbrc	r0, 7
 b0e:	05 d0       	rcall	.+10     	; 0xb1a <__divmodhi4_neg2>
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__divmodhi4_exit>

00000b12 <__divmodhi4_neg1>:
 b12:	90 95       	com	r25
 b14:	81 95       	neg	r24
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	08 95       	ret

00000b1a <__divmodhi4_neg2>:
 b1a:	70 95       	com	r23
 b1c:	61 95       	neg	r22
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b20 <__divmodhi4_exit>:
 b20:	08 95       	ret

00000b22 <__udivmodhi4>:
 b22:	aa 1b       	sub	r26, r26
 b24:	bb 1b       	sub	r27, r27
 b26:	51 e1       	ldi	r21, 0x11	; 17
 b28:	07 c0       	rjmp	.+14     	; 0xb38 <__udivmodhi4_ep>

00000b2a <__udivmodhi4_loop>:
 b2a:	aa 1f       	adc	r26, r26
 b2c:	bb 1f       	adc	r27, r27
 b2e:	a6 17       	cp	r26, r22
 b30:	b7 07       	cpc	r27, r23
 b32:	10 f0       	brcs	.+4      	; 0xb38 <__udivmodhi4_ep>
 b34:	a6 1b       	sub	r26, r22
 b36:	b7 0b       	sbc	r27, r23

00000b38 <__udivmodhi4_ep>:
 b38:	88 1f       	adc	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	5a 95       	dec	r21
 b3e:	a9 f7       	brne	.-22     	; 0xb2a <__udivmodhi4_loop>
 b40:	80 95       	com	r24
 b42:	90 95       	com	r25
 b44:	bc 01       	movw	r22, r24
 b46:	cd 01       	movw	r24, r26
 b48:	08 95       	ret

00000b4a <fdevopen>:
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	00 97       	sbiw	r24, 0x00	; 0
 b54:	31 f4       	brne	.+12     	; 0xb62 <fdevopen+0x18>
 b56:	61 15       	cp	r22, r1
 b58:	71 05       	cpc	r23, r1
 b5a:	19 f4       	brne	.+6      	; 0xb62 <fdevopen+0x18>
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	3a c0       	rjmp	.+116    	; 0xbd6 <fdevopen+0x8c>
 b62:	8b 01       	movw	r16, r22
 b64:	ec 01       	movw	r28, r24
 b66:	6e e0       	ldi	r22, 0x0E	; 14
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <calloc>
 b72:	fc 01       	movw	r30, r24
 b74:	89 2b       	or	r24, r25
 b76:	91 f3       	breq	.-28     	; 0xb5c <fdevopen+0x12>
 b78:	80 e8       	ldi	r24, 0x80	; 128
 b7a:	83 83       	std	Z+3, r24	; 0x03
 b7c:	01 15       	cp	r16, r1
 b7e:	11 05       	cpc	r17, r1
 b80:	71 f0       	breq	.+28     	; 0xb9e <fdevopen+0x54>
 b82:	13 87       	std	Z+11, r17	; 0x0b
 b84:	02 87       	std	Z+10, r16	; 0x0a
 b86:	81 e8       	ldi	r24, 0x81	; 129
 b88:	83 83       	std	Z+3, r24	; 0x03
 b8a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__iob>
 b8e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__iob+0x1>
 b92:	89 2b       	or	r24, r25
 b94:	21 f4       	brne	.+8      	; 0xb9e <fdevopen+0x54>
 b96:	f0 93 39 01 	sts	0x0139, r31	; 0x800139 <__iob+0x1>
 b9a:	e0 93 38 01 	sts	0x0138, r30	; 0x800138 <__iob>
 b9e:	20 97       	sbiw	r28, 0x00	; 0
 ba0:	c9 f0       	breq	.+50     	; 0xbd4 <fdevopen+0x8a>
 ba2:	d1 87       	std	Z+9, r29	; 0x09
 ba4:	c0 87       	std	Z+8, r28	; 0x08
 ba6:	83 81       	ldd	r24, Z+3	; 0x03
 ba8:	82 60       	ori	r24, 0x02	; 2
 baa:	83 83       	std	Z+3, r24	; 0x03
 bac:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__iob+0x2>
 bb0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__iob+0x3>
 bb4:	89 2b       	or	r24, r25
 bb6:	71 f4       	brne	.+28     	; 0xbd4 <fdevopen+0x8a>
 bb8:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <__iob+0x3>
 bbc:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <__iob+0x2>
 bc0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__iob+0x4>
 bc4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__iob+0x5>
 bc8:	89 2b       	or	r24, r25
 bca:	21 f4       	brne	.+8      	; 0xbd4 <fdevopen+0x8a>
 bcc:	f0 93 3d 01 	sts	0x013D, r31	; 0x80013d <__iob+0x5>
 bd0:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <__iob+0x4>
 bd4:	cf 01       	movw	r24, r30
 bd6:	df 91       	pop	r29
 bd8:	cf 91       	pop	r28
 bda:	1f 91       	pop	r17
 bdc:	0f 91       	pop	r16
 bde:	08 95       	ret

00000be0 <calloc>:
 be0:	0f 93       	push	r16
 be2:	1f 93       	push	r17
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	86 9f       	mul	r24, r22
 bea:	80 01       	movw	r16, r0
 bec:	87 9f       	mul	r24, r23
 bee:	10 0d       	add	r17, r0
 bf0:	96 9f       	mul	r25, r22
 bf2:	10 0d       	add	r17, r0
 bf4:	11 24       	eor	r1, r1
 bf6:	c8 01       	movw	r24, r16
 bf8:	0e 94 0c 06 	call	0xc18	; 0xc18 <malloc>
 bfc:	ec 01       	movw	r28, r24
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	29 f0       	breq	.+10     	; 0xc0c <calloc+0x2c>
 c02:	a8 01       	movw	r20, r16
 c04:	60 e0       	ldi	r22, 0x00	; 0
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	0e 94 2d 07 	call	0xe5a	; 0xe5a <memset>
 c0c:	ce 01       	movw	r24, r28
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	1f 91       	pop	r17
 c14:	0f 91       	pop	r16
 c16:	08 95       	ret

00000c18 <malloc>:
 c18:	0f 93       	push	r16
 c1a:	1f 93       	push	r17
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	82 30       	cpi	r24, 0x02	; 2
 c22:	91 05       	cpc	r25, r1
 c24:	10 f4       	brcc	.+4      	; 0xc2a <malloc+0x12>
 c26:	82 e0       	ldi	r24, 0x02	; 2
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__flp>
 c2e:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__flp+0x1>
 c32:	20 e0       	ldi	r18, 0x00	; 0
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	a0 e0       	ldi	r26, 0x00	; 0
 c38:	b0 e0       	ldi	r27, 0x00	; 0
 c3a:	30 97       	sbiw	r30, 0x00	; 0
 c3c:	19 f1       	breq	.+70     	; 0xc84 <malloc+0x6c>
 c3e:	40 81       	ld	r20, Z
 c40:	51 81       	ldd	r21, Z+1	; 0x01
 c42:	02 81       	ldd	r16, Z+2	; 0x02
 c44:	13 81       	ldd	r17, Z+3	; 0x03
 c46:	48 17       	cp	r20, r24
 c48:	59 07       	cpc	r21, r25
 c4a:	c8 f0       	brcs	.+50     	; 0xc7e <malloc+0x66>
 c4c:	84 17       	cp	r24, r20
 c4e:	95 07       	cpc	r25, r21
 c50:	69 f4       	brne	.+26     	; 0xc6c <malloc+0x54>
 c52:	10 97       	sbiw	r26, 0x00	; 0
 c54:	31 f0       	breq	.+12     	; 0xc62 <malloc+0x4a>
 c56:	12 96       	adiw	r26, 0x02	; 2
 c58:	0c 93       	st	X, r16
 c5a:	12 97       	sbiw	r26, 0x02	; 2
 c5c:	13 96       	adiw	r26, 0x03	; 3
 c5e:	1c 93       	st	X, r17
 c60:	27 c0       	rjmp	.+78     	; 0xcb0 <malloc+0x98>
 c62:	00 93 40 01 	sts	0x0140, r16	; 0x800140 <__flp>
 c66:	10 93 41 01 	sts	0x0141, r17	; 0x800141 <__flp+0x1>
 c6a:	22 c0       	rjmp	.+68     	; 0xcb0 <malloc+0x98>
 c6c:	21 15       	cp	r18, r1
 c6e:	31 05       	cpc	r19, r1
 c70:	19 f0       	breq	.+6      	; 0xc78 <malloc+0x60>
 c72:	42 17       	cp	r20, r18
 c74:	53 07       	cpc	r21, r19
 c76:	18 f4       	brcc	.+6      	; 0xc7e <malloc+0x66>
 c78:	9a 01       	movw	r18, r20
 c7a:	bd 01       	movw	r22, r26
 c7c:	ef 01       	movw	r28, r30
 c7e:	df 01       	movw	r26, r30
 c80:	f8 01       	movw	r30, r16
 c82:	db cf       	rjmp	.-74     	; 0xc3a <malloc+0x22>
 c84:	21 15       	cp	r18, r1
 c86:	31 05       	cpc	r19, r1
 c88:	f9 f0       	breq	.+62     	; 0xcc8 <malloc+0xb0>
 c8a:	28 1b       	sub	r18, r24
 c8c:	39 0b       	sbc	r19, r25
 c8e:	24 30       	cpi	r18, 0x04	; 4
 c90:	31 05       	cpc	r19, r1
 c92:	80 f4       	brcc	.+32     	; 0xcb4 <malloc+0x9c>
 c94:	8a 81       	ldd	r24, Y+2	; 0x02
 c96:	9b 81       	ldd	r25, Y+3	; 0x03
 c98:	61 15       	cp	r22, r1
 c9a:	71 05       	cpc	r23, r1
 c9c:	21 f0       	breq	.+8      	; 0xca6 <malloc+0x8e>
 c9e:	fb 01       	movw	r30, r22
 ca0:	93 83       	std	Z+3, r25	; 0x03
 ca2:	82 83       	std	Z+2, r24	; 0x02
 ca4:	04 c0       	rjmp	.+8      	; 0xcae <malloc+0x96>
 ca6:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__flp+0x1>
 caa:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__flp>
 cae:	fe 01       	movw	r30, r28
 cb0:	32 96       	adiw	r30, 0x02	; 2
 cb2:	44 c0       	rjmp	.+136    	; 0xd3c <malloc+0x124>
 cb4:	fe 01       	movw	r30, r28
 cb6:	e2 0f       	add	r30, r18
 cb8:	f3 1f       	adc	r31, r19
 cba:	81 93       	st	Z+, r24
 cbc:	91 93       	st	Z+, r25
 cbe:	22 50       	subi	r18, 0x02	; 2
 cc0:	31 09       	sbc	r19, r1
 cc2:	39 83       	std	Y+1, r19	; 0x01
 cc4:	28 83       	st	Y, r18
 cc6:	3a c0       	rjmp	.+116    	; 0xd3c <malloc+0x124>
 cc8:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__brkval>
 ccc:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__brkval+0x1>
 cd0:	23 2b       	or	r18, r19
 cd2:	41 f4       	brne	.+16     	; 0xce4 <malloc+0xcc>
 cd4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 cd8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 cdc:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <__brkval+0x1>
 ce0:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <__brkval>
 ce4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 ce8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 cec:	21 15       	cp	r18, r1
 cee:	31 05       	cpc	r19, r1
 cf0:	41 f4       	brne	.+16     	; 0xd02 <malloc+0xea>
 cf2:	2d b7       	in	r18, 0x3d	; 61
 cf4:	3e b7       	in	r19, 0x3e	; 62
 cf6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 cfa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 cfe:	24 1b       	sub	r18, r20
 d00:	35 0b       	sbc	r19, r21
 d02:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__brkval>
 d06:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__brkval+0x1>
 d0a:	e2 17       	cp	r30, r18
 d0c:	f3 07       	cpc	r31, r19
 d0e:	a0 f4       	brcc	.+40     	; 0xd38 <malloc+0x120>
 d10:	2e 1b       	sub	r18, r30
 d12:	3f 0b       	sbc	r19, r31
 d14:	28 17       	cp	r18, r24
 d16:	39 07       	cpc	r19, r25
 d18:	78 f0       	brcs	.+30     	; 0xd38 <malloc+0x120>
 d1a:	ac 01       	movw	r20, r24
 d1c:	4e 5f       	subi	r20, 0xFE	; 254
 d1e:	5f 4f       	sbci	r21, 0xFF	; 255
 d20:	24 17       	cp	r18, r20
 d22:	35 07       	cpc	r19, r21
 d24:	48 f0       	brcs	.+18     	; 0xd38 <malloc+0x120>
 d26:	4e 0f       	add	r20, r30
 d28:	5f 1f       	adc	r21, r31
 d2a:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <__brkval+0x1>
 d2e:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <__brkval>
 d32:	81 93       	st	Z+, r24
 d34:	91 93       	st	Z+, r25
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <malloc+0x124>
 d38:	e0 e0       	ldi	r30, 0x00	; 0
 d3a:	f0 e0       	ldi	r31, 0x00	; 0
 d3c:	cf 01       	movw	r24, r30
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	1f 91       	pop	r17
 d44:	0f 91       	pop	r16
 d46:	08 95       	ret

00000d48 <free>:
 d48:	cf 93       	push	r28
 d4a:	df 93       	push	r29
 d4c:	00 97       	sbiw	r24, 0x00	; 0
 d4e:	09 f4       	brne	.+2      	; 0xd52 <free+0xa>
 d50:	81 c0       	rjmp	.+258    	; 0xe54 <free+0x10c>
 d52:	fc 01       	movw	r30, r24
 d54:	32 97       	sbiw	r30, 0x02	; 2
 d56:	13 82       	std	Z+3, r1	; 0x03
 d58:	12 82       	std	Z+2, r1	; 0x02
 d5a:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <__flp>
 d5e:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <__flp+0x1>
 d62:	10 97       	sbiw	r26, 0x00	; 0
 d64:	81 f4       	brne	.+32     	; 0xd86 <free+0x3e>
 d66:	20 81       	ld	r18, Z
 d68:	31 81       	ldd	r19, Z+1	; 0x01
 d6a:	82 0f       	add	r24, r18
 d6c:	93 1f       	adc	r25, r19
 d6e:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__brkval>
 d72:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__brkval+0x1>
 d76:	28 17       	cp	r18, r24
 d78:	39 07       	cpc	r19, r25
 d7a:	51 f5       	brne	.+84     	; 0xdd0 <free+0x88>
 d7c:	f0 93 3f 01 	sts	0x013F, r31	; 0x80013f <__brkval+0x1>
 d80:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <__brkval>
 d84:	67 c0       	rjmp	.+206    	; 0xe54 <free+0x10c>
 d86:	ed 01       	movw	r28, r26
 d88:	20 e0       	ldi	r18, 0x00	; 0
 d8a:	30 e0       	ldi	r19, 0x00	; 0
 d8c:	ce 17       	cp	r28, r30
 d8e:	df 07       	cpc	r29, r31
 d90:	40 f4       	brcc	.+16     	; 0xda2 <free+0x5a>
 d92:	4a 81       	ldd	r20, Y+2	; 0x02
 d94:	5b 81       	ldd	r21, Y+3	; 0x03
 d96:	9e 01       	movw	r18, r28
 d98:	41 15       	cp	r20, r1
 d9a:	51 05       	cpc	r21, r1
 d9c:	f1 f0       	breq	.+60     	; 0xdda <free+0x92>
 d9e:	ea 01       	movw	r28, r20
 da0:	f5 cf       	rjmp	.-22     	; 0xd8c <free+0x44>
 da2:	d3 83       	std	Z+3, r29	; 0x03
 da4:	c2 83       	std	Z+2, r28	; 0x02
 da6:	40 81       	ld	r20, Z
 da8:	51 81       	ldd	r21, Z+1	; 0x01
 daa:	84 0f       	add	r24, r20
 dac:	95 1f       	adc	r25, r21
 dae:	c8 17       	cp	r28, r24
 db0:	d9 07       	cpc	r29, r25
 db2:	59 f4       	brne	.+22     	; 0xdca <free+0x82>
 db4:	88 81       	ld	r24, Y
 db6:	99 81       	ldd	r25, Y+1	; 0x01
 db8:	84 0f       	add	r24, r20
 dba:	95 1f       	adc	r25, r21
 dbc:	02 96       	adiw	r24, 0x02	; 2
 dbe:	91 83       	std	Z+1, r25	; 0x01
 dc0:	80 83       	st	Z, r24
 dc2:	8a 81       	ldd	r24, Y+2	; 0x02
 dc4:	9b 81       	ldd	r25, Y+3	; 0x03
 dc6:	93 83       	std	Z+3, r25	; 0x03
 dc8:	82 83       	std	Z+2, r24	; 0x02
 dca:	21 15       	cp	r18, r1
 dcc:	31 05       	cpc	r19, r1
 dce:	29 f4       	brne	.+10     	; 0xdda <free+0x92>
 dd0:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <__flp+0x1>
 dd4:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <__flp>
 dd8:	3d c0       	rjmp	.+122    	; 0xe54 <free+0x10c>
 dda:	e9 01       	movw	r28, r18
 ddc:	fb 83       	std	Y+3, r31	; 0x03
 dde:	ea 83       	std	Y+2, r30	; 0x02
 de0:	49 91       	ld	r20, Y+
 de2:	59 91       	ld	r21, Y+
 de4:	c4 0f       	add	r28, r20
 de6:	d5 1f       	adc	r29, r21
 de8:	ec 17       	cp	r30, r28
 dea:	fd 07       	cpc	r31, r29
 dec:	61 f4       	brne	.+24     	; 0xe06 <free+0xbe>
 dee:	80 81       	ld	r24, Z
 df0:	91 81       	ldd	r25, Z+1	; 0x01
 df2:	84 0f       	add	r24, r20
 df4:	95 1f       	adc	r25, r21
 df6:	02 96       	adiw	r24, 0x02	; 2
 df8:	e9 01       	movw	r28, r18
 dfa:	99 83       	std	Y+1, r25	; 0x01
 dfc:	88 83       	st	Y, r24
 dfe:	82 81       	ldd	r24, Z+2	; 0x02
 e00:	93 81       	ldd	r25, Z+3	; 0x03
 e02:	9b 83       	std	Y+3, r25	; 0x03
 e04:	8a 83       	std	Y+2, r24	; 0x02
 e06:	e0 e0       	ldi	r30, 0x00	; 0
 e08:	f0 e0       	ldi	r31, 0x00	; 0
 e0a:	12 96       	adiw	r26, 0x02	; 2
 e0c:	8d 91       	ld	r24, X+
 e0e:	9c 91       	ld	r25, X
 e10:	13 97       	sbiw	r26, 0x03	; 3
 e12:	00 97       	sbiw	r24, 0x00	; 0
 e14:	19 f0       	breq	.+6      	; 0xe1c <free+0xd4>
 e16:	fd 01       	movw	r30, r26
 e18:	dc 01       	movw	r26, r24
 e1a:	f7 cf       	rjmp	.-18     	; 0xe0a <free+0xc2>
 e1c:	8d 91       	ld	r24, X+
 e1e:	9c 91       	ld	r25, X
 e20:	11 97       	sbiw	r26, 0x01	; 1
 e22:	9d 01       	movw	r18, r26
 e24:	2e 5f       	subi	r18, 0xFE	; 254
 e26:	3f 4f       	sbci	r19, 0xFF	; 255
 e28:	82 0f       	add	r24, r18
 e2a:	93 1f       	adc	r25, r19
 e2c:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__brkval>
 e30:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__brkval+0x1>
 e34:	28 17       	cp	r18, r24
 e36:	39 07       	cpc	r19, r25
 e38:	69 f4       	brne	.+26     	; 0xe54 <free+0x10c>
 e3a:	30 97       	sbiw	r30, 0x00	; 0
 e3c:	29 f4       	brne	.+10     	; 0xe48 <free+0x100>
 e3e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__flp+0x1>
 e42:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__flp>
 e46:	02 c0       	rjmp	.+4      	; 0xe4c <free+0x104>
 e48:	13 82       	std	Z+3, r1	; 0x03
 e4a:	12 82       	std	Z+2, r1	; 0x02
 e4c:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <__brkval+0x1>
 e50:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <__brkval>
 e54:	df 91       	pop	r29
 e56:	cf 91       	pop	r28
 e58:	08 95       	ret

00000e5a <memset>:
 e5a:	dc 01       	movw	r26, r24
 e5c:	01 c0       	rjmp	.+2      	; 0xe60 <memset+0x6>
 e5e:	6d 93       	st	X+, r22
 e60:	41 50       	subi	r20, 0x01	; 1
 e62:	50 40       	sbci	r21, 0x00	; 0
 e64:	e0 f7       	brcc	.-8      	; 0xe5e <memset+0x4>
 e66:	08 95       	ret

00000e68 <_exit>:
 e68:	f8 94       	cli

00000e6a <__stop_program>:
 e6a:	ff cf       	rjmp	.-2      	; 0xe6a <__stop_program>
