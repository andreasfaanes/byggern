
byggern43_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800200  00000d6a  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800268  00800268  00000e66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018bc  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001153  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000184d  00000000  00000000  00003a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000052c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001471c  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  00019cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0001a379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000045f2  00000000  00000000  0001a469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	1d c1       	rjmp	.+570    	; 0x240 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	14 c2       	rjmp	.+1064   	; 0x47e <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	ab c1       	rjmp	.+854    	; 0x3cc <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e6       	ldi	r30, 0x6A	; 106
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 36       	cpi	r26, 0x68	; 104
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e6       	ldi	r26, 0x68	; 104
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 37       	cpi	r26, 0x78	; 120
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	21 d1       	rcall	.+578    	; 0x362 <main>
 120:	22 c6       	rjmp	.+3140   	; 0xd66 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
#include <stdio.h>
#include <avr/interrupt.h>

void adc_init(void)
{
	printf("he");
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	9f 93       	push	r25
 12a:	8f 93       	push	r24
 12c:	1a d2       	rcall	.+1076   	; 0x562 <printf>
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << ADATE); // AVCC referance and left shifted data, auto trigger
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 66       	ori	r24, 0x60	; 96
 136:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE); // adc enable and interupt enable
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 68       	ori	r24, 0x88	; 136
 140:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS1) | (1 << ADTS0); // trrigger on timer 0 overflow
 142:	eb e7       	ldi	r30, 0x7B	; 123
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC0D);
 14c:	ee e7       	ldi	r30, 0x7E	; 126
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	printf("he2");
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	01 d2       	rcall	.+1026   	; 0x562 <printf>
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	08 95       	ret

0000016a <can_init>:
	{
		mcp_write(MCP_TXB0D0+i,data->data[i]);
	}
	
	mcp_request_to_send(0); //1
}
 16a:	74 d0       	rcall	.+232    	; 0x254 <spi_init>
 16c:	50 d0       	rcall	.+160    	; 0x20e <mcp_reset>
 16e:	40 e8       	ldi	r20, 0x80	; 128
 170:	6f ef       	ldi	r22, 0xFF	; 255
 172:	8f e0       	ldi	r24, 0x0F	; 15
 174:	51 d0       	rcall	.+162    	; 0x218 <mcp_modify_bit>
 176:	4f ef       	ldi	r20, 0xFF	; 255
 178:	60 e6       	ldi	r22, 0x60	; 96
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	4d d0       	rcall	.+154    	; 0x218 <mcp_modify_bit>
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	8b e2       	ldi	r24, 0x2B	; 43
 184:	49 d0       	rcall	.+146    	; 0x218 <mcp_modify_bit>
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	60 ee       	ldi	r22, 0xE0	; 224
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	45 c0       	rjmp	.+138    	; 0x218 <mcp_modify_bit>
 18e:	08 95       	ret

00000190 <can_recieve_msg>:

void can_recieve_msg(can_data_t* data){
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	8c 01       	movw	r16, r24
	
	if (mcp_read(MCP_CANINTF) & 0x01){
 198:	8c e2       	ldi	r24, 0x2C	; 44
 19a:	2c d0       	rcall	.+88     	; 0x1f4 <mcp_read>
 19c:	80 ff       	sbrs	r24, 0
 19e:	26 c0       	rjmp	.+76     	; 0x1ec <can_recieve_msg+0x5c>
		//printf("VALID MESSAGE \n\r");
		uint8_t idhigh = mcp_read(MCP_RXB0SIDH);
 1a0:	81 e6       	ldi	r24, 0x61	; 97
 1a2:	28 d0       	rcall	.+80     	; 0x1f4 <mcp_read>
 1a4:	c8 2f       	mov	r28, r24
		uint8_t idlow = mcp_read(MCP_RXB0SIDL);
 1a6:	82 e6       	ldi	r24, 0x62	; 98
 1a8:	25 d0       	rcall	.+74     	; 0x1f4 <mcp_read>
 1aa:	cc 0f       	add	r28, r28
		data->id = (idhigh << 3)|(idlow >> 5);
 1ac:	cc 0f       	add	r28, r28
 1ae:	cc 0f       	add	r28, r28
 1b0:	82 95       	swap	r24
 1b2:	86 95       	lsr	r24
 1b4:	87 70       	andi	r24, 0x07	; 7
 1b6:	8c 2b       	or	r24, r28
 1b8:	f8 01       	movw	r30, r16
 1ba:	80 83       	st	Z, r24
		
		data->length = mcp_read(MCP_RXB0DLC) & 0x0f;
 1bc:	85 e6       	ldi	r24, 0x65	; 101
 1be:	1a d0       	rcall	.+52     	; 0x1f4 <mcp_read>
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	f8 01       	movw	r30, r16
 1c4:	81 83       	std	Z+1, r24	; 0x01
 1c6:	88 23       	and	r24, r24
		
		for (uint8_t i = 0; i < data->length; i++)
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <can_recieve_msg+0x54>
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
		{
			data->data[i] = mcp_read(MCP_RXB0D0+i);
 1cc:	86 e6       	ldi	r24, 0x66	; 102
 1ce:	8c 0f       	add	r24, r28
 1d0:	11 d0       	rcall	.+34     	; 0x1f4 <mcp_read>
 1d2:	f8 01       	movw	r30, r16
 1d4:	ec 0f       	add	r30, r28
 1d6:	f1 1d       	adc	r31, r1
 1d8:	82 83       	std	Z+2, r24	; 0x02
 1da:	cf 5f       	subi	r28, 0xFF	; 255
		uint8_t idlow = mcp_read(MCP_RXB0SIDL);
		data->id = (idhigh << 3)|(idlow >> 5);
		
		data->length = mcp_read(MCP_RXB0DLC) & 0x0f;
		
		for (uint8_t i = 0; i < data->length; i++)
 1dc:	f8 01       	movw	r30, r16
 1de:	81 81       	ldd	r24, Z+1	; 0x01
 1e0:	c8 17       	cp	r28, r24
 1e2:	a0 f3       	brcs	.-24     	; 0x1cc <can_recieve_msg+0x3c>
		{
			data->data[i] = mcp_read(MCP_RXB0D0+i);
		}
		mcp_modify_bit(MCP_CANINTF, 0b01, 0);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	8c e2       	ldi	r24, 0x2C	; 44
 1ea:	16 d0       	rcall	.+44     	; 0x218 <mcp_modify_bit>
 1ec:	cf 91       	pop	r28
	}
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <mcp_read>:
 1f4:	cf 93       	push	r28

void mcp_request_to_send(uint8_t buffer){
	slave_enable();
	spi_write(0x80 | (1<< buffer));
	slave_deselect();
}
 1f6:	c8 2f       	mov	r28, r24
 1f8:	41 d0       	rcall	.+130    	; 0x27c <slave_enable>
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	33 d0       	rcall	.+102    	; 0x264 <spi_write>
 1fe:	8c 2f       	mov	r24, r28
 200:	31 d0       	rcall	.+98     	; 0x264 <spi_write>
 202:	35 d0       	rcall	.+106    	; 0x26e <spi_read>
 204:	c8 2f       	mov	r28, r24
 206:	3c d0       	rcall	.+120    	; 0x280 <slave_deselect>
 208:	8c 2f       	mov	r24, r28
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <mcp_reset>:
 20e:	36 d0       	rcall	.+108    	; 0x27c <slave_enable>
 210:	80 ec       	ldi	r24, 0xC0	; 192
 212:	28 d0       	rcall	.+80     	; 0x264 <spi_write>
 214:	35 c0       	rjmp	.+106    	; 0x280 <slave_deselect>
 216:	08 95       	ret

00000218 <mcp_modify_bit>:
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	18 2f       	mov	r17, r24
 220:	d6 2f       	mov	r29, r22
 222:	c4 2f       	mov	r28, r20
 224:	2b d0       	rcall	.+86     	; 0x27c <slave_enable>
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	1d d0       	rcall	.+58     	; 0x264 <spi_write>
 22a:	81 2f       	mov	r24, r17
 22c:	1b d0       	rcall	.+54     	; 0x264 <spi_write>
 22e:	8d 2f       	mov	r24, r29
 230:	19 d0       	rcall	.+50     	; 0x264 <spi_write>
 232:	8c 2f       	mov	r24, r28
 234:	17 d0       	rcall	.+46     	; 0x264 <spi_write>
 236:	24 d0       	rcall	.+72     	; 0x280 <slave_deselect>
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <__vector_1>:



ISR(INT0_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
}
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <spi_init>:
#include <avr/io.h>
#include <stdio.h>
#include "spi.h"

void spi_init(void){
	DDRB |= (1 << PINB0)|(1 << PINB7)|(1 << PINB2)|(1 << PINB1); // setting ss, mosi and sck as output
 254:	84 b1       	in	r24, 0x04	; 4
 256:	87 68       	ori	r24, 0x87	; 135
 258:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PINB3);	// setting miso as input
 25a:	23 98       	cbi	0x04, 3	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1 << SPR0); // enable SPI and selectiong master mode
 25c:	8c b5       	in	r24, 0x2c	; 44
 25e:	81 65       	ori	r24, 0x51	; 81
 260:	8c bd       	out	0x2c, r24	; 44
 262:	08 95       	ret

00000264 <spi_write>:
}
	
void spi_write(uint8_t data){
	SPDR = data;
 264:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 266:	0d b4       	in	r0, 0x2d	; 45
 268:	07 fe       	sbrs	r0, 7
 26a:	fd cf       	rjmp	.-6      	; 0x266 <spi_write+0x2>
}
 26c:	08 95       	ret

0000026e <spi_read>:

uint8_t spi_read(void){
	SPDR = 0xaa;
 26e:	8a ea       	ldi	r24, 0xAA	; 170
 270:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 272:	0d b4       	in	r0, 0x2d	; 45
 274:	07 fe       	sbrs	r0, 7
 276:	fd cf       	rjmp	.-6      	; 0x272 <spi_read+0x4>
	return SPDR;
 278:	8e b5       	in	r24, 0x2e	; 46
}
 27a:	08 95       	ret

0000027c <slave_enable>:

void slave_enable(void){
	PORTB &= ~(1 << PINB7);
 27c:	2f 98       	cbi	0x05, 7	; 5
 27e:	08 95       	ret

00000280 <slave_deselect>:
}

void slave_deselect(void){
	PORTB |= (1 << PINB7);
 280:	2f 9a       	sbi	0x05, 7	; 5
 282:	08 95       	ret

00000284 <timer_init>:
#include <avr/interrupt.h>
#include "timer.h"

void timer_init(void){	
	//Timer 0:
	TCCR0A |= (1 << WGM01);
 284:	84 b5       	in	r24, 0x24	; 36
 286:	82 60       	ori	r24, 0x02	; 2
 288:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);
 28a:	85 b5       	in	r24, 0x25	; 37
 28c:	85 60       	ori	r24, 0x05	; 5
 28e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 290:	8f e7       	ldi	r24, 0x7F	; 127
 292:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 294:	ee e6       	ldi	r30, 0x6E	; 110
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	80 83       	st	Z, r24
	///TCCR0B = (1 << CS02) |(0 << CS01) | (0 << CS00); //set clock prescaler to 16MHz/256 = 62.5kHz (PWM frequency = 244.1Hz)
	//OCR0B = 128; //sets the desired pulse width (0-255)
	//DDRG |= (1 << PG5); // Set pin 4 (PG5) as output
	
	//Timer 1: clear OC1A (channel A) on compare match, use fast PWM, OCR used as TOP, prescaler to 8
	TCCR1A |= (1 << COM1A1) | (1 << WGM11) /*| (1 << WGM10)*/;
 29e:	e0 e8       	ldi	r30, 0x80	; 128
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	82 68       	ori	r24, 0x82	; 130
 2a6:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS10) | (1 << CS11);
 2a8:	e1 e8       	ldi	r30, 0x81	; 129
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	8b 61       	ori	r24, 0x1B	; 27
 2b0:	80 83       	st	Z, r24
	ICR1 = 5000;
 2b2:	88 e8       	ldi	r24, 0x88	; 136
 2b4:	93 e1       	ldi	r25, 0x13	; 19
 2b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 2be:	08 95       	ret

000002c0 <timer_1_set_top>:
}

void timer_1_set_top(uint16_t top_val){
	uint16_t x = ((top_val*250)/84)+(225);
 2c0:	4a ef       	ldi	r20, 0xFA	; 250
 2c2:	9c 01       	movw	r18, r24
 2c4:	42 9f       	mul	r20, r18
 2c6:	c0 01       	movw	r24, r0
 2c8:	43 9f       	mul	r20, r19
 2ca:	90 0d       	add	r25, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	9c 01       	movw	r18, r24
 2d0:	36 95       	lsr	r19
 2d2:	27 95       	ror	r18
 2d4:	36 95       	lsr	r19
 2d6:	27 95       	ror	r18
 2d8:	a7 e8       	ldi	r26, 0x87	; 135
 2da:	b1 e6       	ldi	r27, 0x61	; 97
 2dc:	e9 d0       	rcall	.+466    	; 0x4b0 <__umulhisi3>
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	8f 51       	subi	r24, 0x1F	; 31
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
	if (x <= 230)
 2ee:	87 3e       	cpi	r24, 0xE7	; 231
 2f0:	91 05       	cpc	r25, r1
 2f2:	38 f0       	brcs	.+14     	; 0x302 <timer_1_set_top+0x42>
	{
		x = 230;
	}else if (x >= 520)
 2f4:	88 30       	cpi	r24, 0x08	; 8
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	93 07       	cpc	r25, r19
 2fa:	28 f0       	brcs	.+10     	; 0x306 <timer_1_set_top+0x46>
	{
		x = 520;
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	02 c0       	rjmp	.+4      	; 0x306 <timer_1_set_top+0x46>

void timer_1_set_top(uint16_t top_val){
	uint16_t x = ((top_val*250)/84)+(225);
	if (x <= 230)
	{
		x = 230;
 302:	86 ee       	ldi	r24, 0xE6	; 230
 304:	90 e0       	ldi	r25, 0x00	; 0
	}else if (x >= 520)
	{
		x = 520;
	}
	
	OCR1A = x;
 306:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 30a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 30e:	08 95       	ret

00000310 <USART_Transmit>:
// USART driver

// USART transmit
int USART_Transmit(char data, FILE *f){
	/*Wait for empty transmit buffer*/
	while(!(UCSR0A & (1<<UDRE0)));
 310:	e0 ec       	ldi	r30, 0xC0	; 192
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	90 81       	ld	r25, Z
 316:	95 ff       	sbrs	r25, 5
 318:	fd cf       	rjmp	.-6      	; 0x314 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data*/
	UDR0 = data;
 31a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	return 0;
}
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	08 95       	ret

00000324 <USART_Receive>:

int USART_Receive(FILE* f){
	/* Wait for data to be received*/
	while(!(UCSR0A & (1<<RXC0)));
 324:	e0 ec       	ldi	r30, 0xC0	; 192
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	88 23       	and	r24, r24
 32c:	ec f7       	brge	.-6      	; 0x328 <USART_Receive+0x4>
	/* Get and return received data from buffer*/
	return UDR0;
 32e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret

00000336 <USART_init>:
// USART init
int USART_init(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr >> 8);
 336:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char) ubrr;
 33a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	/*Enable receiver and transmitter and receive interrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<< RXCIE0);
 33e:	88 e9       	ldi	r24, 0x98	; 152
 340:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	/*Set frame format: 8data, 2 stop bit*/
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 344:	8e e0       	ldi	r24, 0x0E	; 14
 346:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	usart = fdevopen(&USART_Transmit, &USART_Receive);
 34a:	62 e9       	ldi	r22, 0x92	; 146
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	88 e8       	ldi	r24, 0x88	; 136
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	bd d0       	rcall	.+378    	; 0x4ce <fdevopen>
 354:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <usart+0x1>
 358:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <usart>
	
	return 0;
}
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	08 95       	ret

00000362 <main>:
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main (void)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	2a 97       	sbiw	r28, 0x0a	; 10
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
	USART_init(MYUBRR);
 376:	87 e6       	ldi	r24, 0x67	; 103
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	dd df       	rcall	.-70     	; 0x336 <USART_init>
	
	can_init();
 37c:	f6 de       	rcall	.-532    	; 0x16a <can_init>
 37e:	8d e0       	ldi	r24, 0x0D	; 13
	can_data_t data;
	printf("\n\n\n\n\n begin!!! \n\r");
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	9f 93       	push	r25
 384:	8f 93       	push	r24
 386:	ed d0       	rcall	.+474    	; 0x562 <printf>
	DDRB |= (1 << PINB5);
 388:	25 9a       	sbi	0x04, 5	; 4
	timer_init();
 38a:	7c df       	rcall	.-264    	; 0x284 <timer_init>
 38c:	cb de       	rcall	.-618    	; 0x124 <adc_init>
	adc_init();
 38e:	78 94       	sei
 390:	0f 90       	pop	r0
	sei();
 392:	0f 90       	pop	r0
 394:	0f e1       	ldi	r16, 0x1F	; 31
	{
		//printf("he");
		can_recieve_msg(&data);
		if (data.id != 0)
		{
			printf("ID = %u, leftslider: %u, rightslider: %u \r",data.id, data.data[0], data.data[1]);
 396:	12 e0       	ldi	r17, 0x02	; 2
 398:	ce 01       	movw	r24, r28
	adc_init();
	sei();
	while (1)
	{
		//printf("he");
		can_recieve_msg(&data);
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	f9 de       	rcall	.-526    	; 0x190 <can_recieve_msg>
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	88 23       	and	r24, r24
		if (data.id != 0)
 3a2:	d1 f3       	breq	.-12     	; 0x398 <main+0x36>
 3a4:	9c 81       	ldd	r25, Y+4	; 0x04
 3a6:	1f 92       	push	r1
		{
			printf("ID = %u, leftslider: %u, rightslider: %u \r",data.id, data.data[0], data.data[1]);
 3a8:	9f 93       	push	r25
 3aa:	9b 81       	ldd	r25, Y+3	; 0x03
 3ac:	1f 92       	push	r1
 3ae:	9f 93       	push	r25
 3b0:	1f 92       	push	r1
 3b2:	8f 93       	push	r24
 3b4:	1f 93       	push	r17
 3b6:	0f 93       	push	r16
 3b8:	d4 d0       	rcall	.+424    	; 0x562 <printf>
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
			timer_1_set_top(data.data[0]);
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	80 df       	rcall	.-256    	; 0x2c0 <timer_1_set_top>
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	e6 cf       	rjmp	.-52     	; 0x398 <main+0x36>

000003cc <__vector_29>:
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
/*
void game_over(void){
	
}*/
uint32_t score = 0;
ISR(ADC_vect){
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	0b b6       	in	r0, 0x3b	; 59
 3d8:	0f 92       	push	r0
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	uint8_t val = ADCH;
 3f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	if(val < 70){
 3f6:	86 34       	cpi	r24, 0x46	; 70
 3f8:	e0 f4       	brcc	.+56     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	//game_over();
	printf("\r val =  %d  score = %d   \n\r", val, score);
 3fa:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x3>
 3fe:	9f 93       	push	r25
 400:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <__data_end+0x2>
 404:	9f 93       	push	r25
 406:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
 40a:	9f 93       	push	r25
 40c:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <__data_end>
 410:	9f 93       	push	r25
 412:	1f 92       	push	r1
 414:	8f 93       	push	r24
 416:	8a e4       	ldi	r24, 0x4A	; 74
 418:	92 e0       	ldi	r25, 0x02	; 2
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	a1 d0       	rcall	.+322    	; 0x562 <printf>
 420:	8d b7       	in	r24, 0x3d	; 61
 422:	9e b7       	in	r25, 0x3e	; 62
 424:	08 96       	adiw	r24, 0x08	; 8
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	9e bf       	out	0x3e, r25	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	8d bf       	out	0x3d, r24	; 61
 430:	13 c0       	rjmp	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	}
	else{
		score += 1;
 432:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
 436:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
 43a:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <__data_end+0x2>
 43e:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <__data_end+0x3>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	a1 1d       	adc	r26, r1
 446:	b1 1d       	adc	r27, r1
 448:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
 44c:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__data_end+0x1>
 450:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <__data_end+0x2>
 454:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <__data_end+0x3>
	/*if(score >= 1000)
	{
		
		score = 0;
	}*/
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0b be       	out	0x3b, r0	; 59
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_21>:

ISR(TIMER0_COMPA_vect){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	0b b6       	in	r0, 0x3b	; 59
 48a:	0f 92       	push	r0
 48c:	8f 93       	push	r24
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 492:	ea e7       	ldi	r30, 0x7A	; 122
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	80 64       	ori	r24, 0x40	; 64
 49a:	80 83       	st	Z, r24
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	8f 91       	pop	r24
 4a2:	0f 90       	pop	r0
 4a4:	0b be       	out	0x3b, r0	; 59
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__umulhisi3>:
 4b0:	a2 9f       	mul	r26, r18
 4b2:	b0 01       	movw	r22, r0
 4b4:	b3 9f       	mul	r27, r19
 4b6:	c0 01       	movw	r24, r0
 4b8:	a3 9f       	mul	r26, r19
 4ba:	70 0d       	add	r23, r0
 4bc:	81 1d       	adc	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	91 1d       	adc	r25, r1
 4c2:	b2 9f       	mul	r27, r18
 4c4:	70 0d       	add	r23, r0
 4c6:	81 1d       	adc	r24, r1
 4c8:	11 24       	eor	r1, r1
 4ca:	91 1d       	adc	r25, r1
 4cc:	08 95       	ret

000004ce <fdevopen>:
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	31 f4       	brne	.+12     	; 0x4e6 <fdevopen+0x18>
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	19 f4       	brne	.+6      	; 0x4e6 <fdevopen+0x18>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	39 c0       	rjmp	.+114    	; 0x558 <fdevopen+0x8a>
 4e6:	8b 01       	movw	r16, r22
 4e8:	ec 01       	movw	r28, r24
 4ea:	6e e0       	ldi	r22, 0x0E	; 14
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	47 d2       	rcall	.+1166   	; 0x982 <calloc>
 4f4:	fc 01       	movw	r30, r24
 4f6:	89 2b       	or	r24, r25
 4f8:	99 f3       	breq	.-26     	; 0x4e0 <fdevopen+0x12>
 4fa:	80 e8       	ldi	r24, 0x80	; 128
 4fc:	83 83       	std	Z+3, r24	; 0x03
 4fe:	01 15       	cp	r16, r1
 500:	11 05       	cpc	r17, r1
 502:	71 f0       	breq	.+28     	; 0x520 <fdevopen+0x52>
 504:	13 87       	std	Z+11, r17	; 0x0b
 506:	02 87       	std	Z+10, r16	; 0x0a
 508:	81 e8       	ldi	r24, 0x81	; 129
 50a:	83 83       	std	Z+3, r24	; 0x03
 50c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__iob>
 510:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__iob+0x1>
 514:	89 2b       	or	r24, r25
 516:	21 f4       	brne	.+8      	; 0x520 <fdevopen+0x52>
 518:	f0 93 6f 02 	sts	0x026F, r31	; 0x80026f <__iob+0x1>
 51c:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <__iob>
 520:	20 97       	sbiw	r28, 0x00	; 0
 522:	c9 f0       	breq	.+50     	; 0x556 <fdevopen+0x88>
 524:	d1 87       	std	Z+9, r29	; 0x09
 526:	c0 87       	std	Z+8, r28	; 0x08
 528:	83 81       	ldd	r24, Z+3	; 0x03
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	83 83       	std	Z+3, r24	; 0x03
 52e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__iob+0x2>
 532:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__iob+0x3>
 536:	89 2b       	or	r24, r25
 538:	71 f4       	brne	.+28     	; 0x556 <fdevopen+0x88>
 53a:	f0 93 71 02 	sts	0x0271, r31	; 0x800271 <__iob+0x3>
 53e:	e0 93 70 02 	sts	0x0270, r30	; 0x800270 <__iob+0x2>
 542:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__iob+0x4>
 546:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <__iob+0x5>
 54a:	89 2b       	or	r24, r25
 54c:	21 f4       	brne	.+8      	; 0x556 <fdevopen+0x88>
 54e:	f0 93 73 02 	sts	0x0273, r31	; 0x800273 <__iob+0x5>
 552:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <__iob+0x4>
 556:	cf 01       	movw	r24, r30
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <printf>:
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	ae 01       	movw	r20, r28
 56c:	4a 5f       	subi	r20, 0xFA	; 250
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	fa 01       	movw	r30, r20
 572:	61 91       	ld	r22, Z+
 574:	71 91       	ld	r23, Z+
 576:	af 01       	movw	r20, r30
 578:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__iob+0x2>
 57c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__iob+0x3>
 580:	03 d0       	rcall	.+6      	; 0x588 <vfprintf>
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <vfprintf>:
 588:	2f 92       	push	r2
 58a:	3f 92       	push	r3
 58c:	4f 92       	push	r4
 58e:	5f 92       	push	r5
 590:	6f 92       	push	r6
 592:	7f 92       	push	r7
 594:	8f 92       	push	r8
 596:	9f 92       	push	r9
 598:	af 92       	push	r10
 59a:	bf 92       	push	r11
 59c:	cf 92       	push	r12
 59e:	df 92       	push	r13
 5a0:	ef 92       	push	r14
 5a2:	ff 92       	push	r15
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	2b 97       	sbiw	r28, 0x0b	; 11
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	6c 01       	movw	r12, r24
 5be:	7b 01       	movw	r14, r22
 5c0:	8a 01       	movw	r16, r20
 5c2:	fc 01       	movw	r30, r24
 5c4:	17 82       	std	Z+7, r1	; 0x07
 5c6:	16 82       	std	Z+6, r1	; 0x06
 5c8:	83 81       	ldd	r24, Z+3	; 0x03
 5ca:	81 ff       	sbrs	r24, 1
 5cc:	bf c1       	rjmp	.+894    	; 0x94c <vfprintf+0x3c4>
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	3c 01       	movw	r6, r24
 5d4:	f6 01       	movw	r30, r12
 5d6:	93 81       	ldd	r25, Z+3	; 0x03
 5d8:	f7 01       	movw	r30, r14
 5da:	93 fd       	sbrc	r25, 3
 5dc:	85 91       	lpm	r24, Z+
 5de:	93 ff       	sbrs	r25, 3
 5e0:	81 91       	ld	r24, Z+
 5e2:	7f 01       	movw	r14, r30
 5e4:	88 23       	and	r24, r24
 5e6:	09 f4       	brne	.+2      	; 0x5ea <vfprintf+0x62>
 5e8:	ad c1       	rjmp	.+858    	; 0x944 <vfprintf+0x3bc>
 5ea:	85 32       	cpi	r24, 0x25	; 37
 5ec:	39 f4       	brne	.+14     	; 0x5fc <vfprintf+0x74>
 5ee:	93 fd       	sbrc	r25, 3
 5f0:	85 91       	lpm	r24, Z+
 5f2:	93 ff       	sbrs	r25, 3
 5f4:	81 91       	ld	r24, Z+
 5f6:	7f 01       	movw	r14, r30
 5f8:	85 32       	cpi	r24, 0x25	; 37
 5fa:	21 f4       	brne	.+8      	; 0x604 <vfprintf+0x7c>
 5fc:	b6 01       	movw	r22, r12
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	18 d3       	rcall	.+1584   	; 0xc32 <fputc>
 602:	e8 cf       	rjmp	.-48     	; 0x5d4 <vfprintf+0x4c>
 604:	91 2c       	mov	r9, r1
 606:	21 2c       	mov	r2, r1
 608:	31 2c       	mov	r3, r1
 60a:	ff e1       	ldi	r31, 0x1F	; 31
 60c:	f3 15       	cp	r31, r3
 60e:	d8 f0       	brcs	.+54     	; 0x646 <vfprintf+0xbe>
 610:	8b 32       	cpi	r24, 0x2B	; 43
 612:	79 f0       	breq	.+30     	; 0x632 <vfprintf+0xaa>
 614:	38 f4       	brcc	.+14     	; 0x624 <vfprintf+0x9c>
 616:	80 32       	cpi	r24, 0x20	; 32
 618:	79 f0       	breq	.+30     	; 0x638 <vfprintf+0xb0>
 61a:	83 32       	cpi	r24, 0x23	; 35
 61c:	a1 f4       	brne	.+40     	; 0x646 <vfprintf+0xbe>
 61e:	23 2d       	mov	r18, r3
 620:	20 61       	ori	r18, 0x10	; 16
 622:	1d c0       	rjmp	.+58     	; 0x65e <vfprintf+0xd6>
 624:	8d 32       	cpi	r24, 0x2D	; 45
 626:	61 f0       	breq	.+24     	; 0x640 <vfprintf+0xb8>
 628:	80 33       	cpi	r24, 0x30	; 48
 62a:	69 f4       	brne	.+26     	; 0x646 <vfprintf+0xbe>
 62c:	23 2d       	mov	r18, r3
 62e:	21 60       	ori	r18, 0x01	; 1
 630:	16 c0       	rjmp	.+44     	; 0x65e <vfprintf+0xd6>
 632:	83 2d       	mov	r24, r3
 634:	82 60       	ori	r24, 0x02	; 2
 636:	38 2e       	mov	r3, r24
 638:	e3 2d       	mov	r30, r3
 63a:	e4 60       	ori	r30, 0x04	; 4
 63c:	3e 2e       	mov	r3, r30
 63e:	2a c0       	rjmp	.+84     	; 0x694 <vfprintf+0x10c>
 640:	f3 2d       	mov	r31, r3
 642:	f8 60       	ori	r31, 0x08	; 8
 644:	1d c0       	rjmp	.+58     	; 0x680 <vfprintf+0xf8>
 646:	37 fc       	sbrc	r3, 7
 648:	2d c0       	rjmp	.+90     	; 0x6a4 <vfprintf+0x11c>
 64a:	20 ed       	ldi	r18, 0xD0	; 208
 64c:	28 0f       	add	r18, r24
 64e:	2a 30       	cpi	r18, 0x0A	; 10
 650:	40 f0       	brcs	.+16     	; 0x662 <vfprintf+0xda>
 652:	8e 32       	cpi	r24, 0x2E	; 46
 654:	b9 f4       	brne	.+46     	; 0x684 <vfprintf+0xfc>
 656:	36 fc       	sbrc	r3, 6
 658:	75 c1       	rjmp	.+746    	; 0x944 <vfprintf+0x3bc>
 65a:	23 2d       	mov	r18, r3
 65c:	20 64       	ori	r18, 0x40	; 64
 65e:	32 2e       	mov	r3, r18
 660:	19 c0       	rjmp	.+50     	; 0x694 <vfprintf+0x10c>
 662:	36 fe       	sbrs	r3, 6
 664:	06 c0       	rjmp	.+12     	; 0x672 <vfprintf+0xea>
 666:	8a e0       	ldi	r24, 0x0A	; 10
 668:	98 9e       	mul	r9, r24
 66a:	20 0d       	add	r18, r0
 66c:	11 24       	eor	r1, r1
 66e:	92 2e       	mov	r9, r18
 670:	11 c0       	rjmp	.+34     	; 0x694 <vfprintf+0x10c>
 672:	ea e0       	ldi	r30, 0x0A	; 10
 674:	2e 9e       	mul	r2, r30
 676:	20 0d       	add	r18, r0
 678:	11 24       	eor	r1, r1
 67a:	22 2e       	mov	r2, r18
 67c:	f3 2d       	mov	r31, r3
 67e:	f0 62       	ori	r31, 0x20	; 32
 680:	3f 2e       	mov	r3, r31
 682:	08 c0       	rjmp	.+16     	; 0x694 <vfprintf+0x10c>
 684:	8c 36       	cpi	r24, 0x6C	; 108
 686:	21 f4       	brne	.+8      	; 0x690 <vfprintf+0x108>
 688:	83 2d       	mov	r24, r3
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	38 2e       	mov	r3, r24
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0x10c>
 690:	88 36       	cpi	r24, 0x68	; 104
 692:	41 f4       	brne	.+16     	; 0x6a4 <vfprintf+0x11c>
 694:	f7 01       	movw	r30, r14
 696:	93 fd       	sbrc	r25, 3
 698:	85 91       	lpm	r24, Z+
 69a:	93 ff       	sbrs	r25, 3
 69c:	81 91       	ld	r24, Z+
 69e:	7f 01       	movw	r14, r30
 6a0:	81 11       	cpse	r24, r1
 6a2:	b3 cf       	rjmp	.-154    	; 0x60a <vfprintf+0x82>
 6a4:	98 2f       	mov	r25, r24
 6a6:	9f 7d       	andi	r25, 0xDF	; 223
 6a8:	95 54       	subi	r25, 0x45	; 69
 6aa:	93 30       	cpi	r25, 0x03	; 3
 6ac:	28 f4       	brcc	.+10     	; 0x6b8 <vfprintf+0x130>
 6ae:	0c 5f       	subi	r16, 0xFC	; 252
 6b0:	1f 4f       	sbci	r17, 0xFF	; 255
 6b2:	9f e3       	ldi	r25, 0x3F	; 63
 6b4:	99 83       	std	Y+1, r25	; 0x01
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <vfprintf+0x14a>
 6b8:	83 36       	cpi	r24, 0x63	; 99
 6ba:	31 f0       	breq	.+12     	; 0x6c8 <vfprintf+0x140>
 6bc:	83 37       	cpi	r24, 0x73	; 115
 6be:	71 f0       	breq	.+28     	; 0x6dc <vfprintf+0x154>
 6c0:	83 35       	cpi	r24, 0x53	; 83
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <vfprintf+0x13e>
 6c4:	55 c0       	rjmp	.+170    	; 0x770 <vfprintf+0x1e8>
 6c6:	20 c0       	rjmp	.+64     	; 0x708 <vfprintf+0x180>
 6c8:	f8 01       	movw	r30, r16
 6ca:	80 81       	ld	r24, Z
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	0e 5f       	subi	r16, 0xFE	; 254
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	88 24       	eor	r8, r8
 6d4:	83 94       	inc	r8
 6d6:	91 2c       	mov	r9, r1
 6d8:	53 01       	movw	r10, r6
 6da:	12 c0       	rjmp	.+36     	; 0x700 <vfprintf+0x178>
 6dc:	28 01       	movw	r4, r16
 6de:	f2 e0       	ldi	r31, 0x02	; 2
 6e0:	4f 0e       	add	r4, r31
 6e2:	51 1c       	adc	r5, r1
 6e4:	f8 01       	movw	r30, r16
 6e6:	a0 80       	ld	r10, Z
 6e8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ea:	36 fe       	sbrs	r3, 6
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <vfprintf+0x16c>
 6ee:	69 2d       	mov	r22, r9
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0x170>
 6f4:	6f ef       	ldi	r22, 0xFF	; 255
 6f6:	7f ef       	ldi	r23, 0xFF	; 255
 6f8:	c5 01       	movw	r24, r10
 6fa:	90 d2       	rcall	.+1312   	; 0xc1c <strnlen>
 6fc:	4c 01       	movw	r8, r24
 6fe:	82 01       	movw	r16, r4
 700:	f3 2d       	mov	r31, r3
 702:	ff 77       	andi	r31, 0x7F	; 127
 704:	3f 2e       	mov	r3, r31
 706:	15 c0       	rjmp	.+42     	; 0x732 <vfprintf+0x1aa>
 708:	28 01       	movw	r4, r16
 70a:	22 e0       	ldi	r18, 0x02	; 2
 70c:	42 0e       	add	r4, r18
 70e:	51 1c       	adc	r5, r1
 710:	f8 01       	movw	r30, r16
 712:	a0 80       	ld	r10, Z
 714:	b1 80       	ldd	r11, Z+1	; 0x01
 716:	36 fe       	sbrs	r3, 6
 718:	03 c0       	rjmp	.+6      	; 0x720 <vfprintf+0x198>
 71a:	69 2d       	mov	r22, r9
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x19c>
 720:	6f ef       	ldi	r22, 0xFF	; 255
 722:	7f ef       	ldi	r23, 0xFF	; 255
 724:	c5 01       	movw	r24, r10
 726:	68 d2       	rcall	.+1232   	; 0xbf8 <strnlen_P>
 728:	4c 01       	movw	r8, r24
 72a:	f3 2d       	mov	r31, r3
 72c:	f0 68       	ori	r31, 0x80	; 128
 72e:	3f 2e       	mov	r3, r31
 730:	82 01       	movw	r16, r4
 732:	33 fc       	sbrc	r3, 3
 734:	19 c0       	rjmp	.+50     	; 0x768 <vfprintf+0x1e0>
 736:	82 2d       	mov	r24, r2
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	88 16       	cp	r8, r24
 73c:	99 06       	cpc	r9, r25
 73e:	a0 f4       	brcc	.+40     	; 0x768 <vfprintf+0x1e0>
 740:	b6 01       	movw	r22, r12
 742:	80 e2       	ldi	r24, 0x20	; 32
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	75 d2       	rcall	.+1258   	; 0xc32 <fputc>
 748:	2a 94       	dec	r2
 74a:	f5 cf       	rjmp	.-22     	; 0x736 <vfprintf+0x1ae>
 74c:	f5 01       	movw	r30, r10
 74e:	37 fc       	sbrc	r3, 7
 750:	85 91       	lpm	r24, Z+
 752:	37 fe       	sbrs	r3, 7
 754:	81 91       	ld	r24, Z+
 756:	5f 01       	movw	r10, r30
 758:	b6 01       	movw	r22, r12
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	6a d2       	rcall	.+1236   	; 0xc32 <fputc>
 75e:	21 10       	cpse	r2, r1
 760:	2a 94       	dec	r2
 762:	21 e0       	ldi	r18, 0x01	; 1
 764:	82 1a       	sub	r8, r18
 766:	91 08       	sbc	r9, r1
 768:	81 14       	cp	r8, r1
 76a:	91 04       	cpc	r9, r1
 76c:	79 f7       	brne	.-34     	; 0x74c <vfprintf+0x1c4>
 76e:	e1 c0       	rjmp	.+450    	; 0x932 <vfprintf+0x3aa>
 770:	84 36       	cpi	r24, 0x64	; 100
 772:	11 f0       	breq	.+4      	; 0x778 <vfprintf+0x1f0>
 774:	89 36       	cpi	r24, 0x69	; 105
 776:	39 f5       	brne	.+78     	; 0x7c6 <vfprintf+0x23e>
 778:	f8 01       	movw	r30, r16
 77a:	37 fe       	sbrs	r3, 7
 77c:	07 c0       	rjmp	.+14     	; 0x78c <vfprintf+0x204>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	08 c0       	rjmp	.+16     	; 0x79c <vfprintf+0x214>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	07 2e       	mov	r0, r23
 792:	00 0c       	add	r0, r0
 794:	88 0b       	sbc	r24, r24
 796:	99 0b       	sbc	r25, r25
 798:	0e 5f       	subi	r16, 0xFE	; 254
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	f3 2d       	mov	r31, r3
 79e:	ff 76       	andi	r31, 0x6F	; 111
 7a0:	3f 2e       	mov	r3, r31
 7a2:	97 ff       	sbrs	r25, 7
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <vfprintf+0x230>
 7a6:	90 95       	com	r25
 7a8:	80 95       	com	r24
 7aa:	70 95       	com	r23
 7ac:	61 95       	neg	r22
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	8f 4f       	sbci	r24, 0xFF	; 255
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	f0 68       	ori	r31, 0x80	; 128
 7b6:	3f 2e       	mov	r3, r31
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	a3 01       	movw	r20, r6
 7be:	75 d2       	rcall	.+1258   	; 0xcaa <__ultoa_invert>
 7c0:	88 2e       	mov	r8, r24
 7c2:	86 18       	sub	r8, r6
 7c4:	44 c0       	rjmp	.+136    	; 0x84e <vfprintf+0x2c6>
 7c6:	85 37       	cpi	r24, 0x75	; 117
 7c8:	31 f4       	brne	.+12     	; 0x7d6 <vfprintf+0x24e>
 7ca:	23 2d       	mov	r18, r3
 7cc:	2f 7e       	andi	r18, 0xEF	; 239
 7ce:	b2 2e       	mov	r11, r18
 7d0:	2a e0       	ldi	r18, 0x0A	; 10
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	25 c0       	rjmp	.+74     	; 0x820 <vfprintf+0x298>
 7d6:	93 2d       	mov	r25, r3
 7d8:	99 7f       	andi	r25, 0xF9	; 249
 7da:	b9 2e       	mov	r11, r25
 7dc:	8f 36       	cpi	r24, 0x6F	; 111
 7de:	c1 f0       	breq	.+48     	; 0x810 <vfprintf+0x288>
 7e0:	18 f4       	brcc	.+6      	; 0x7e8 <vfprintf+0x260>
 7e2:	88 35       	cpi	r24, 0x58	; 88
 7e4:	79 f0       	breq	.+30     	; 0x804 <vfprintf+0x27c>
 7e6:	ae c0       	rjmp	.+348    	; 0x944 <vfprintf+0x3bc>
 7e8:	80 37       	cpi	r24, 0x70	; 112
 7ea:	19 f0       	breq	.+6      	; 0x7f2 <vfprintf+0x26a>
 7ec:	88 37       	cpi	r24, 0x78	; 120
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <vfprintf+0x270>
 7f0:	a9 c0       	rjmp	.+338    	; 0x944 <vfprintf+0x3bc>
 7f2:	e9 2f       	mov	r30, r25
 7f4:	e0 61       	ori	r30, 0x10	; 16
 7f6:	be 2e       	mov	r11, r30
 7f8:	b4 fe       	sbrs	r11, 4
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <vfprintf+0x28e>
 7fc:	fb 2d       	mov	r31, r11
 7fe:	f4 60       	ori	r31, 0x04	; 4
 800:	bf 2e       	mov	r11, r31
 802:	09 c0       	rjmp	.+18     	; 0x816 <vfprintf+0x28e>
 804:	34 fe       	sbrs	r3, 4
 806:	0a c0       	rjmp	.+20     	; 0x81c <vfprintf+0x294>
 808:	29 2f       	mov	r18, r25
 80a:	26 60       	ori	r18, 0x06	; 6
 80c:	b2 2e       	mov	r11, r18
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x294>
 810:	28 e0       	ldi	r18, 0x08	; 8
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	05 c0       	rjmp	.+10     	; 0x820 <vfprintf+0x298>
 816:	20 e1       	ldi	r18, 0x10	; 16
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x298>
 81c:	20 e1       	ldi	r18, 0x10	; 16
 81e:	32 e0       	ldi	r19, 0x02	; 2
 820:	f8 01       	movw	r30, r16
 822:	b7 fe       	sbrs	r11, 7
 824:	07 c0       	rjmp	.+14     	; 0x834 <vfprintf+0x2ac>
 826:	60 81       	ld	r22, Z
 828:	71 81       	ldd	r23, Z+1	; 0x01
 82a:	82 81       	ldd	r24, Z+2	; 0x02
 82c:	93 81       	ldd	r25, Z+3	; 0x03
 82e:	0c 5f       	subi	r16, 0xFC	; 252
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	06 c0       	rjmp	.+12     	; 0x840 <vfprintf+0x2b8>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 5f       	subi	r16, 0xFE	; 254
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	a3 01       	movw	r20, r6
 842:	33 d2       	rcall	.+1126   	; 0xcaa <__ultoa_invert>
 844:	88 2e       	mov	r8, r24
 846:	86 18       	sub	r8, r6
 848:	fb 2d       	mov	r31, r11
 84a:	ff 77       	andi	r31, 0x7F	; 127
 84c:	3f 2e       	mov	r3, r31
 84e:	36 fe       	sbrs	r3, 6
 850:	0d c0       	rjmp	.+26     	; 0x86c <vfprintf+0x2e4>
 852:	23 2d       	mov	r18, r3
 854:	2e 7f       	andi	r18, 0xFE	; 254
 856:	a2 2e       	mov	r10, r18
 858:	89 14       	cp	r8, r9
 85a:	58 f4       	brcc	.+22     	; 0x872 <vfprintf+0x2ea>
 85c:	34 fe       	sbrs	r3, 4
 85e:	0b c0       	rjmp	.+22     	; 0x876 <vfprintf+0x2ee>
 860:	32 fc       	sbrc	r3, 2
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x2ee>
 864:	83 2d       	mov	r24, r3
 866:	8e 7e       	andi	r24, 0xEE	; 238
 868:	a8 2e       	mov	r10, r24
 86a:	05 c0       	rjmp	.+10     	; 0x876 <vfprintf+0x2ee>
 86c:	b8 2c       	mov	r11, r8
 86e:	a3 2c       	mov	r10, r3
 870:	03 c0       	rjmp	.+6      	; 0x878 <vfprintf+0x2f0>
 872:	b8 2c       	mov	r11, r8
 874:	01 c0       	rjmp	.+2      	; 0x878 <vfprintf+0x2f0>
 876:	b9 2c       	mov	r11, r9
 878:	a4 fe       	sbrs	r10, 4
 87a:	0f c0       	rjmp	.+30     	; 0x89a <vfprintf+0x312>
 87c:	fe 01       	movw	r30, r28
 87e:	e8 0d       	add	r30, r8
 880:	f1 1d       	adc	r31, r1
 882:	80 81       	ld	r24, Z
 884:	80 33       	cpi	r24, 0x30	; 48
 886:	21 f4       	brne	.+8      	; 0x890 <vfprintf+0x308>
 888:	9a 2d       	mov	r25, r10
 88a:	99 7e       	andi	r25, 0xE9	; 233
 88c:	a9 2e       	mov	r10, r25
 88e:	09 c0       	rjmp	.+18     	; 0x8a2 <vfprintf+0x31a>
 890:	a2 fe       	sbrs	r10, 2
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <vfprintf+0x318>
 894:	b3 94       	inc	r11
 896:	b3 94       	inc	r11
 898:	04 c0       	rjmp	.+8      	; 0x8a2 <vfprintf+0x31a>
 89a:	8a 2d       	mov	r24, r10
 89c:	86 78       	andi	r24, 0x86	; 134
 89e:	09 f0       	breq	.+2      	; 0x8a2 <vfprintf+0x31a>
 8a0:	b3 94       	inc	r11
 8a2:	a3 fc       	sbrc	r10, 3
 8a4:	10 c0       	rjmp	.+32     	; 0x8c6 <vfprintf+0x33e>
 8a6:	a0 fe       	sbrs	r10, 0
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0x32e>
 8aa:	b2 14       	cp	r11, r2
 8ac:	80 f4       	brcc	.+32     	; 0x8ce <vfprintf+0x346>
 8ae:	28 0c       	add	r2, r8
 8b0:	92 2c       	mov	r9, r2
 8b2:	9b 18       	sub	r9, r11
 8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <vfprintf+0x348>
 8b6:	b2 14       	cp	r11, r2
 8b8:	58 f4       	brcc	.+22     	; 0x8d0 <vfprintf+0x348>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	b8 d1       	rcall	.+880    	; 0xc32 <fputc>
 8c2:	b3 94       	inc	r11
 8c4:	f8 cf       	rjmp	.-16     	; 0x8b6 <vfprintf+0x32e>
 8c6:	b2 14       	cp	r11, r2
 8c8:	18 f4       	brcc	.+6      	; 0x8d0 <vfprintf+0x348>
 8ca:	2b 18       	sub	r2, r11
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x34a>
 8ce:	98 2c       	mov	r9, r8
 8d0:	21 2c       	mov	r2, r1
 8d2:	a4 fe       	sbrs	r10, 4
 8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <vfprintf+0x36c>
 8d6:	b6 01       	movw	r22, r12
 8d8:	80 e3       	ldi	r24, 0x30	; 48
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	aa d1       	rcall	.+852    	; 0xc32 <fputc>
 8de:	a2 fe       	sbrs	r10, 2
 8e0:	16 c0       	rjmp	.+44     	; 0x90e <vfprintf+0x386>
 8e2:	a1 fc       	sbrc	r10, 1
 8e4:	03 c0       	rjmp	.+6      	; 0x8ec <vfprintf+0x364>
 8e6:	88 e7       	ldi	r24, 0x78	; 120
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <vfprintf+0x368>
 8ec:	88 e5       	ldi	r24, 0x58	; 88
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	b6 01       	movw	r22, r12
 8f2:	0c c0       	rjmp	.+24     	; 0x90c <vfprintf+0x384>
 8f4:	8a 2d       	mov	r24, r10
 8f6:	86 78       	andi	r24, 0x86	; 134
 8f8:	51 f0       	breq	.+20     	; 0x90e <vfprintf+0x386>
 8fa:	a1 fe       	sbrs	r10, 1
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x37a>
 8fe:	8b e2       	ldi	r24, 0x2B	; 43
 900:	01 c0       	rjmp	.+2      	; 0x904 <vfprintf+0x37c>
 902:	80 e2       	ldi	r24, 0x20	; 32
 904:	a7 fc       	sbrc	r10, 7
 906:	8d e2       	ldi	r24, 0x2D	; 45
 908:	b6 01       	movw	r22, r12
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	92 d1       	rcall	.+804    	; 0xc32 <fputc>
 90e:	89 14       	cp	r8, r9
 910:	30 f4       	brcc	.+12     	; 0x91e <vfprintf+0x396>
 912:	b6 01       	movw	r22, r12
 914:	80 e3       	ldi	r24, 0x30	; 48
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	8c d1       	rcall	.+792    	; 0xc32 <fputc>
 91a:	9a 94       	dec	r9
 91c:	f8 cf       	rjmp	.-16     	; 0x90e <vfprintf+0x386>
 91e:	8a 94       	dec	r8
 920:	f3 01       	movw	r30, r6
 922:	e8 0d       	add	r30, r8
 924:	f1 1d       	adc	r31, r1
 926:	80 81       	ld	r24, Z
 928:	b6 01       	movw	r22, r12
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	82 d1       	rcall	.+772    	; 0xc32 <fputc>
 92e:	81 10       	cpse	r8, r1
 930:	f6 cf       	rjmp	.-20     	; 0x91e <vfprintf+0x396>
 932:	22 20       	and	r2, r2
 934:	09 f4       	brne	.+2      	; 0x938 <vfprintf+0x3b0>
 936:	4e ce       	rjmp	.-868    	; 0x5d4 <vfprintf+0x4c>
 938:	b6 01       	movw	r22, r12
 93a:	80 e2       	ldi	r24, 0x20	; 32
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	79 d1       	rcall	.+754    	; 0xc32 <fputc>
 940:	2a 94       	dec	r2
 942:	f7 cf       	rjmp	.-18     	; 0x932 <vfprintf+0x3aa>
 944:	f6 01       	movw	r30, r12
 946:	86 81       	ldd	r24, Z+6	; 0x06
 948:	97 81       	ldd	r25, Z+7	; 0x07
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x3c8>
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	2b 96       	adiw	r28, 0x0b	; 11
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	f8 94       	cli
 956:	de bf       	out	0x3e, r29	; 62
 958:	0f be       	out	0x3f, r0	; 63
 95a:	cd bf       	out	0x3d, r28	; 61
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	ef 90       	pop	r14
 968:	df 90       	pop	r13
 96a:	cf 90       	pop	r12
 96c:	bf 90       	pop	r11
 96e:	af 90       	pop	r10
 970:	9f 90       	pop	r9
 972:	8f 90       	pop	r8
 974:	7f 90       	pop	r7
 976:	6f 90       	pop	r6
 978:	5f 90       	pop	r5
 97a:	4f 90       	pop	r4
 97c:	3f 90       	pop	r3
 97e:	2f 90       	pop	r2
 980:	08 95       	ret

00000982 <calloc>:
 982:	0f 93       	push	r16
 984:	1f 93       	push	r17
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	86 9f       	mul	r24, r22
 98c:	80 01       	movw	r16, r0
 98e:	87 9f       	mul	r24, r23
 990:	10 0d       	add	r17, r0
 992:	96 9f       	mul	r25, r22
 994:	10 0d       	add	r17, r0
 996:	11 24       	eor	r1, r1
 998:	c8 01       	movw	r24, r16
 99a:	0d d0       	rcall	.+26     	; 0x9b6 <malloc>
 99c:	ec 01       	movw	r28, r24
 99e:	00 97       	sbiw	r24, 0x00	; 0
 9a0:	21 f0       	breq	.+8      	; 0x9aa <calloc+0x28>
 9a2:	a8 01       	movw	r20, r16
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	32 d1       	rcall	.+612    	; 0xc0e <memset>
 9aa:	ce 01       	movw	r24, r28
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	08 95       	ret

000009b6 <malloc>:
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	91 05       	cpc	r25, r1
 9c2:	10 f4       	brcc	.+4      	; 0x9c8 <malloc+0x12>
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <__flp>
 9cc:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <__flp+0x1>
 9d0:	20 e0       	ldi	r18, 0x00	; 0
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	a0 e0       	ldi	r26, 0x00	; 0
 9d6:	b0 e0       	ldi	r27, 0x00	; 0
 9d8:	30 97       	sbiw	r30, 0x00	; 0
 9da:	19 f1       	breq	.+70     	; 0xa22 <malloc+0x6c>
 9dc:	40 81       	ld	r20, Z
 9de:	51 81       	ldd	r21, Z+1	; 0x01
 9e0:	02 81       	ldd	r16, Z+2	; 0x02
 9e2:	13 81       	ldd	r17, Z+3	; 0x03
 9e4:	48 17       	cp	r20, r24
 9e6:	59 07       	cpc	r21, r25
 9e8:	c8 f0       	brcs	.+50     	; 0xa1c <malloc+0x66>
 9ea:	84 17       	cp	r24, r20
 9ec:	95 07       	cpc	r25, r21
 9ee:	69 f4       	brne	.+26     	; 0xa0a <malloc+0x54>
 9f0:	10 97       	sbiw	r26, 0x00	; 0
 9f2:	31 f0       	breq	.+12     	; 0xa00 <malloc+0x4a>
 9f4:	12 96       	adiw	r26, 0x02	; 2
 9f6:	0c 93       	st	X, r16
 9f8:	12 97       	sbiw	r26, 0x02	; 2
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	1c 93       	st	X, r17
 9fe:	27 c0       	rjmp	.+78     	; 0xa4e <malloc+0x98>
 a00:	00 93 76 02 	sts	0x0276, r16	; 0x800276 <__flp>
 a04:	10 93 77 02 	sts	0x0277, r17	; 0x800277 <__flp+0x1>
 a08:	22 c0       	rjmp	.+68     	; 0xa4e <malloc+0x98>
 a0a:	21 15       	cp	r18, r1
 a0c:	31 05       	cpc	r19, r1
 a0e:	19 f0       	breq	.+6      	; 0xa16 <malloc+0x60>
 a10:	42 17       	cp	r20, r18
 a12:	53 07       	cpc	r21, r19
 a14:	18 f4       	brcc	.+6      	; 0xa1c <malloc+0x66>
 a16:	9a 01       	movw	r18, r20
 a18:	bd 01       	movw	r22, r26
 a1a:	ef 01       	movw	r28, r30
 a1c:	df 01       	movw	r26, r30
 a1e:	f8 01       	movw	r30, r16
 a20:	db cf       	rjmp	.-74     	; 0x9d8 <malloc+0x22>
 a22:	21 15       	cp	r18, r1
 a24:	31 05       	cpc	r19, r1
 a26:	f9 f0       	breq	.+62     	; 0xa66 <malloc+0xb0>
 a28:	28 1b       	sub	r18, r24
 a2a:	39 0b       	sbc	r19, r25
 a2c:	24 30       	cpi	r18, 0x04	; 4
 a2e:	31 05       	cpc	r19, r1
 a30:	80 f4       	brcc	.+32     	; 0xa52 <malloc+0x9c>
 a32:	8a 81       	ldd	r24, Y+2	; 0x02
 a34:	9b 81       	ldd	r25, Y+3	; 0x03
 a36:	61 15       	cp	r22, r1
 a38:	71 05       	cpc	r23, r1
 a3a:	21 f0       	breq	.+8      	; 0xa44 <malloc+0x8e>
 a3c:	fb 01       	movw	r30, r22
 a3e:	93 83       	std	Z+3, r25	; 0x03
 a40:	82 83       	std	Z+2, r24	; 0x02
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <malloc+0x96>
 a44:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <__flp+0x1>
 a48:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__flp>
 a4c:	fe 01       	movw	r30, r28
 a4e:	32 96       	adiw	r30, 0x02	; 2
 a50:	44 c0       	rjmp	.+136    	; 0xada <malloc+0x124>
 a52:	fe 01       	movw	r30, r28
 a54:	e2 0f       	add	r30, r18
 a56:	f3 1f       	adc	r31, r19
 a58:	81 93       	st	Z+, r24
 a5a:	91 93       	st	Z+, r25
 a5c:	22 50       	subi	r18, 0x02	; 2
 a5e:	31 09       	sbc	r19, r1
 a60:	39 83       	std	Y+1, r19	; 0x01
 a62:	28 83       	st	Y, r18
 a64:	3a c0       	rjmp	.+116    	; 0xada <malloc+0x124>
 a66:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
 a6a:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
 a6e:	23 2b       	or	r18, r19
 a70:	41 f4       	brne	.+16     	; 0xa82 <malloc+0xcc>
 a72:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 a76:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 a7a:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <__brkval+0x1>
 a7e:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <__brkval>
 a82:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 a86:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 a8a:	21 15       	cp	r18, r1
 a8c:	31 05       	cpc	r19, r1
 a8e:	41 f4       	brne	.+16     	; 0xaa0 <malloc+0xea>
 a90:	2d b7       	in	r18, 0x3d	; 61
 a92:	3e b7       	in	r19, 0x3e	; 62
 a94:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 a98:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 a9c:	24 1b       	sub	r18, r20
 a9e:	35 0b       	sbc	r19, r21
 aa0:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__brkval>
 aa4:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__brkval+0x1>
 aa8:	e2 17       	cp	r30, r18
 aaa:	f3 07       	cpc	r31, r19
 aac:	a0 f4       	brcc	.+40     	; 0xad6 <malloc+0x120>
 aae:	2e 1b       	sub	r18, r30
 ab0:	3f 0b       	sbc	r19, r31
 ab2:	28 17       	cp	r18, r24
 ab4:	39 07       	cpc	r19, r25
 ab6:	78 f0       	brcs	.+30     	; 0xad6 <malloc+0x120>
 ab8:	ac 01       	movw	r20, r24
 aba:	4e 5f       	subi	r20, 0xFE	; 254
 abc:	5f 4f       	sbci	r21, 0xFF	; 255
 abe:	24 17       	cp	r18, r20
 ac0:	35 07       	cpc	r19, r21
 ac2:	48 f0       	brcs	.+18     	; 0xad6 <malloc+0x120>
 ac4:	4e 0f       	add	r20, r30
 ac6:	5f 1f       	adc	r21, r31
 ac8:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <__brkval+0x1>
 acc:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <__brkval>
 ad0:	81 93       	st	Z+, r24
 ad2:	91 93       	st	Z+, r25
 ad4:	02 c0       	rjmp	.+4      	; 0xada <malloc+0x124>
 ad6:	e0 e0       	ldi	r30, 0x00	; 0
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	cf 01       	movw	r24, r30
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	1f 91       	pop	r17
 ae2:	0f 91       	pop	r16
 ae4:	08 95       	ret

00000ae6 <free>:
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	09 f4       	brne	.+2      	; 0xaf0 <free+0xa>
 aee:	81 c0       	rjmp	.+258    	; 0xbf2 <free+0x10c>
 af0:	fc 01       	movw	r30, r24
 af2:	32 97       	sbiw	r30, 0x02	; 2
 af4:	13 82       	std	Z+3, r1	; 0x03
 af6:	12 82       	std	Z+2, r1	; 0x02
 af8:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <__flp>
 afc:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <__flp+0x1>
 b00:	10 97       	sbiw	r26, 0x00	; 0
 b02:	81 f4       	brne	.+32     	; 0xb24 <free+0x3e>
 b04:	20 81       	ld	r18, Z
 b06:	31 81       	ldd	r19, Z+1	; 0x01
 b08:	82 0f       	add	r24, r18
 b0a:	93 1f       	adc	r25, r19
 b0c:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
 b10:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
 b14:	28 17       	cp	r18, r24
 b16:	39 07       	cpc	r19, r25
 b18:	51 f5       	brne	.+84     	; 0xb6e <free+0x88>
 b1a:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__brkval+0x1>
 b1e:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__brkval>
 b22:	67 c0       	rjmp	.+206    	; 0xbf2 <free+0x10c>
 b24:	ed 01       	movw	r28, r26
 b26:	20 e0       	ldi	r18, 0x00	; 0
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	ce 17       	cp	r28, r30
 b2c:	df 07       	cpc	r29, r31
 b2e:	40 f4       	brcc	.+16     	; 0xb40 <free+0x5a>
 b30:	4a 81       	ldd	r20, Y+2	; 0x02
 b32:	5b 81       	ldd	r21, Y+3	; 0x03
 b34:	9e 01       	movw	r18, r28
 b36:	41 15       	cp	r20, r1
 b38:	51 05       	cpc	r21, r1
 b3a:	f1 f0       	breq	.+60     	; 0xb78 <free+0x92>
 b3c:	ea 01       	movw	r28, r20
 b3e:	f5 cf       	rjmp	.-22     	; 0xb2a <free+0x44>
 b40:	d3 83       	std	Z+3, r29	; 0x03
 b42:	c2 83       	std	Z+2, r28	; 0x02
 b44:	40 81       	ld	r20, Z
 b46:	51 81       	ldd	r21, Z+1	; 0x01
 b48:	84 0f       	add	r24, r20
 b4a:	95 1f       	adc	r25, r21
 b4c:	c8 17       	cp	r28, r24
 b4e:	d9 07       	cpc	r29, r25
 b50:	59 f4       	brne	.+22     	; 0xb68 <free+0x82>
 b52:	88 81       	ld	r24, Y
 b54:	99 81       	ldd	r25, Y+1	; 0x01
 b56:	84 0f       	add	r24, r20
 b58:	95 1f       	adc	r25, r21
 b5a:	02 96       	adiw	r24, 0x02	; 2
 b5c:	91 83       	std	Z+1, r25	; 0x01
 b5e:	80 83       	st	Z, r24
 b60:	8a 81       	ldd	r24, Y+2	; 0x02
 b62:	9b 81       	ldd	r25, Y+3	; 0x03
 b64:	93 83       	std	Z+3, r25	; 0x03
 b66:	82 83       	std	Z+2, r24	; 0x02
 b68:	21 15       	cp	r18, r1
 b6a:	31 05       	cpc	r19, r1
 b6c:	29 f4       	brne	.+10     	; 0xb78 <free+0x92>
 b6e:	f0 93 77 02 	sts	0x0277, r31	; 0x800277 <__flp+0x1>
 b72:	e0 93 76 02 	sts	0x0276, r30	; 0x800276 <__flp>
 b76:	3d c0       	rjmp	.+122    	; 0xbf2 <free+0x10c>
 b78:	e9 01       	movw	r28, r18
 b7a:	fb 83       	std	Y+3, r31	; 0x03
 b7c:	ea 83       	std	Y+2, r30	; 0x02
 b7e:	49 91       	ld	r20, Y+
 b80:	59 91       	ld	r21, Y+
 b82:	c4 0f       	add	r28, r20
 b84:	d5 1f       	adc	r29, r21
 b86:	ec 17       	cp	r30, r28
 b88:	fd 07       	cpc	r31, r29
 b8a:	61 f4       	brne	.+24     	; 0xba4 <free+0xbe>
 b8c:	80 81       	ld	r24, Z
 b8e:	91 81       	ldd	r25, Z+1	; 0x01
 b90:	84 0f       	add	r24, r20
 b92:	95 1f       	adc	r25, r21
 b94:	02 96       	adiw	r24, 0x02	; 2
 b96:	e9 01       	movw	r28, r18
 b98:	99 83       	std	Y+1, r25	; 0x01
 b9a:	88 83       	st	Y, r24
 b9c:	82 81       	ldd	r24, Z+2	; 0x02
 b9e:	93 81       	ldd	r25, Z+3	; 0x03
 ba0:	9b 83       	std	Y+3, r25	; 0x03
 ba2:	8a 83       	std	Y+2, r24	; 0x02
 ba4:	e0 e0       	ldi	r30, 0x00	; 0
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	12 96       	adiw	r26, 0x02	; 2
 baa:	8d 91       	ld	r24, X+
 bac:	9c 91       	ld	r25, X
 bae:	13 97       	sbiw	r26, 0x03	; 3
 bb0:	00 97       	sbiw	r24, 0x00	; 0
 bb2:	19 f0       	breq	.+6      	; 0xbba <free+0xd4>
 bb4:	fd 01       	movw	r30, r26
 bb6:	dc 01       	movw	r26, r24
 bb8:	f7 cf       	rjmp	.-18     	; 0xba8 <free+0xc2>
 bba:	8d 91       	ld	r24, X+
 bbc:	9c 91       	ld	r25, X
 bbe:	11 97       	sbiw	r26, 0x01	; 1
 bc0:	9d 01       	movw	r18, r26
 bc2:	2e 5f       	subi	r18, 0xFE	; 254
 bc4:	3f 4f       	sbci	r19, 0xFF	; 255
 bc6:	82 0f       	add	r24, r18
 bc8:	93 1f       	adc	r25, r19
 bca:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
 bce:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
 bd2:	28 17       	cp	r18, r24
 bd4:	39 07       	cpc	r19, r25
 bd6:	69 f4       	brne	.+26     	; 0xbf2 <free+0x10c>
 bd8:	30 97       	sbiw	r30, 0x00	; 0
 bda:	29 f4       	brne	.+10     	; 0xbe6 <free+0x100>
 bdc:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__flp+0x1>
 be0:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__flp>
 be4:	02 c0       	rjmp	.+4      	; 0xbea <free+0x104>
 be6:	13 82       	std	Z+3, r1	; 0x03
 be8:	12 82       	std	Z+2, r1	; 0x02
 bea:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <__brkval+0x1>
 bee:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <__brkval>
 bf2:	df 91       	pop	r29
 bf4:	cf 91       	pop	r28
 bf6:	08 95       	ret

00000bf8 <strnlen_P>:
 bf8:	fc 01       	movw	r30, r24
 bfa:	05 90       	lpm	r0, Z+
 bfc:	61 50       	subi	r22, 0x01	; 1
 bfe:	70 40       	sbci	r23, 0x00	; 0
 c00:	01 10       	cpse	r0, r1
 c02:	d8 f7       	brcc	.-10     	; 0xbfa <strnlen_P+0x2>
 c04:	80 95       	com	r24
 c06:	90 95       	com	r25
 c08:	8e 0f       	add	r24, r30
 c0a:	9f 1f       	adc	r25, r31
 c0c:	08 95       	ret

00000c0e <memset>:
 c0e:	dc 01       	movw	r26, r24
 c10:	01 c0       	rjmp	.+2      	; 0xc14 <memset+0x6>
 c12:	6d 93       	st	X+, r22
 c14:	41 50       	subi	r20, 0x01	; 1
 c16:	50 40       	sbci	r21, 0x00	; 0
 c18:	e0 f7       	brcc	.-8      	; 0xc12 <memset+0x4>
 c1a:	08 95       	ret

00000c1c <strnlen>:
 c1c:	fc 01       	movw	r30, r24
 c1e:	61 50       	subi	r22, 0x01	; 1
 c20:	70 40       	sbci	r23, 0x00	; 0
 c22:	01 90       	ld	r0, Z+
 c24:	01 10       	cpse	r0, r1
 c26:	d8 f7       	brcc	.-10     	; 0xc1e <strnlen+0x2>
 c28:	80 95       	com	r24
 c2a:	90 95       	com	r25
 c2c:	8e 0f       	add	r24, r30
 c2e:	9f 1f       	adc	r25, r31
 c30:	08 95       	ret

00000c32 <fputc>:
 c32:	0f 93       	push	r16
 c34:	1f 93       	push	r17
 c36:	cf 93       	push	r28
 c38:	df 93       	push	r29
 c3a:	fb 01       	movw	r30, r22
 c3c:	23 81       	ldd	r18, Z+3	; 0x03
 c3e:	21 fd       	sbrc	r18, 1
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <fputc+0x16>
 c42:	8f ef       	ldi	r24, 0xFF	; 255
 c44:	9f ef       	ldi	r25, 0xFF	; 255
 c46:	2c c0       	rjmp	.+88     	; 0xca0 <fputc+0x6e>
 c48:	22 ff       	sbrs	r18, 2
 c4a:	16 c0       	rjmp	.+44     	; 0xc78 <fputc+0x46>
 c4c:	46 81       	ldd	r20, Z+6	; 0x06
 c4e:	57 81       	ldd	r21, Z+7	; 0x07
 c50:	24 81       	ldd	r18, Z+4	; 0x04
 c52:	35 81       	ldd	r19, Z+5	; 0x05
 c54:	42 17       	cp	r20, r18
 c56:	53 07       	cpc	r21, r19
 c58:	44 f4       	brge	.+16     	; 0xc6a <fputc+0x38>
 c5a:	a0 81       	ld	r26, Z
 c5c:	b1 81       	ldd	r27, Z+1	; 0x01
 c5e:	9d 01       	movw	r18, r26
 c60:	2f 5f       	subi	r18, 0xFF	; 255
 c62:	3f 4f       	sbci	r19, 0xFF	; 255
 c64:	31 83       	std	Z+1, r19	; 0x01
 c66:	20 83       	st	Z, r18
 c68:	8c 93       	st	X, r24
 c6a:	26 81       	ldd	r18, Z+6	; 0x06
 c6c:	37 81       	ldd	r19, Z+7	; 0x07
 c6e:	2f 5f       	subi	r18, 0xFF	; 255
 c70:	3f 4f       	sbci	r19, 0xFF	; 255
 c72:	37 83       	std	Z+7, r19	; 0x07
 c74:	26 83       	std	Z+6, r18	; 0x06
 c76:	14 c0       	rjmp	.+40     	; 0xca0 <fputc+0x6e>
 c78:	8b 01       	movw	r16, r22
 c7a:	ec 01       	movw	r28, r24
 c7c:	fb 01       	movw	r30, r22
 c7e:	00 84       	ldd	r0, Z+8	; 0x08
 c80:	f1 85       	ldd	r31, Z+9	; 0x09
 c82:	e0 2d       	mov	r30, r0
 c84:	19 95       	eicall
 c86:	89 2b       	or	r24, r25
 c88:	e1 f6       	brne	.-72     	; 0xc42 <fputc+0x10>
 c8a:	d8 01       	movw	r26, r16
 c8c:	16 96       	adiw	r26, 0x06	; 6
 c8e:	8d 91       	ld	r24, X+
 c90:	9c 91       	ld	r25, X
 c92:	17 97       	sbiw	r26, 0x07	; 7
 c94:	01 96       	adiw	r24, 0x01	; 1
 c96:	17 96       	adiw	r26, 0x07	; 7
 c98:	9c 93       	st	X, r25
 c9a:	8e 93       	st	-X, r24
 c9c:	16 97       	sbiw	r26, 0x06	; 6
 c9e:	ce 01       	movw	r24, r28
 ca0:	df 91       	pop	r29
 ca2:	cf 91       	pop	r28
 ca4:	1f 91       	pop	r17
 ca6:	0f 91       	pop	r16
 ca8:	08 95       	ret

00000caa <__ultoa_invert>:
 caa:	fa 01       	movw	r30, r20
 cac:	aa 27       	eor	r26, r26
 cae:	28 30       	cpi	r18, 0x08	; 8
 cb0:	51 f1       	breq	.+84     	; 0xd06 <__ultoa_invert+0x5c>
 cb2:	20 31       	cpi	r18, 0x10	; 16
 cb4:	81 f1       	breq	.+96     	; 0xd16 <__ultoa_invert+0x6c>
 cb6:	e8 94       	clt
 cb8:	6f 93       	push	r22
 cba:	6e 7f       	andi	r22, 0xFE	; 254
 cbc:	6e 5f       	subi	r22, 0xFE	; 254
 cbe:	7f 4f       	sbci	r23, 0xFF	; 255
 cc0:	8f 4f       	sbci	r24, 0xFF	; 255
 cc2:	9f 4f       	sbci	r25, 0xFF	; 255
 cc4:	af 4f       	sbci	r26, 0xFF	; 255
 cc6:	b1 e0       	ldi	r27, 0x01	; 1
 cc8:	3e d0       	rcall	.+124    	; 0xd46 <__ultoa_invert+0x9c>
 cca:	b4 e0       	ldi	r27, 0x04	; 4
 ccc:	3c d0       	rcall	.+120    	; 0xd46 <__ultoa_invert+0x9c>
 cce:	67 0f       	add	r22, r23
 cd0:	78 1f       	adc	r23, r24
 cd2:	89 1f       	adc	r24, r25
 cd4:	9a 1f       	adc	r25, r26
 cd6:	a1 1d       	adc	r26, r1
 cd8:	68 0f       	add	r22, r24
 cda:	79 1f       	adc	r23, r25
 cdc:	8a 1f       	adc	r24, r26
 cde:	91 1d       	adc	r25, r1
 ce0:	a1 1d       	adc	r26, r1
 ce2:	6a 0f       	add	r22, r26
 ce4:	71 1d       	adc	r23, r1
 ce6:	81 1d       	adc	r24, r1
 ce8:	91 1d       	adc	r25, r1
 cea:	a1 1d       	adc	r26, r1
 cec:	20 d0       	rcall	.+64     	; 0xd2e <__ultoa_invert+0x84>
 cee:	09 f4       	brne	.+2      	; 0xcf2 <__ultoa_invert+0x48>
 cf0:	68 94       	set
 cf2:	3f 91       	pop	r19
 cf4:	2a e0       	ldi	r18, 0x0A	; 10
 cf6:	26 9f       	mul	r18, r22
 cf8:	11 24       	eor	r1, r1
 cfa:	30 19       	sub	r19, r0
 cfc:	30 5d       	subi	r19, 0xD0	; 208
 cfe:	31 93       	st	Z+, r19
 d00:	de f6       	brtc	.-74     	; 0xcb8 <__ultoa_invert+0xe>
 d02:	cf 01       	movw	r24, r30
 d04:	08 95       	ret
 d06:	46 2f       	mov	r20, r22
 d08:	47 70       	andi	r20, 0x07	; 7
 d0a:	40 5d       	subi	r20, 0xD0	; 208
 d0c:	41 93       	st	Z+, r20
 d0e:	b3 e0       	ldi	r27, 0x03	; 3
 d10:	0f d0       	rcall	.+30     	; 0xd30 <__ultoa_invert+0x86>
 d12:	c9 f7       	brne	.-14     	; 0xd06 <__ultoa_invert+0x5c>
 d14:	f6 cf       	rjmp	.-20     	; 0xd02 <__ultoa_invert+0x58>
 d16:	46 2f       	mov	r20, r22
 d18:	4f 70       	andi	r20, 0x0F	; 15
 d1a:	40 5d       	subi	r20, 0xD0	; 208
 d1c:	4a 33       	cpi	r20, 0x3A	; 58
 d1e:	18 f0       	brcs	.+6      	; 0xd26 <__ultoa_invert+0x7c>
 d20:	49 5d       	subi	r20, 0xD9	; 217
 d22:	31 fd       	sbrc	r19, 1
 d24:	40 52       	subi	r20, 0x20	; 32
 d26:	41 93       	st	Z+, r20
 d28:	02 d0       	rcall	.+4      	; 0xd2e <__ultoa_invert+0x84>
 d2a:	a9 f7       	brne	.-22     	; 0xd16 <__ultoa_invert+0x6c>
 d2c:	ea cf       	rjmp	.-44     	; 0xd02 <__ultoa_invert+0x58>
 d2e:	b4 e0       	ldi	r27, 0x04	; 4
 d30:	a6 95       	lsr	r26
 d32:	97 95       	ror	r25
 d34:	87 95       	ror	r24
 d36:	77 95       	ror	r23
 d38:	67 95       	ror	r22
 d3a:	ba 95       	dec	r27
 d3c:	c9 f7       	brne	.-14     	; 0xd30 <__ultoa_invert+0x86>
 d3e:	00 97       	sbiw	r24, 0x00	; 0
 d40:	61 05       	cpc	r22, r1
 d42:	71 05       	cpc	r23, r1
 d44:	08 95       	ret
 d46:	9b 01       	movw	r18, r22
 d48:	ac 01       	movw	r20, r24
 d4a:	0a 2e       	mov	r0, r26
 d4c:	06 94       	lsr	r0
 d4e:	57 95       	ror	r21
 d50:	47 95       	ror	r20
 d52:	37 95       	ror	r19
 d54:	27 95       	ror	r18
 d56:	ba 95       	dec	r27
 d58:	c9 f7       	brne	.-14     	; 0xd4c <__ultoa_invert+0xa2>
 d5a:	62 0f       	add	r22, r18
 d5c:	73 1f       	adc	r23, r19
 d5e:	84 1f       	adc	r24, r20
 d60:	95 1f       	adc	r25, r21
 d62:	a0 1d       	adc	r26, r0
 d64:	08 95       	ret

00000d66 <_exit>:
 d66:	f8 94       	cli

00000d68 <__stop_program>:
 d68:	ff cf       	rjmp	.-2      	; 0xd68 <__stop_program>
